Index.PACKAGES = {"tofu.concurrent" : [{"name" : "tofu.concurrent.Actor", "shortDescription" : "", "object" : "tofu\/concurrent\/Actor$.html", "members_class" : [{"label" : "tell", "tail" : "(message: A)(F: Start[F]): F[Fiber[F, Unit]]", "member" : "tofu.concurrent.Actor.tell", "link" : "tofu\/concurrent\/Actor.html#tell(message:A)(implicitF:tofu.Start[F]):F[cats.effect.Fiber[F,Unit]]", "kind" : "def"}, {"label" : "send", "tail" : "(message: A): F[Unit]", "member" : "tofu.concurrent.Actor.send", "link" : "tofu\/concurrent\/Actor.html#send(message:A):F[Unit]", "kind" : "def"}, {"label" : "watch", "tail" : "(action: (Exit[E, Void]) => F[Unit])(FS: Start[F], F: FlatMap[F]): F[Fiber[F, Unit]]", "member" : "tofu.concurrent.Actor.watch", "link" : "tofu\/concurrent\/Actor.html#watch(action:tofu.concurrent.Exit[E,tofu.Void]=>F[Unit])(implicitFS:tofu.Start[F],implicitF:cats.FlatMap[F]):F[cats.effect.Fiber[F,Unit]]", "kind" : "def"}, {"label" : "onStop", "tail" : "(action: F[Unit])(FS: Start[F], F: FlatMap[F]): F[Fiber[F, Unit]]", "member" : "tofu.concurrent.Actor.onStop", "link" : "tofu\/concurrent\/Actor.html#onStop(action:F[Unit])(implicitFS:tofu.Start[F],implicitF:cats.FlatMap[F]):F[cats.effect.Fiber[F,Unit]]", "kind" : "def"}, {"label" : "?", "tail" : "(make: ((B) => Unit) => A)(F: Concurrent[F]): F[B]", "member" : "tofu.concurrent.Actor.?", "link" : "tofu\/concurrent\/Actor.html#?[B](make:(B=>Unit)=>A)(implicitF:cats.effect.Concurrent[F]):F[B]", "kind" : "def"}, {"label" : "??", "tail" : "(make: ((Either[Throwable, B]) => Unit) => A)(F: Concurrent[F]): F[B]", "member" : "tofu.concurrent.Actor.??", "link" : "tofu\/concurrent\/Actor.html#??[B](make:(Either[Throwable,B]=>Unit)=>A)(implicitF:cats.effect.Concurrent[F]):F[B]", "kind" : "def"}, {"label" : "!", "tail" : "(message: A)(F: Start[F]): F[Fiber[F, Unit]]", "member" : "tofu.concurrent.Actor.!", "link" : "tofu\/concurrent\/Actor.html#!(message:A)(implicitF:tofu.Start[F]):F[cats.effect.Fiber[F,Unit]]", "kind" : "def"}, {"label" : "!!", "tail" : "(message: A): F[Unit]", "member" : "tofu.concurrent.Actor.!!", "link" : "tofu\/concurrent\/Actor.html#!!(message:A):F[Unit]", "kind" : "def"}, {"label" : "daemon", "tail" : ": Daemon[F, E, Void]", "member" : "tofu.concurrent.Actor.daemon", "link" : "tofu\/concurrent\/Actor.html#daemon:tofu.concurrent.Daemon[F,E,tofu.Void]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/Actor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/Actor.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/Actor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/Actor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/Actor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/Actor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/Actor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Actor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Actor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Actor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/Actor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/Actor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/Actor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/Actor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/Actor.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/Actor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/Actor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/Actor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/Actor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "syncSupervise", "tail" : "(receive: (A) => Unit)(strategy: (Throwable) => F[Unit])(arg0: Concurrent[F]): F[Actor[F, Throwable, A]]", "member" : "tofu.concurrent.Actor.syncSupervise", "link" : "tofu\/concurrent\/Actor$.html#syncSupervise[F[_],A](receive:A=>Unit)(strategy:Throwable=>F[Unit])(implicitevidence$38:cats.effect.Concurrent[F]):F[tofu.concurrent.Actor[F,Throwable,A]]", "kind" : "def"}, {"label" : "sync", "tail" : "(receive: (A) => Unit)(arg0: Concurrent[F]): F[Actor[F, Throwable, A]]", "member" : "tofu.concurrent.Actor.sync", "link" : "tofu\/concurrent\/Actor$.html#sync[F[_],A](receive:A=>Unit)(implicitevidence$37:cats.effect.Concurrent[F]):F[tofu.concurrent.Actor[F,Throwable,A]]", "kind" : "def"}, {"label" : "apply", "tail" : "(receive: (A) => F[Unit])(arg0: MVars[F], arg1: Monad[F], arg2: Daemonic[F, E]): F[Actor[F, E, A]]", "member" : "tofu.concurrent.Actor.apply", "link" : "tofu\/concurrent\/Actor$.html#apply[F[_],E,A](receive:A=>F[Unit])(implicitevidence$34:tofu.concurrent.MVars[F],implicitevidence$35:cats.Monad[F],implicitevidence$36:tofu.concurrent.Daemonic[F,E]):F[tofu.concurrent.Actor[F,E,A]]", "kind" : "def"}, {"label" : "spawn", "tail" : "(behavior: Behavior[F, A])(arg0: MVars[F], arg1: Monad[F], arg2: Daemonic[F, E]): F[Actor[F, E, A]]", "member" : "tofu.concurrent.Actor.spawn", "link" : "tofu\/concurrent\/Actor$.html#spawn[F[_],E,A](behavior:tofu.concurrent.Actor.Behavior[F,A])(implicitevidence$31:tofu.concurrent.MVars[F],implicitevidence$32:cats.Monad[F],implicitevidence$33:tofu.concurrent.Daemonic[F,E]):F[tofu.concurrent.Actor[F,E,A]]", "kind" : "def"}, {"label" : "Behavior", "tail" : "", "member" : "tofu.concurrent.Actor.Behavior", "link" : "tofu\/concurrent\/Actor$.html#Behavior[F[_],A]extendsProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/Actor$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/Actor$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/Actor$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/Actor$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/Actor$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/Actor$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/Actor$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Actor$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Actor$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Actor$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/Actor$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/Actor$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/Actor$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/Actor$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/Actor$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/Actor$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/Actor$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/Actor$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/Actor$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "tofu\/concurrent\/Actor.html", "kind" : "class"}, {"name" : "tofu.concurrent.Agent", "object" : "tofu\/concurrent\/Agent$.html", "members_object" : [{"label" : "SemRef", "tail" : "", "member" : "tofu.concurrent.Agent.SemRef", "link" : "tofu\/concurrent\/Agent$.html#SemRef[F[_],A]extendsAgent[F,A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/Agent$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/Agent$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/Agent$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/Agent$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/Agent$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/Agent$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/Agent$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Agent$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Agent$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Agent$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/Agent$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/Agent$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/Agent$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/Agent$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/Agent$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/Agent$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/Agent$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/Agent$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/Agent$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/concurrent\/Agent.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/Agent.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/Agent.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/Agent.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/Agent.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/Agent.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/Agent.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/Agent.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Agent.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Agent.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Agent.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/Agent.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/Agent.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/Agent.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/Agent.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/Agent.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/Agent.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/Agent.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/Agent.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/Agent.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "modifySomeM", "tail" : "(default: B)(f: PartialFunction[A, F[(B, A)]]): F[B]", "member" : "tofu.concurrent.Agent.modifySomeM", "link" : "tofu\/concurrent\/Agent.html#modifySomeM[B](default:B)(f:PartialFunction[A,F[(B,A)]]):F[B]", "kind" : "abstract def"}, {"label" : "updateSomeM", "tail" : "(f: PartialFunction[A, F[A]]): F[A]", "member" : "tofu.concurrent.Agent.updateSomeM", "link" : "tofu\/concurrent\/Agent.html#updateSomeM(f:PartialFunction[A,F[A]]):F[A]", "kind" : "abstract def"}, {"label" : "modifyM", "tail" : "(f: (A) => F[(B, A)]): F[B]", "member" : "tofu.concurrent.Agent.modifyM", "link" : "tofu\/concurrent\/Agent.html#modifyM[B](f:A=>F[(B,A)]):F[B]", "kind" : "abstract def"}, {"label" : "fireUpdateM", "tail" : "(f: (A) => F[A]): F[Unit]", "member" : "tofu.concurrent.Agent.fireUpdateM", "link" : "tofu\/concurrent\/Agent.html#fireUpdateM(f:A=>F[A]):F[Unit]", "kind" : "abstract def"}, {"label" : "updateM", "tail" : "(f: (A) => F[A]): F[A]", "member" : "tofu.concurrent.Agent.updateM", "link" : "tofu\/concurrent\/Agent.html#updateM(f:A=>F[A]):F[A]", "kind" : "abstract def"}, {"label" : "get", "tail" : "(): F[A]", "member" : "tofu.concurrent.Agent.get", "link" : "tofu\/concurrent\/Agent.html#get:F[A]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.concurrent.Agents", "shortDescription" : "", "object" : "tofu\/concurrent\/Agents$.html", "members_object" : [{"label" : "apply", "tail" : "(agents: Agents[F]): Applier[F, F]", "member" : "tofu.concurrent.Agents.apply", "link" : "tofu\/concurrent\/Agents$.html#apply[F[_]](implicitagents:tofu.concurrent.Agents[F]):tofu.concurrent.MakeAgent.Applier[F,F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/Agents$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/Agents$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/Agents$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/Agents$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/Agents$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/Agents$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/Agents$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Agents$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Agents$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Agents$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/Agents$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/Agents$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/Agents$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/Agents$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/Agents$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/Agents$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/Agents$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/Agents$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/Agents$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.concurrent.Atom", "object" : "tofu\/concurrent\/Atom$.html", "members_object" : [{"label" : "QAtom", "tail" : "", "member" : "tofu.concurrent.Atom.QAtom", "link" : "tofu\/concurrent\/Atom$.html#QAtom[F[_],A]extendsAtom[F,A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "AtomByRef", "tail" : "", "member" : "tofu.concurrent.Atom.AtomByRef", "link" : "tofu\/concurrent\/Atom$.html#AtomByRef[F[_],A]extendsAtom[F,A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "AtomOps", "tail" : "", "member" : "tofu.concurrent.Atom.AtomOps", "link" : "tofu\/concurrent\/Atom$.html#AtomOps[F[_],A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "representableKInstance", "tail" : "(): RepresentableK[[α$0$[_$1]]Atom[α$0$, A]]", "member" : "tofu.concurrent.Atom.representableKInstance", "link" : "tofu\/concurrent\/Atom$.html#representableKInstance[A]:tofu.higherKind.RepresentableK[[α$0$[_$1]]tofu.concurrent.Atom[α$0$,A]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/Atom$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/Atom$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/Atom$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/Atom$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/Atom$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/Atom$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/Atom$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Atom$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Atom$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Atom$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/Atom$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/Atom$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/Atom$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/Atom$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/Atom$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/Atom$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/Atom$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/Atom$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/Atom$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/concurrent\/Atom.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/Atom.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/Atom.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/Atom.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/Atom.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/Atom.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/Atom.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/Atom.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Atom.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Atom.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Atom.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/Atom.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/Atom.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/Atom.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/Atom.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/Atom.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/Atom.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/Atom.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/Atom.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/Atom.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "modify", "tail" : "(f: (A) => (A, B)): F[B]", "member" : "tofu.concurrent.Atom.modify", "link" : "tofu\/concurrent\/Atom.html#modify[B](f:A=>(A,B)):F[B]", "kind" : "abstract def"}, {"label" : "update", "tail" : "(f: (A) => A): F[Unit]", "member" : "tofu.concurrent.Atom.update", "link" : "tofu\/concurrent\/Atom.html#update(f:A=>A):F[Unit]", "kind" : "abstract def"}, {"label" : "getAndSet", "tail" : "(a: A): F[A]", "member" : "tofu.concurrent.Atom.getAndSet", "link" : "tofu\/concurrent\/Atom.html#getAndSet(a:A):F[A]", "kind" : "abstract def"}, {"label" : "set", "tail" : "(a: A): F[Unit]", "member" : "tofu.concurrent.Atom.set", "link" : "tofu\/concurrent\/Atom.html#set(a:A):F[Unit]", "kind" : "abstract def"}, {"label" : "get", "tail" : "(): F[A]", "member" : "tofu.concurrent.Atom.get", "link" : "tofu\/concurrent\/Atom.html#get:F[A]", "kind" : "abstract def"}], "shortDescription" : "a middleground between cats.concurrent.Ref and zio.Ref"}, {"name" : "tofu.concurrent.Daemon", "object" : "tofu\/concurrent\/Daemon$.html", "members_object" : [{"label" : "resource", "tail" : "(daemon: F[Daemon[F, E, A]])(arg0: Monad[F], arg1: Daemonic[F, E]): Resource[F, Daemon[F, E, A]]", "member" : "tofu.concurrent.Daemon.resource", "link" : "tofu\/concurrent\/Daemon$.html#resource[F[_],E,A](daemon:F[tofu.concurrent.Daemon[F,E,A]])(implicitevidence$29:cats.Monad[F],implicitevidence$30:tofu.concurrent.Daemonic[F,E]):cats.effect.Resource[F,tofu.concurrent.Daemon[F,E,A]]", "kind" : "def"}, {"label" : "state", "tail" : "(init: S)(state: StateT[F, S, A])(arg0: Monad[F], arg1: Daemonic[F, E]): F[Daemon[F, E, B]]", "member" : "tofu.concurrent.Daemon.state", "link" : "tofu\/concurrent\/Daemon$.html#state[F[_],E,S,A,B](init:S)(state:cats.data.StateT[F,S,A])(implicitevidence$27:cats.Monad[F],implicitevidence$28:tofu.concurrent.Daemonic[F,E]):F[tofu.concurrent.Daemon[F,E,B]]", "kind" : "def"}, {"label" : "iterateTask", "tail" : "(init: A)(step: (A) => F[A])(arg0: Monad[F], arg1: DaemonicThrow[F]): F[DaemonTask[F]]", "member" : "tofu.concurrent.Daemon.iterateTask", "link" : "tofu\/concurrent\/Daemon$.html#iterateTask[F[_],A](init:A)(step:A=>F[A])(implicitevidence$25:cats.Monad[F],implicitevidence$26:tofu.concurrent.DaemonicThrow[F]):F[tofu.concurrent.DaemonTask[F]]", "kind" : "def"}, {"label" : "iterateThrow", "tail" : "(init: A)(step: (A) => F[A])(arg0: Monad[F], arg1: DaemonicThrow[F]): F[DaemonThrow[F, B]]", "member" : "tofu.concurrent.Daemon.iterateThrow", "link" : "tofu\/concurrent\/Daemon$.html#iterateThrow[F[_],A,B](init:A)(step:A=>F[A])(implicitevidence$23:cats.Monad[F],implicitevidence$24:tofu.concurrent.DaemonicThrow[F]):F[tofu.concurrent.DaemonThrow[F,B]]", "kind" : "def"}, {"label" : "iterateUnit", "tail" : "(init: A)(step: (A) => F[A])(arg0: Monad[F], arg1: Daemonic[F, E]): F[Daemon[F, E, Unit]]", "member" : "tofu.concurrent.Daemon.iterateUnit", "link" : "tofu\/concurrent\/Daemon$.html#iterateUnit[F[_],E,A](init:A)(step:A=>F[A])(implicitevidence$21:cats.Monad[F],implicitevidence$22:tofu.concurrent.Daemonic[F,E]):F[tofu.concurrent.Daemon[F,E,Unit]]", "kind" : "def"}, {"label" : "iterate", "tail" : "(init: A)(step: (A) => F[A])(arg0: Monad[F], arg1: Daemonic[F, E]): F[Daemon[F, E, B]]", "member" : "tofu.concurrent.Daemon.iterate", "link" : "tofu\/concurrent\/Daemon$.html#iterate[F[_],E,A,B](init:A)(step:A=>F[A])(implicitevidence$19:cats.Monad[F],implicitevidence$20:tofu.concurrent.Daemonic[F,E]):F[tofu.concurrent.Daemon[F,E,B]]", "kind" : "def"}, {"label" : "repeatTask", "tail" : "(step: F[A])(arg0: Monad[F], arg1: DaemonicThrow[F]): F[DaemonTask[F]]", "member" : "tofu.concurrent.Daemon.repeatTask", "link" : "tofu\/concurrent\/Daemon$.html#repeatTask[F[_],A](step:F[A])(implicitevidence$17:cats.Monad[F],implicitevidence$18:tofu.concurrent.DaemonicThrow[F]):F[tofu.concurrent.DaemonTask[F]]", "kind" : "def"}, {"label" : "repeatThrow", "tail" : "(step: F[A])(arg0: Monad[F], arg1: DaemonicThrow[F]): F[DaemonThrow[F, B]]", "member" : "tofu.concurrent.Daemon.repeatThrow", "link" : "tofu\/concurrent\/Daemon$.html#repeatThrow[F[_],A,B](step:F[A])(implicitevidence$15:cats.Monad[F],implicitevidence$16:tofu.concurrent.DaemonicThrow[F]):F[tofu.concurrent.DaemonThrow[F,B]]", "kind" : "def"}, {"label" : "repeatUnit", "tail" : "(step: F[A])(arg0: Monad[F], arg1: Daemonic[F, E]): F[Daemon[F, E, Unit]]", "member" : "tofu.concurrent.Daemon.repeatUnit", "link" : "tofu\/concurrent\/Daemon$.html#repeatUnit[F[_],E,A](step:F[A])(implicitevidence$13:cats.Monad[F],implicitevidence$14:tofu.concurrent.Daemonic[F,E]):F[tofu.concurrent.Daemon[F,E,Unit]]", "kind" : "def"}, {"label" : "repeat", "tail" : "(step: F[A])(arg0: Monad[F], arg1: Daemonic[F, E]): F[Daemon[F, E, B]]", "member" : "tofu.concurrent.Daemon.repeat", "link" : "tofu\/concurrent\/Daemon$.html#repeat[F[_],E,A,B](step:F[A])(implicitevidence$11:cats.Monad[F],implicitevidence$12:tofu.concurrent.Daemonic[F,E]):F[tofu.concurrent.Daemon[F,E,B]]", "kind" : "def"}, {"label" : "apply", "tail" : "(process: F[A])(D: Daemonic[F, E]): F[Daemon[F, E, A]]", "member" : "tofu.concurrent.Daemon.apply", "link" : "tofu\/concurrent\/Daemon$.html#apply[F[_],E,A](process:F[A])(implicitD:tofu.concurrent.Daemonic[F,E]):F[tofu.concurrent.Daemon[F,E,A]]", "kind" : "def"}, {"label" : "DaemonOps", "tail" : "", "member" : "tofu.concurrent.Daemon.DaemonOps", "link" : "tofu\/concurrent\/Daemon$.html#DaemonOps[F[_],E,A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "daemonApplicative", "tail" : "(F: Monad[F]): Applicative[[γ$22$]Daemon[F, E, γ$22$]]", "member" : "tofu.concurrent.DaemonInstances.daemonApplicative", "link" : "tofu\/concurrent\/Daemon$.html#daemonApplicative[F[_],E](implicitF:cats.Monad[F]):cats.Applicative[[γ$22$]tofu.concurrent.Daemon[F,E,γ$22$]]", "kind" : "implicit final def"}, {"label" : "daemonRepresentable", "tail" : "(): RepresentableK[[α$20$[_$12]]Daemon[α$20$, E, A]]", "member" : "tofu.concurrent.DaemonInstances.daemonRepresentable", "link" : "tofu\/concurrent\/Daemon$.html#daemonRepresentable[E,A]:tofu.higherKind.RepresentableK[[α$20$[_$12]]tofu.concurrent.Daemon[α$20$,E,A]]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/Daemon$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/Daemon$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/Daemon$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/Daemon$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/Daemon$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/Daemon$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/Daemon$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Daemon$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Daemon$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Daemon$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/Daemon$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/Daemon$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/Daemon$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/Daemon$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/Daemon$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/Daemon$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/Daemon$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/Daemon$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/Daemon$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/concurrent\/Daemon.html", "kind" : "trait", "members_trait" : [{"label" : "process", "tail" : "(): Fiber[F, A]", "member" : "tofu.concurrent.Daemon.process", "link" : "tofu\/concurrent\/Daemon.html#process:cats.effect.Fiber[F,A]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/Daemon.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/Daemon.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/Daemon.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/Daemon.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/Daemon.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/Daemon.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/Daemon.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Daemon.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Daemon.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Daemon.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/Daemon.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/Daemon.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/Daemon.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/Daemon.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/Daemon.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/Daemon.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/Daemon.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/Daemon.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/Daemon.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "exit", "tail" : "(): F[Exit[E, A]]", "member" : "tofu.concurrent.Daemon.exit", "link" : "tofu\/concurrent\/Daemon.html#exit:F[tofu.concurrent.Exit[E,A]]", "kind" : "abstract def"}, {"label" : "poll", "tail" : "(): F[Option[Exit[E, A]]]", "member" : "tofu.concurrent.Daemon.poll", "link" : "tofu\/concurrent\/Daemon.html#poll:F[Option[tofu.concurrent.Exit[E,A]]]", "kind" : "abstract def"}, {"label" : "cancel", "tail" : "(): F[Unit]", "member" : "tofu.concurrent.Daemon.cancel", "link" : "tofu\/concurrent\/Daemon.html#cancel:F[Unit]", "kind" : "abstract def"}, {"label" : "join", "tail" : "(): F[A]", "member" : "tofu.concurrent.Daemon.join", "link" : "tofu\/concurrent\/Daemon.html#join:F[A]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.concurrent.Daemonic", "object" : "tofu\/concurrent\/Daemonic$.html", "members_object" : [{"label" : "safeInstance", "tail" : "(arg0: Start[F], arg1: TryableDeferreds[F], arg2: BracketThrow[F]): Daemonic[F, Throwable]", "member" : "tofu.concurrent.Daemonic.safeInstance", "link" : "tofu\/concurrent\/Daemonic$.html#safeInstance[F[_]](implicitevidence$4:tofu.Start[F],implicitevidence$5:tofu.concurrent.TryableDeferreds[F],implicitevidence$6:tofu.BracketThrow[F]):tofu.concurrent.Daemonic[F,Throwable]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(D: Daemonic[F, E]): Daemonic[F, E]", "member" : "tofu.concurrent.Daemonic.apply", "link" : "tofu\/concurrent\/Daemonic$.html#apply[F[_],E](implicitD:tofu.concurrent.Daemonic[F,E]):tofu.concurrent.Daemonic[F,E]", "kind" : "def"}, {"label" : "nativeInstance", "tail" : "(arg0: Start[F], arg1: TryableDeferreds[F], arg2: Bracket[F, E]): Daemonic[F, E]", "member" : "tofu.concurrent.DaemonicInstances.nativeInstance", "link" : "tofu\/concurrent\/Daemonic$.html#nativeInstance[F[_],E](implicitevidence$7:tofu.Start[F],implicitevidence$8:tofu.concurrent.TryableDeferreds[F],implicitevidence$9:cats.effect.Bracket[F,E]):tofu.concurrent.Daemonic[F,E]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/Daemonic$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/Daemonic$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/Daemonic$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/Daemonic$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/Daemonic$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/Daemonic$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/Daemonic$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Daemonic$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Daemonic$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Daemonic$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/Daemonic$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/Daemonic$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/Daemonic$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/Daemonic$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/Daemonic$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/Daemonic$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/Daemonic$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/Daemonic$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/Daemonic$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/concurrent\/Daemonic.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/Daemonic.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/Daemonic.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/Daemonic.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/Daemonic.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/Daemonic.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/Daemonic.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/Daemonic.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Daemonic.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Daemonic.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Daemonic.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/Daemonic.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/Daemonic.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/Daemonic.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/Daemonic.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/Daemonic.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/Daemonic.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/Daemonic.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/Daemonic.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/Daemonic.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "daemonize", "tail" : "(process: F[A]): F[Daemon[F, E, A]]", "member" : "tofu.concurrent.Daemonic.daemonize", "link" : "tofu\/concurrent\/Daemonic.html#daemonize[A](process:F[A]):F[tofu.concurrent.Daemon[F,E,A]]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.concurrent.DaemonicInstances", "trait" : "tofu\/concurrent\/DaemonicInstances.html", "kind" : "trait", "members_trait" : [{"label" : "nativeInstance", "tail" : "(arg0: Start[F], arg1: TryableDeferreds[F], arg2: Bracket[F, E]): Daemonic[F, E]", "member" : "tofu.concurrent.DaemonicInstances.nativeInstance", "link" : "tofu\/concurrent\/DaemonicInstances.html#nativeInstance[F[_],E](implicitevidence$7:tofu.Start[F],implicitevidence$8:tofu.concurrent.TryableDeferreds[F],implicitevidence$9:cats.effect.Bracket[F,E]):tofu.concurrent.Daemonic[F,E]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/DaemonicInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/DaemonicInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/DaemonicInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/DaemonicInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/DaemonicInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/DaemonicInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/DaemonicInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/DaemonicInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/DaemonicInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/DaemonicInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/DaemonicInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/DaemonicInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/DaemonicInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/DaemonicInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/DaemonicInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/DaemonicInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/DaemonicInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/DaemonicInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/DaemonicInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "tofu.concurrent.DaemonInstances", "trait" : "tofu\/concurrent\/DaemonInstances.html", "kind" : "trait", "members_trait" : [{"label" : "daemonApplicative", "tail" : "(F: Monad[F]): Applicative[[γ$22$]Daemon[F, E, γ$22$]]", "member" : "tofu.concurrent.DaemonInstances.daemonApplicative", "link" : "tofu\/concurrent\/DaemonInstances.html#daemonApplicative[F[_],E](implicitF:cats.Monad[F]):cats.Applicative[[γ$22$]tofu.concurrent.Daemon[F,E,γ$22$]]", "kind" : "implicit final def"}, {"label" : "daemonRepresentable", "tail" : "(): RepresentableK[[α$20$[_$12]]Daemon[α$20$, E, A]]", "member" : "tofu.concurrent.DaemonInstances.daemonRepresentable", "link" : "tofu\/concurrent\/DaemonInstances.html#daemonRepresentable[E,A]:tofu.higherKind.RepresentableK[[α$20$[_$12]]tofu.concurrent.Daemon[α$20$,E,A]]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/DaemonInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/DaemonInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/DaemonInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/DaemonInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/DaemonInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/DaemonInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/DaemonInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/DaemonInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/DaemonInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/DaemonInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/DaemonInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/DaemonInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/DaemonInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/DaemonInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/DaemonInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/DaemonInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/DaemonInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/DaemonInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/DaemonInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "tofu.concurrent.Deferreds", "shortDescription" : "", "object" : "tofu\/concurrent\/Deferreds$.html", "members_object" : [{"label" : "apply", "tail" : "(make: Deferreds[F]): F[Deferred[F, A]]", "member" : "tofu.concurrent.Deferreds.apply", "link" : "tofu\/concurrent\/Deferreds$.html#apply[F[_],A](implicitmake:tofu.concurrent.Deferreds[F]):F[cats.effect.concurrent.Deferred[F,A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/Deferreds$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/Deferreds$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/Deferreds$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/Deferreds$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/Deferreds$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/Deferreds$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/Deferreds$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Deferreds$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Deferreds$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Deferreds$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/Deferreds$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/Deferreds$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/Deferreds$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/Deferreds$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/Deferreds$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/Deferreds$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/Deferreds$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/Deferreds$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/Deferreds$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.concurrent.Exit", "object" : "tofu\/concurrent\/Exit$.html", "members_object" : [{"label" : "exitInstance", "tail" : "(): Traverse[[β$2$]Exit[E, β$2$]] with Applicative[[β$3$]Exit[E, β$3$]]", "member" : "tofu.concurrent.Exit.exitInstance", "link" : "tofu\/concurrent\/Exit$.html#exitInstance[E]:cats.Traverse[[β$2$]tofu.concurrent.Exit[E,β$2$]]withcats.Applicative[[β$3$]tofu.concurrent.Exit[E,β$3$]]", "kind" : "implicit def"}, {"label" : "Completed", "tail" : "", "member" : "tofu.concurrent.Exit.Completed", "link" : "tofu\/concurrent\/Exit$.html#Completed[+A]extendsExit[Nothing,A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Error", "tail" : "", "member" : "tofu.concurrent.Exit.Error", "link" : "tofu\/concurrent\/Exit$.html#Error[+E]extendsExit.Incomplete[E]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Canceled", "tail" : "", "member" : "tofu.concurrent.Exit.Canceled", "link" : "tofu\/concurrent\/Exit$.html#Canceled", "kind" : "object"}, {"label" : "Incomplete", "tail" : "", "member" : "tofu.concurrent.Exit.Incomplete", "link" : "tofu\/concurrent\/Exit$.html#Incomplete[+E]extendsExit[E,Nothing]", "kind" : "sealed trait"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/Exit$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/Exit$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/Exit$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/Exit$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/Exit$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/Exit$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/Exit$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Exit$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Exit$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Exit$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/Exit$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/Exit$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/Exit$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/Exit$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/Exit$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/Exit$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/Exit$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/Exit$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/Exit$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/concurrent\/Exit.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/Exit.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/Exit.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/Exit.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/Exit.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/Exit.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/Exit.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/Exit.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Exit.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Exit.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Exit.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/Exit.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/Exit.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/Exit.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/Exit.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/Exit.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/Exit.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/Exit.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/Exit.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/Exit.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "exitCase", "tail" : "(): ExitCase[E]", "member" : "tofu.concurrent.Exit.exitCase", "link" : "tofu\/concurrent\/Exit.html#exitCase:cats.effect.ExitCase[E]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.concurrent.Gatekeeper", "object" : "tofu\/concurrent\/Gatekeeper$.html", "members_object" : [{"label" : "BlockedMutex", "tail" : "", "member" : "tofu.concurrent.Gatekeeper.BlockedMutex", "link" : "tofu\/concurrent\/Gatekeeper$.html#BlockedMutex[F[_]]extendsGatekeeper[F,Boolean]", "kind" : "final class"}, {"label" : "MutexBySemaphore", "tail" : "", "member" : "tofu.concurrent.Gatekeeper.MutexBySemaphore", "link" : "tofu\/concurrent\/Gatekeeper$.html#MutexBySemaphore[F[_]]extendsGatekeeper[F,Boolean]withProductwithSerializable", "kind" : "final case class"}, {"label" : "StoplightBySemaphore", "tail" : "", "member" : "tofu.concurrent.Gatekeeper.StoplightBySemaphore", "link" : "tofu\/concurrent\/Gatekeeper$.html#StoplightBySemaphore[F[_]]extendsGatekeeper[F,Long]withProductwithSerializable", "kind" : "final case class"}, {"label" : "gatekeeperApplicative", "tail" : "(arg0: Monad[F]): InvariantMonoidal[[β$0$]Gatekeeper[F, β$0$]]", "member" : "tofu.concurrent.Gatekeeper.gatekeeperApplicative", "link" : "tofu\/concurrent\/Gatekeeper$.html#gatekeeperApplicative[F[_]](implicitevidence$1:cats.Monad[F]):cats.InvariantMonoidal[[β$0$]tofu.concurrent.Gatekeeper[F,β$0$]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/Gatekeeper$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/Gatekeeper$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/Gatekeeper$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/Gatekeeper$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/Gatekeeper$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/Gatekeeper$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/Gatekeeper$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Gatekeeper$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Gatekeeper$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Gatekeeper$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/Gatekeeper$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/Gatekeeper$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/Gatekeeper$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/Gatekeeper$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/Gatekeeper$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/Gatekeeper$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/Gatekeeper$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/Gatekeeper$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/Gatekeeper$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/concurrent\/Gatekeeper.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/Gatekeeper.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/Gatekeeper.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/Gatekeeper.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/Gatekeeper.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/Gatekeeper.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/Gatekeeper.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/Gatekeeper.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Gatekeeper.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Gatekeeper.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Gatekeeper.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/Gatekeeper.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/Gatekeeper.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/Gatekeeper.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/Gatekeeper.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/Gatekeeper.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/Gatekeeper.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/Gatekeeper.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/Gatekeeper.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/Gatekeeper.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "withPermitN", "tail" : "(take: A)(t: F[B]): F[B]", "member" : "tofu.concurrent.Gatekeeper.withPermitN", "link" : "tofu\/concurrent\/Gatekeeper.html#withPermitN[B](take:A)(t:F[B]):F[B]", "kind" : "abstract def"}, {"label" : "withPermit", "tail" : "(t: F[B]): F[B]", "member" : "tofu.concurrent.Gatekeeper.withPermit", "link" : "tofu\/concurrent\/Gatekeeper.html#withPermit[B](t:F[B]):F[B]", "kind" : "abstract def"}, {"label" : "taken", "tail" : "(): F[A]", "member" : "tofu.concurrent.Gatekeeper.taken", "link" : "tofu\/concurrent\/Gatekeeper.html#taken:F[A]", "kind" : "abstract def"}, {"label" : "available", "tail" : "(): F[A]", "member" : "tofu.concurrent.Gatekeeper.available", "link" : "tofu\/concurrent\/Gatekeeper.html#available:F[A]", "kind" : "abstract def"}], "shortDescription" : "Semaphore-like structure"}, {"name" : "tofu.concurrent.MakeAgent", "object" : "tofu\/concurrent\/MakeAgent$.html", "members_object" : [{"label" : "byRefAndSemaphore", "tail" : "(arg0: FlatMap[I], arg1: Monad[F], arg2: Fire[F], refs: MakeRef[I, F], sems: MakeSemaphore[I, F]): MakeAgent[I, F]", "member" : "tofu.concurrent.MakeAgent.byRefAndSemaphore", "link" : "tofu\/concurrent\/MakeAgent$.html#byRefAndSemaphore[I[_],F[_]](implicitevidence$3:cats.FlatMap[I],implicitevidence$4:cats.Monad[F],implicitevidence$5:tofu.Fire[F],implicitrefs:tofu.concurrent.MakeRef[I,F],implicitsems:tofu.concurrent.MakeSemaphore[I,F]):tofu.concurrent.MakeAgent[I,F]", "kind" : "implicit def"}, {"label" : "Applier", "tail" : "", "member" : "tofu.concurrent.MakeAgent.Applier", "link" : "tofu\/concurrent\/MakeAgent$.html#Applier[I[_],F[_]]extendsAnyVal", "kind" : "final class"}, {"label" : "apply", "tail" : "(mkAgent: MakeAgent[I, F]): Applier[I, F]", "member" : "tofu.concurrent.MakeAgent.apply", "link" : "tofu\/concurrent\/MakeAgent$.html#apply[I[_],F[_]](implicitmkAgent:tofu.concurrent.MakeAgent[I,F]):tofu.concurrent.MakeAgent.Applier[I,F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/MakeAgent$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/MakeAgent$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/MakeAgent$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/MakeAgent$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/MakeAgent$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/MakeAgent$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/MakeAgent$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeAgent$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeAgent$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeAgent$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/MakeAgent$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/MakeAgent$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/MakeAgent$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/MakeAgent$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/MakeAgent$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/MakeAgent$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/MakeAgent$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/MakeAgent$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/MakeAgent$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/concurrent\/MakeAgent.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/MakeAgent.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/MakeAgent.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/MakeAgent.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/MakeAgent.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/MakeAgent.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/MakeAgent.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/MakeAgent.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeAgent.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeAgent.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeAgent.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/MakeAgent.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/MakeAgent.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/MakeAgent.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/MakeAgent.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/MakeAgent.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/MakeAgent.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/MakeAgent.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/MakeAgent.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/MakeAgent.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "agentOf", "tail" : "(a: A): I[Agent[F, A]]", "member" : "tofu.concurrent.MakeAgent.agentOf", "link" : "tofu\/concurrent\/MakeAgent.html#agentOf[A](a:A):I[tofu.concurrent.Agent[F,A]]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.concurrent.MakeAllConcurrent", "trait" : "tofu\/concurrent\/MakeAllConcurrent.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/MakeAllConcurrent.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/MakeAllConcurrent.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/MakeAllConcurrent.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/MakeAllConcurrent.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/MakeAllConcurrent.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/MakeAllConcurrent.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/MakeAllConcurrent.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeAllConcurrent.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeAllConcurrent.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeAllConcurrent.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/MakeAllConcurrent.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/MakeAllConcurrent.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/MakeAllConcurrent.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/MakeAllConcurrent.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/MakeAllConcurrent.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/MakeAllConcurrent.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/MakeAllConcurrent.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/MakeAllConcurrent.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/MakeAllConcurrent.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "agentOf", "tail" : "(a: A): I[Agent[F, A]]", "member" : "tofu.concurrent.MakeAgent.agentOf", "link" : "tofu\/concurrent\/MakeAllConcurrent.html#agentOf[A](a:A):I[tofu.concurrent.Agent[F,A]]", "kind" : "abstract def"}, {"label" : "deferred", "tail" : "(): I[Deferred[F, A]]", "member" : "tofu.concurrent.MakeDeferred.deferred", "link" : "tofu\/concurrent\/MakeAllConcurrent.html#deferred[A]:I[cats.effect.concurrent.Deferred[F,A]]", "kind" : "abstract def"}, {"label" : "qvarEmpty", "tail" : "(): I[QVar[F, A]]", "member" : "tofu.concurrent.MakeQVar.qvarEmpty", "link" : "tofu\/concurrent\/MakeAllConcurrent.html#qvarEmpty[A]:I[tofu.concurrent.QVar[F,A]]", "kind" : "abstract def"}, {"label" : "qvarOf", "tail" : "(a: A): I[QVar[F, A]]", "member" : "tofu.concurrent.MakeQVar.qvarOf", "link" : "tofu\/concurrent\/MakeAllConcurrent.html#qvarOf[A](a:A):I[tofu.concurrent.QVar[F,A]]", "kind" : "abstract def"}, {"label" : "gatekeeper", "tail" : "(available: Long): I[Gatekeeper[F, Long]]", "member" : "tofu.concurrent.MakeGatekeeper.gatekeeper", "link" : "tofu\/concurrent\/MakeAllConcurrent.html#gatekeeper(available:A):I[tofu.concurrent.Gatekeeper[F,A]]", "kind" : "abstract def"}, {"label" : "atom", "tail" : "(a: A): I[Atom[F, A]]", "member" : "tofu.concurrent.MakeAtom.atom", "link" : "tofu\/concurrent\/MakeAllConcurrent.html#atom[A](a:A):I[tofu.concurrent.Atom[F,A]]", "kind" : "abstract def"}, {"label" : "semaphore", "tail" : "(count: Long): I[Semaphore[F]]", "member" : "tofu.concurrent.MakeSemaphore.semaphore", "link" : "tofu\/concurrent\/MakeAllConcurrent.html#semaphore(count:Long):I[cats.effect.concurrent.Semaphore[F]]", "kind" : "abstract def"}, {"label" : "mvarEmpty", "tail" : "(): I[MVar[F, A]]", "member" : "tofu.concurrent.MakeMVar.mvarEmpty", "link" : "tofu\/concurrent\/MakeAllConcurrent.html#mvarEmpty[A]:I[cats.effect.concurrent.MVar[F,A]]", "kind" : "abstract def"}, {"label" : "mvarOf", "tail" : "(a: A): I[MVar[F, A]]", "member" : "tofu.concurrent.MakeMVar.mvarOf", "link" : "tofu\/concurrent\/MakeAllConcurrent.html#mvarOf[A](a:A):I[cats.effect.concurrent.MVar[F,A]]", "kind" : "abstract def"}, {"label" : "refOf", "tail" : "(a: A): I[Ref[F, A]]", "member" : "tofu.concurrent.MakeRef.refOf", "link" : "tofu\/concurrent\/MakeAllConcurrent.html#refOf[A](a:A):I[cats.effect.concurrent.Ref[F,A]]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.concurrent.MakeAtom", "object" : "tofu\/concurrent\/MakeAtom$.html", "members_object" : [{"label" : "syncInstance", "tail" : "(arg0: Sync[I], arg1: Sync[F]): MakeAtom[I, F]", "member" : "tofu.concurrent.MakeAtom.syncInstance", "link" : "tofu\/concurrent\/MakeAtom$.html#syncInstance[I[_],F[_]](implicitevidence$4:cats.effect.Sync[I],implicitevidence$5:cats.effect.Sync[F]):tofu.concurrent.MakeAtom[I,F]", "kind" : "implicit def"}, {"label" : "Applier", "tail" : "", "member" : "tofu.concurrent.MakeAtom.Applier", "link" : "tofu\/concurrent\/MakeAtom$.html#Applier[I[_],F[_]]extendsAnyVal", "kind" : "final class"}, {"label" : "apply", "tail" : "(makeAtom: MakeAtom[I, F]): Applier[I, F]", "member" : "tofu.concurrent.MakeAtom.apply", "link" : "tofu\/concurrent\/MakeAtom$.html#apply[I[_],F[_]](implicitmakeAtom:tofu.concurrent.MakeAtom[I,F]):tofu.concurrent.MakeAtom.Applier[I,F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/MakeAtom$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/MakeAtom$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/MakeAtom$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/MakeAtom$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/MakeAtom$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/MakeAtom$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/MakeAtom$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeAtom$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeAtom$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeAtom$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/MakeAtom$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/MakeAtom$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/MakeAtom$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/MakeAtom$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/MakeAtom$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/MakeAtom$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/MakeAtom$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/MakeAtom$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/MakeAtom$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/concurrent\/MakeAtom.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/MakeAtom.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/MakeAtom.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/MakeAtom.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/MakeAtom.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/MakeAtom.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/MakeAtom.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/MakeAtom.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeAtom.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeAtom.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeAtom.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/MakeAtom.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/MakeAtom.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/MakeAtom.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/MakeAtom.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/MakeAtom.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/MakeAtom.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/MakeAtom.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/MakeAtom.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/MakeAtom.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "atom", "tail" : "(a: A): I[Atom[F, A]]", "member" : "tofu.concurrent.MakeAtom.atom", "link" : "tofu\/concurrent\/MakeAtom.html#atom[A](a:A):I[tofu.concurrent.Atom[F,A]]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.concurrent.MakeConcurrent", "trait" : "tofu\/concurrent\/MakeConcurrent.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/MakeConcurrent.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/MakeConcurrent.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/MakeConcurrent.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/MakeConcurrent.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/MakeConcurrent.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/MakeConcurrent.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/MakeConcurrent.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeConcurrent.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeConcurrent.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeConcurrent.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/MakeConcurrent.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/MakeConcurrent.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/MakeConcurrent.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/MakeConcurrent.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/MakeConcurrent.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/MakeConcurrent.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/MakeConcurrent.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/MakeConcurrent.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/MakeConcurrent.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "agentOf", "tail" : "(a: A): I[Agent[F, A]]", "member" : "tofu.concurrent.MakeAgent.agentOf", "link" : "tofu\/concurrent\/MakeConcurrent.html#agentOf[A](a:A):I[tofu.concurrent.Agent[F,A]]", "kind" : "abstract def"}, {"label" : "deferred", "tail" : "(): I[Deferred[F, A]]", "member" : "tofu.concurrent.MakeDeferred.deferred", "link" : "tofu\/concurrent\/MakeConcurrent.html#deferred[A]:I[cats.effect.concurrent.Deferred[F,A]]", "kind" : "abstract def"}, {"label" : "qvarEmpty", "tail" : "(): I[QVar[F, A]]", "member" : "tofu.concurrent.MakeQVar.qvarEmpty", "link" : "tofu\/concurrent\/MakeConcurrent.html#qvarEmpty[A]:I[tofu.concurrent.QVar[F,A]]", "kind" : "abstract def"}, {"label" : "qvarOf", "tail" : "(a: A): I[QVar[F, A]]", "member" : "tofu.concurrent.MakeQVar.qvarOf", "link" : "tofu\/concurrent\/MakeConcurrent.html#qvarOf[A](a:A):I[tofu.concurrent.QVar[F,A]]", "kind" : "abstract def"}, {"label" : "gatekeeper", "tail" : "(available: Long): I[Gatekeeper[F, Long]]", "member" : "tofu.concurrent.MakeGatekeeper.gatekeeper", "link" : "tofu\/concurrent\/MakeConcurrent.html#gatekeeper(available:A):I[tofu.concurrent.Gatekeeper[F,A]]", "kind" : "abstract def"}, {"label" : "atom", "tail" : "(a: A): I[Atom[F, A]]", "member" : "tofu.concurrent.MakeAtom.atom", "link" : "tofu\/concurrent\/MakeConcurrent.html#atom[A](a:A):I[tofu.concurrent.Atom[F,A]]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.concurrent.MakeDeferred", "object" : "tofu\/concurrent\/MakeDeferred$.html", "members_object" : [{"label" : "concurrentTryableDeferreds", "tail" : "(arg0: Concurrent[F]): TryableDeferreds[F]", "member" : "tofu.concurrent.MakeDeferred.concurrentTryableDeferreds", "link" : "tofu\/concurrent\/MakeDeferred$.html#concurrentTryableDeferreds[F[_]](implicitevidence$1:cats.effect.Concurrent[F]):tofu.concurrent.TryableDeferreds[F]", "kind" : "implicit def"}, {"label" : "tryable", "tail" : "(make: TryableDeferreds[F]): F[TryableDeferred[F, A]]", "member" : "tofu.concurrent.MakeDeferred.tryable", "link" : "tofu\/concurrent\/MakeDeferred$.html#tryable[F[_],A](implicitmake:tofu.concurrent.TryableDeferreds[F]):F[cats.effect.concurrent.TryableDeferred[F,A]]", "kind" : "def"}, {"label" : "apply", "tail" : "(make: MakeDeferred[I, F]): I[Deferred[F, A]]", "member" : "tofu.concurrent.MakeDeferred.apply", "link" : "tofu\/concurrent\/MakeDeferred$.html#apply[I[_],F[_],A](implicitmake:tofu.concurrent.MakeDeferred[I,F]):I[cats.effect.concurrent.Deferred[F,A]]", "kind" : "def"}, {"label" : "concurrentMakeDeferred", "tail" : "(arg0: Sync[I], arg1: Concurrent[F]): MakeDeferred[I, F]", "member" : "tofu.concurrent.PolymorphicMakeDefferedInstance.concurrentMakeDeferred", "link" : "tofu\/concurrent\/MakeDeferred$.html#concurrentMakeDeferred[I[_],F[_]](implicitevidence$2:cats.effect.Sync[I],implicitevidence$3:cats.effect.Concurrent[F]):tofu.concurrent.MakeDeferred[I,F]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/MakeDeferred$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/MakeDeferred$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/MakeDeferred$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/MakeDeferred$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/MakeDeferred$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/MakeDeferred$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/MakeDeferred$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeDeferred$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeDeferred$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeDeferred$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/MakeDeferred$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/MakeDeferred$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/MakeDeferred$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/MakeDeferred$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/MakeDeferred$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/MakeDeferred$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/MakeDeferred$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/MakeDeferred$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/MakeDeferred$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/concurrent\/MakeDeferred.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/MakeDeferred.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/MakeDeferred.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/MakeDeferred.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/MakeDeferred.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/MakeDeferred.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/MakeDeferred.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/MakeDeferred.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeDeferred.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeDeferred.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeDeferred.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/MakeDeferred.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/MakeDeferred.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/MakeDeferred.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/MakeDeferred.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/MakeDeferred.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/MakeDeferred.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/MakeDeferred.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/MakeDeferred.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/MakeDeferred.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "deferred", "tail" : "(): I[Deferred[F, A]]", "member" : "tofu.concurrent.MakeDeferred.deferred", "link" : "tofu\/concurrent\/MakeDeferred.html#deferred[A]:I[cats.effect.concurrent.Deferred[F,A]]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.concurrent.MakeGatekeeper", "object" : "tofu\/concurrent\/MakeGatekeeper$.html", "members_object" : [{"label" : "concurrentMutex", "tail" : "(arg0: Sync[I], arg1: Concurrent[F]): MakeMutex[I, F]", "member" : "tofu.concurrent.MakeGatekeeper.concurrentMutex", "link" : "tofu\/concurrent\/MakeGatekeeper$.html#concurrentMutex[I[_],F[_]](implicitevidence$7:cats.effect.Sync[I],implicitevidence$8:cats.effect.Concurrent[F]):tofu.concurrent.MakeMutex[I,F]", "kind" : "implicit def"}, {"label" : "concurrentStoplight", "tail" : "(arg0: Sync[I], arg1: Concurrent[F]): MakeStoplight[I, F]", "member" : "tofu.concurrent.MakeGatekeeper.concurrentStoplight", "link" : "tofu\/concurrent\/MakeGatekeeper$.html#concurrentStoplight[I[_],F[_]](implicitevidence$5:cats.effect.Sync[I],implicitevidence$6:cats.effect.Concurrent[F]):tofu.concurrent.MakeStoplight[I,F]", "kind" : "implicit def"}, {"label" : "Maker", "tail" : "", "member" : "tofu.concurrent.MakeGatekeeper.Maker", "link" : "tofu\/concurrent\/MakeGatekeeper$.html#Maker[I[_],F[_],A]extendsAnyVal", "kind" : "final class"}, {"label" : "Applier", "tail" : "", "member" : "tofu.concurrent.MakeGatekeeper.Applier", "link" : "tofu\/concurrent\/MakeGatekeeper$.html#Applier[I[_],F[_]]extendsAnyVal", "kind" : "final class"}, {"label" : "mk", "tail" : "(maker: MakeGatekeeper[I, F, A]): Maker[I, F, A]", "member" : "tofu.concurrent.MakeGatekeeper.mk", "link" : "tofu\/concurrent\/MakeGatekeeper$.html#mk[I[_],F[_],A](implicitmaker:tofu.concurrent.MakeGatekeeper[I,F,A]):tofu.concurrent.MakeGatekeeper.Maker[I,F,A]", "kind" : "def"}, {"label" : "apply", "tail" : "(): Applier[I, F]", "member" : "tofu.concurrent.MakeGatekeeper.apply", "link" : "tofu\/concurrent\/MakeGatekeeper$.html#apply[I[_],F[_]]:tofu.concurrent.MakeGatekeeper.Applier[I,F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/MakeGatekeeper$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/MakeGatekeeper$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/MakeGatekeeper$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/MakeGatekeeper$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/MakeGatekeeper$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/MakeGatekeeper$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/MakeGatekeeper$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeGatekeeper$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeGatekeeper$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeGatekeeper$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/MakeGatekeeper$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/MakeGatekeeper$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/MakeGatekeeper$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/MakeGatekeeper$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/MakeGatekeeper$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/MakeGatekeeper$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/MakeGatekeeper$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/MakeGatekeeper$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/MakeGatekeeper$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/concurrent\/MakeGatekeeper.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/MakeGatekeeper.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/MakeGatekeeper.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/MakeGatekeeper.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/MakeGatekeeper.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/MakeGatekeeper.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/MakeGatekeeper.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/MakeGatekeeper.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeGatekeeper.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeGatekeeper.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeGatekeeper.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/MakeGatekeeper.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/MakeGatekeeper.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/MakeGatekeeper.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/MakeGatekeeper.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/MakeGatekeeper.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/MakeGatekeeper.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/MakeGatekeeper.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/MakeGatekeeper.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/MakeGatekeeper.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "gatekeeper", "tail" : "(available: A): I[Gatekeeper[F, A]]", "member" : "tofu.concurrent.MakeGatekeeper.gatekeeper", "link" : "tofu\/concurrent\/MakeGatekeeper.html#gatekeeper(available:A):I[tofu.concurrent.Gatekeeper[F,A]]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.concurrent.MakeMutex", "shortDescription" : "", "object" : "tofu\/concurrent\/MakeMutex$.html", "members_object" : [{"label" : "apply", "tail" : "(maker: MakeMutex[I, F]): Maker[I, F, Boolean]", "member" : "tofu.concurrent.MakeMutex.apply", "link" : "tofu\/concurrent\/MakeMutex$.html#apply[I[_],F[_]](implicitmaker:tofu.concurrent.MakeMutex[I,F]):tofu.concurrent.MakeGatekeeper.Maker[I,F,Boolean]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/MakeMutex$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/MakeMutex$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/MakeMutex$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/MakeMutex$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/MakeMutex$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/MakeMutex$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/MakeMutex$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeMutex$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeMutex$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeMutex$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/MakeMutex$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/MakeMutex$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/MakeMutex$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/MakeMutex$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/MakeMutex$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/MakeMutex$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/MakeMutex$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/MakeMutex$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/MakeMutex$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.concurrent.MakeMVar", "object" : "tofu\/concurrent\/MakeMVar$.html", "members_object" : [{"label" : "concurrentMakeMVar", "tail" : "(arg0: Sync[I], arg1: Concurrent[F]): MakeMVar[I, F]", "member" : "tofu.concurrent.MakeMVar.concurrentMakeMVar", "link" : "tofu\/concurrent\/MakeMVar$.html#concurrentMakeMVar[I[_],F[_]](implicitevidence$1:cats.effect.Sync[I],implicitevidence$2:cats.effect.Concurrent[F]):tofu.concurrent.MakeMVar[I,F]", "kind" : "implicit def"}, {"label" : "Applier", "tail" : "", "member" : "tofu.concurrent.MakeMVar.Applier", "link" : "tofu\/concurrent\/MakeMVar$.html#Applier[I[_],F[_]]extendsAnyVal", "kind" : "final class"}, {"label" : "apply", "tail" : "(mkvar: MakeMVar[I, F]): Applier[I, F]", "member" : "tofu.concurrent.MakeMVar.apply", "link" : "tofu\/concurrent\/MakeMVar$.html#apply[I[_],F[_]](implicitmkvar:tofu.concurrent.MakeMVar[I,F]):tofu.concurrent.MakeMVar.Applier[I,F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/MakeMVar$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/MakeMVar$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/MakeMVar$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/MakeMVar$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/MakeMVar$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/MakeMVar$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/MakeMVar$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeMVar$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeMVar$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeMVar$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/MakeMVar$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/MakeMVar$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/MakeMVar$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/MakeMVar$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/MakeMVar$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/MakeMVar$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/MakeMVar$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/MakeMVar$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/MakeMVar$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/concurrent\/MakeMVar.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/MakeMVar.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/MakeMVar.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/MakeMVar.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/MakeMVar.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/MakeMVar.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/MakeMVar.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/MakeMVar.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeMVar.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeMVar.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeMVar.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/MakeMVar.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/MakeMVar.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/MakeMVar.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/MakeMVar.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/MakeMVar.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/MakeMVar.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/MakeMVar.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/MakeMVar.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/MakeMVar.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "mvarEmpty", "tail" : "(): I[MVar[F, A]]", "member" : "tofu.concurrent.MakeMVar.mvarEmpty", "link" : "tofu\/concurrent\/MakeMVar.html#mvarEmpty[A]:I[cats.effect.concurrent.MVar[F,A]]", "kind" : "abstract def"}, {"label" : "mvarOf", "tail" : "(a: A): I[MVar[F, A]]", "member" : "tofu.concurrent.MakeMVar.mvarOf", "link" : "tofu\/concurrent\/MakeMVar.html#mvarOf[A](a:A):I[cats.effect.concurrent.MVar[F,A]]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.concurrent.MakeQVar", "object" : "tofu\/concurrent\/MakeQVar$.html", "members_object" : [{"label" : "concurrentMakeMVar", "tail" : "(arg0: Sync[I], arg1: Concurrent[F]): MakeQVar[I, F]", "member" : "tofu.concurrent.MakeQVar.concurrentMakeMVar", "link" : "tofu\/concurrent\/MakeQVar$.html#concurrentMakeMVar[I[_],F[_]](implicitevidence$1:cats.effect.Sync[I],implicitevidence$2:cats.effect.Concurrent[F]):tofu.concurrent.MakeQVar[I,F]", "kind" : "implicit def"}, {"label" : "Applier", "tail" : "", "member" : "tofu.concurrent.MakeQVar.Applier", "link" : "tofu\/concurrent\/MakeQVar$.html#Applier[I[_],F[_]]extendsAnyVal", "kind" : "final class"}, {"label" : "apply", "tail" : "(mkvar: MakeQVar[I, F]): Applier[I, F]", "member" : "tofu.concurrent.MakeQVar.apply", "link" : "tofu\/concurrent\/MakeQVar$.html#apply[I[_],F[_]](implicitmkvar:tofu.concurrent.MakeQVar[I,F]):tofu.concurrent.MakeQVar.Applier[I,F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/MakeQVar$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/MakeQVar$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/MakeQVar$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/MakeQVar$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/MakeQVar$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/MakeQVar$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/MakeQVar$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeQVar$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeQVar$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeQVar$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/MakeQVar$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/MakeQVar$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/MakeQVar$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/MakeQVar$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/MakeQVar$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/MakeQVar$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/MakeQVar$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/MakeQVar$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/MakeQVar$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/concurrent\/MakeQVar.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/MakeQVar.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/MakeQVar.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/MakeQVar.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/MakeQVar.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/MakeQVar.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/MakeQVar.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/MakeQVar.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeQVar.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeQVar.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeQVar.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/MakeQVar.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/MakeQVar.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/MakeQVar.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/MakeQVar.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/MakeQVar.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/MakeQVar.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/MakeQVar.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/MakeQVar.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/MakeQVar.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "qvarEmpty", "tail" : "(): I[QVar[F, A]]", "member" : "tofu.concurrent.MakeQVar.qvarEmpty", "link" : "tofu\/concurrent\/MakeQVar.html#qvarEmpty[A]:I[tofu.concurrent.QVar[F,A]]", "kind" : "abstract def"}, {"label" : "qvarOf", "tail" : "(a: A): I[QVar[F, A]]", "member" : "tofu.concurrent.MakeQVar.qvarOf", "link" : "tofu\/concurrent\/MakeQVar.html#qvarOf[A](a:A):I[tofu.concurrent.QVar[F,A]]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.concurrent.MakeRef", "object" : "tofu\/concurrent\/MakeRef$.html", "members_object" : [{"label" : "syncInstance", "tail" : "(arg0: Sync[I], arg1: Sync[F]): MakeRef[I, F]", "member" : "tofu.concurrent.MakeRef.syncInstance", "link" : "tofu\/concurrent\/MakeRef$.html#syncInstance[I[_],F[_]](implicitevidence$1:cats.effect.Sync[I],implicitevidence$2:cats.effect.Sync[F]):tofu.concurrent.MakeRef[I,F]", "kind" : "implicit def"}, {"label" : "Applier", "tail" : "", "member" : "tofu.concurrent.MakeRef.Applier", "link" : "tofu\/concurrent\/MakeRef$.html#Applier[I[_],F[_]]extendsAnyVal", "kind" : "final class"}, {"label" : "apply", "tail" : "(makeRef: MakeRef[I, F]): Applier[I, F]", "member" : "tofu.concurrent.MakeRef.apply", "link" : "tofu\/concurrent\/MakeRef$.html#apply[I[_],F[_]](implicitmakeRef:tofu.concurrent.MakeRef[I,F]):tofu.concurrent.MakeRef.Applier[I,F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/MakeRef$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/MakeRef$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/MakeRef$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/MakeRef$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/MakeRef$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/MakeRef$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/MakeRef$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeRef$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeRef$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeRef$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/MakeRef$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/MakeRef$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/MakeRef$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/MakeRef$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/MakeRef$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/MakeRef$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/MakeRef$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/MakeRef$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/MakeRef$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/concurrent\/MakeRef.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/MakeRef.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/MakeRef.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/MakeRef.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/MakeRef.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/MakeRef.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/MakeRef.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/MakeRef.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeRef.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeRef.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeRef.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/MakeRef.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/MakeRef.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/MakeRef.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/MakeRef.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/MakeRef.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/MakeRef.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/MakeRef.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/MakeRef.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/MakeRef.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "refOf", "tail" : "(a: A): I[Ref[F, A]]", "member" : "tofu.concurrent.MakeRef.refOf", "link" : "tofu\/concurrent\/MakeRef.html#refOf[A](a:A):I[cats.effect.concurrent.Ref[F,A]]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.concurrent.MakeSemaphore", "object" : "tofu\/concurrent\/MakeSemaphore$.html", "members_object" : [{"label" : "concurrentSemaphore", "tail" : "(arg0: Sync[I], arg1: Concurrent[F]): MakeSemaphore[I, F]", "member" : "tofu.concurrent.MakeSemaphore.concurrentSemaphore", "link" : "tofu\/concurrent\/MakeSemaphore$.html#concurrentSemaphore[I[_],F[_]](implicitevidence$1:cats.effect.Sync[I],implicitevidence$2:cats.effect.Concurrent[F]):tofu.concurrent.MakeSemaphore[I,F]", "kind" : "implicit def"}, {"label" : "Applier", "tail" : "", "member" : "tofu.concurrent.MakeSemaphore.Applier", "link" : "tofu\/concurrent\/MakeSemaphore$.html#Applier[I[_],F[_]]extendsAnyVal", "kind" : "final class"}, {"label" : "apply", "tail" : "(mksem: MakeSemaphore[I, F]): Applier[I, F]", "member" : "tofu.concurrent.MakeSemaphore.apply", "link" : "tofu\/concurrent\/MakeSemaphore$.html#apply[I[_],F[_]](implicitmksem:tofu.concurrent.MakeSemaphore[I,F]):tofu.concurrent.MakeSemaphore.Applier[I,F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/MakeSemaphore$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/MakeSemaphore$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/MakeSemaphore$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/MakeSemaphore$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/MakeSemaphore$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/MakeSemaphore$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/MakeSemaphore$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeSemaphore$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeSemaphore$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeSemaphore$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/MakeSemaphore$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/MakeSemaphore$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/MakeSemaphore$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/MakeSemaphore$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/MakeSemaphore$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/MakeSemaphore$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/MakeSemaphore$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/MakeSemaphore$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/MakeSemaphore$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/concurrent\/MakeSemaphore.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/MakeSemaphore.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/MakeSemaphore.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/MakeSemaphore.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/MakeSemaphore.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/MakeSemaphore.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/MakeSemaphore.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/MakeSemaphore.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeSemaphore.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeSemaphore.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeSemaphore.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/MakeSemaphore.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/MakeSemaphore.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/MakeSemaphore.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/MakeSemaphore.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/MakeSemaphore.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/MakeSemaphore.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/MakeSemaphore.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/MakeSemaphore.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/MakeSemaphore.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "semaphore", "tail" : "(count: Long): I[Semaphore[F]]", "member" : "tofu.concurrent.MakeSemaphore.semaphore", "link" : "tofu\/concurrent\/MakeSemaphore.html#semaphore(count:Long):I[cats.effect.concurrent.Semaphore[F]]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.concurrent.MakeStoplight", "shortDescription" : "", "object" : "tofu\/concurrent\/MakeStoplight$.html", "members_object" : [{"label" : "apply", "tail" : "(maker: MakeStoplight[I, F]): Maker[I, F, Long]", "member" : "tofu.concurrent.MakeStoplight.apply", "link" : "tofu\/concurrent\/MakeStoplight$.html#apply[I[_],F[_]](implicitmaker:tofu.concurrent.MakeStoplight[I,F]):tofu.concurrent.MakeGatekeeper.Maker[I,F,Long]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/MakeStoplight$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/MakeStoplight$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/MakeStoplight$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/MakeStoplight$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/MakeStoplight$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/MakeStoplight$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/MakeStoplight$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeStoplight$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeStoplight$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MakeStoplight$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/MakeStoplight$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/MakeStoplight$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/MakeStoplight$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/MakeStoplight$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/MakeStoplight$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/MakeStoplight$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/MakeStoplight$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/MakeStoplight$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/MakeStoplight$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.concurrent.Mut", "object" : "tofu\/concurrent\/Mut$.html", "members_object" : [{"label" : "mvar", "tail" : "(mvar: MVar[F, A])(bracket: Bracket[F, E]): Mut[F, A]", "member" : "tofu.concurrent.Mut.mvar", "link" : "tofu\/concurrent\/Mut$.html#mvar[F[_],E,A](mvar:cats.effect.concurrent.MVar[F,A])(implicitbracket:cats.effect.Bracket[F,E]):tofu.concurrent.Mut[F,A]", "kind" : "def"}, {"label" : "ref", "tail" : "(ref: Ref[F, A]): Mut[F, A]", "member" : "tofu.concurrent.Mut.ref", "link" : "tofu\/concurrent\/Mut$.html#ref[F[_],A](ref:cats.effect.concurrent.Ref[F,A]):tofu.concurrent.Mut[F,A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/Mut$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/Mut$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/Mut$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/Mut$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/Mut$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/Mut$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/Mut$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Mut$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Mut$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Mut$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/Mut$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/Mut$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/Mut$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/Mut$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/Mut$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/Mut$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/Mut$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/Mut$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/Mut$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/concurrent\/Mut.html", "kind" : "trait", "members_trait" : [{"label" : "focused", "tail" : "(focus: Contains[A, B], F: Functor[F]): Mut[F, B]", "member" : "tofu.concurrent.Mut.focused", "link" : "tofu\/concurrent\/Mut.html#focused[B](implicitfocus:tofu.optics.Contains[A,B],implicitF:cats.Functor[F]):tofu.concurrent.Mut[F,B]", "kind" : "def"}, {"label" : "set", "tail" : "(a: A): F[Unit]", "member" : "tofu.concurrent.Mut.set", "link" : "tofu\/concurrent\/Mut.html#set(a:A):F[Unit]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/Mut.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/Mut.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/Mut.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/Mut.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/Mut.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/Mut.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/Mut.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Mut.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Mut.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Mut.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/Mut.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/Mut.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/Mut.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/Mut.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/Mut.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/Mut.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/Mut.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/Mut.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/Mut.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "update", "tail" : "(f: (A) => A): F[Unit]", "member" : "tofu.concurrent.Mut.update", "link" : "tofu\/concurrent\/Mut.html#update(f:A=>A):F[Unit]", "kind" : "abstract def"}, {"label" : "get", "tail" : "(): F[A]", "member" : "tofu.concurrent.Mut.get", "link" : "tofu\/concurrent\/Mut.html#get:F[A]", "kind" : "abstract def"}], "shortDescription" : "simplified form of synchonized mutable variable, that could be satisfied both by MVar and Ref"}, {"name" : "tofu.concurrent.Mutexes", "shortDescription" : "", "object" : "tofu\/concurrent\/Mutexes$.html", "members_object" : [{"label" : "apply", "tail" : "(mutexes: Mutexes[F]): Maker[F, F, Boolean]", "member" : "tofu.concurrent.Mutexes.apply", "link" : "tofu\/concurrent\/Mutexes$.html#apply[F[_]](implicitmutexes:tofu.concurrent.Mutexes[F]):tofu.concurrent.MakeGatekeeper.Maker[F,F,Boolean]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/Mutexes$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/Mutexes$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/Mutexes$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/Mutexes$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/Mutexes$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/Mutexes$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/Mutexes$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Mutexes$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Mutexes$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Mutexes$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/Mutexes$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/Mutexes$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/Mutexes$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/Mutexes$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/Mutexes$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/Mutexes$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/Mutexes$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/Mutexes$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/Mutexes$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.concurrent.MVars", "shortDescription" : "", "object" : "tofu\/concurrent\/MVars$.html", "members_object" : [{"label" : "apply", "tail" : "(agents: MVars[F]): Applier[F, F]", "member" : "tofu.concurrent.MVars.apply", "link" : "tofu\/concurrent\/MVars$.html#apply[F[_]](implicitagents:tofu.concurrent.MVars[F]):tofu.concurrent.MakeMVar.Applier[F,F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/MVars$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/MVars$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/MVars$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/MVars$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/MVars$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/MVars$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/MVars$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MVars$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MVars$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/MVars$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/MVars$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/MVars$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/MVars$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/MVars$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/MVars$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/MVars$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/MVars$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/MVars$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/MVars$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.concurrent.PolymorphicMakeDefferedInstance", "trait" : "tofu\/concurrent\/PolymorphicMakeDefferedInstance.html", "kind" : "trait", "members_trait" : [{"label" : "concurrentMakeDeferred", "tail" : "(arg0: Sync[I], arg1: Concurrent[F]): MakeDeferred[I, F]", "member" : "tofu.concurrent.PolymorphicMakeDefferedInstance.concurrentMakeDeferred", "link" : "tofu\/concurrent\/PolymorphicMakeDefferedInstance.html#concurrentMakeDeferred[I[_],F[_]](implicitevidence$2:cats.effect.Sync[I],implicitevidence$3:cats.effect.Concurrent[F]):tofu.concurrent.MakeDeferred[I,F]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/PolymorphicMakeDefferedInstance.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/PolymorphicMakeDefferedInstance.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/PolymorphicMakeDefferedInstance.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/PolymorphicMakeDefferedInstance.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/PolymorphicMakeDefferedInstance.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/PolymorphicMakeDefferedInstance.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/PolymorphicMakeDefferedInstance.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/PolymorphicMakeDefferedInstance.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/PolymorphicMakeDefferedInstance.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/PolymorphicMakeDefferedInstance.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/PolymorphicMakeDefferedInstance.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/PolymorphicMakeDefferedInstance.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/PolymorphicMakeDefferedInstance.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/PolymorphicMakeDefferedInstance.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/PolymorphicMakeDefferedInstance.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/PolymorphicMakeDefferedInstance.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/PolymorphicMakeDefferedInstance.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/PolymorphicMakeDefferedInstance.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/PolymorphicMakeDefferedInstance.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "tofu.concurrent.QVar", "object" : "tofu\/concurrent\/QVar$.html", "members_object" : [{"label" : "QVarByMVar", "tail" : "", "member" : "tofu.concurrent.QVar.QVarByMVar", "link" : "tofu\/concurrent\/QVar$.html#QVarByMVar[F[_],A]extendsQVar[F,A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "QVarOps", "tail" : "", "member" : "tofu.concurrent.QVar.QVarOps", "link" : "tofu\/concurrent\/QVar$.html#QVarOps[F[_],A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "representableK", "tail" : "(): RepresentableK[[α$0$[_$1]]QVar[α$0$, A]]", "member" : "tofu.concurrent.QVar.representableK", "link" : "tofu\/concurrent\/QVar$.html#representableK[A]:tofu.higherKind.RepresentableK[[α$0$[_$1]]tofu.concurrent.QVar[α$0$,A]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/QVar$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/QVar$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/QVar$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/QVar$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/QVar$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/QVar$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/QVar$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/QVar$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/QVar$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/QVar$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/QVar$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/QVar$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/QVar$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/QVar$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/QVar$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/QVar$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/QVar$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/QVar$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/QVar$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/concurrent\/QVar.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/QVar.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/QVar.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/QVar.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/QVar.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/QVar.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/QVar.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/QVar.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/QVar.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/QVar.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/QVar.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/QVar.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/QVar.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/QVar.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/QVar.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/QVar.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/QVar.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/QVar.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/QVar.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/QVar.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "read", "tail" : "(): F[A]", "member" : "tofu.concurrent.QVar.read", "link" : "tofu\/concurrent\/QVar.html#read:F[A]", "kind" : "abstract def"}, {"label" : "take", "tail" : "(): F[A]", "member" : "tofu.concurrent.QVar.take", "link" : "tofu\/concurrent\/QVar.html#take:F[A]", "kind" : "abstract def"}, {"label" : "put", "tail" : "(a: A): F[Unit]", "member" : "tofu.concurrent.QVar.put", "link" : "tofu\/concurrent\/QVar.html#put(a:A):F[Unit]", "kind" : "abstract def"}, {"label" : "isEmpty", "tail" : "(): F[Boolean]", "member" : "tofu.concurrent.QVar.isEmpty", "link" : "tofu\/concurrent\/QVar.html#isEmpty:F[Boolean]", "kind" : "abstract def"}], "shortDescription" : "a middleground between cats.concurrent.MVar and zio.Queue.bounded(1)"}, {"name" : "tofu.concurrent.QVars", "shortDescription" : "", "object" : "tofu\/concurrent\/QVars$.html", "members_object" : [{"label" : "apply", "tail" : "(qvars: QVars[F]): Applier[F, F]", "member" : "tofu.concurrent.QVars.apply", "link" : "tofu\/concurrent\/QVars$.html#apply[F[_]](implicitqvars:tofu.concurrent.QVars[F]):tofu.concurrent.MakeQVar.Applier[F,F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/QVars$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/QVars$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/QVars$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/QVars$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/QVars$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/QVars$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/QVars$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/QVars$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/QVars$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/QVars$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/QVars$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/QVars$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/QVars$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/QVars$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/QVars$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/QVars$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/QVars$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/QVars$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/QVars$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.concurrent.ReadWrite", "object" : "tofu\/concurrent\/ReadWrite$.html", "members_object" : [{"label" : "in", "tail" : "(initial: A, maxReaders: Int)(arg0: Sync[F], arg1: Concurrent[G]): F[ReadWrite[G, A]]", "member" : "tofu.concurrent.ReadWrite.in", "link" : "tofu\/concurrent\/ReadWrite$.html#in[F[_],G[_],A](initial:A,maxReaders:Int)(implicitevidence$2:cats.effect.Sync[F],implicitevidence$3:cats.effect.Concurrent[G]):F[tofu.concurrent.ReadWrite[G,A]]", "kind" : "def"}, {"label" : "of", "tail" : "(initial: A, maxReaders: Int)(arg0: Concurrent[F]): F[ReadWrite[F, A]]", "member" : "tofu.concurrent.ReadWrite.of", "link" : "tofu\/concurrent\/ReadWrite$.html#of[F[_],A](initial:A,maxReaders:Int)(implicitevidence$1:cats.effect.Concurrent[F]):F[tofu.concurrent.ReadWrite[F,A]]", "kind" : "def"}, {"label" : "ConcurrentReadWrite", "tail" : "", "member" : "tofu.concurrent.ReadWrite.ConcurrentReadWrite", "link" : "tofu\/concurrent\/ReadWrite$.html#ConcurrentReadWrite[F[_],A]extendsReadWrite[F,A]", "kind" : "final class"}, {"label" : "State", "tail" : "", "member" : "tofu.concurrent.ReadWrite.State", "link" : "tofu\/concurrent\/ReadWrite$.html#State[F[_],A]extendsProductwithSerializable", "kind" : "final case class"}, {"label" : "Writer", "tail" : "", "member" : "tofu.concurrent.ReadWrite.Writer", "link" : "tofu\/concurrent\/ReadWrite$.html#Writer[F[_],A]extendsReadWrite.Op[F,A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Reader", "tail" : "", "member" : "tofu.concurrent.ReadWrite.Reader", "link" : "tofu\/concurrent\/ReadWrite$.html#Reader[F[_],A]extendsReadWrite.Op[F,A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Op", "tail" : "", "member" : "tofu.concurrent.ReadWrite.Op", "link" : "tofu\/concurrent\/ReadWrite$.html#Op[F[_],A]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/ReadWrite$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/ReadWrite$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/ReadWrite$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/ReadWrite$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/ReadWrite$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/ReadWrite$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/ReadWrite$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/ReadWrite$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/ReadWrite$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/ReadWrite$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/ReadWrite$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/ReadWrite$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/ReadWrite$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/ReadWrite$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/ReadWrite$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/ReadWrite$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/ReadWrite$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/ReadWrite$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/ReadWrite$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/concurrent\/ReadWrite.html", "kind" : "trait", "members_trait" : [{"label" : "trySet", "tail" : "(a: A): F[Boolean]", "member" : "tofu.concurrent.ReadWrite.trySet", "link" : "tofu\/concurrent\/ReadWrite.html#trySet(a:A):F[Boolean]", "kind" : "def"}, {"label" : "set", "tail" : "(a: A): F[Unit]", "member" : "tofu.concurrent.ReadWrite.set", "link" : "tofu\/concurrent\/ReadWrite.html#set(a:A):F[Unit]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/ReadWrite.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/ReadWrite.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/ReadWrite.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/ReadWrite.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/ReadWrite.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/ReadWrite.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/ReadWrite.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/ReadWrite.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/ReadWrite.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/ReadWrite.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/ReadWrite.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/ReadWrite.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/ReadWrite.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/ReadWrite.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/ReadWrite.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/ReadWrite.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/ReadWrite.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/ReadWrite.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/ReadWrite.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "tryModify", "tail" : "(f: (A) => (A, B)): F[Option[B]]", "member" : "tofu.concurrent.ReadWrite.tryModify", "link" : "tofu\/concurrent\/ReadWrite.html#tryModify[B](f:A=>(A,B)):F[Option[B]]", "kind" : "abstract def"}, {"label" : "modify", "tail" : "(f: (A) => (A, B)): F[B]", "member" : "tofu.concurrent.ReadWrite.modify", "link" : "tofu\/concurrent\/ReadWrite.html#modify[B](f:A=>(A,B)):F[B]", "kind" : "abstract def"}, {"label" : "tryUpdate", "tail" : "(f: (A) => A): F[Boolean]", "member" : "tofu.concurrent.ReadWrite.tryUpdate", "link" : "tofu\/concurrent\/ReadWrite.html#tryUpdate(f:A=>A):F[Boolean]", "kind" : "abstract def"}, {"label" : "update", "tail" : "(f: (A) => A): F[Unit]", "member" : "tofu.concurrent.ReadWrite.update", "link" : "tofu\/concurrent\/ReadWrite.html#update(f:A=>A):F[Unit]", "kind" : "abstract def"}, {"label" : "tryWrite", "tail" : "(): F[Option[(A, (A) => F[Unit])]]", "member" : "tofu.concurrent.ReadWrite.tryWrite", "link" : "tofu\/concurrent\/ReadWrite.html#tryWrite:F[Option[(A,A=>F[Unit])]]", "kind" : "abstract def"}, {"label" : "tryRead", "tail" : "(): F[Option[(A, F[Unit])]]", "member" : "tofu.concurrent.ReadWrite.tryRead", "link" : "tofu\/concurrent\/ReadWrite.html#tryRead:F[Option[(A,F[Unit])]]", "kind" : "abstract def"}, {"label" : "tryGet", "tail" : "(): F[Option[A]]", "member" : "tofu.concurrent.ReadWrite.tryGet", "link" : "tofu\/concurrent\/ReadWrite.html#tryGet:F[Option[A]]", "kind" : "abstract def"}, {"label" : "get", "tail" : "(): F[A]", "member" : "tofu.concurrent.ReadWrite.get", "link" : "tofu\/concurrent\/ReadWrite.html#get:F[A]", "kind" : "abstract def"}, {"label" : "write", "tail" : "(): F[(A, (A) => F[Unit])]", "member" : "tofu.concurrent.ReadWrite.write", "link" : "tofu\/concurrent\/ReadWrite.html#write:F[(A,A=>F[Unit])]", "kind" : "abstract def"}, {"label" : "read", "tail" : "(): F[(A, F[Unit])]", "member" : "tofu.concurrent.ReadWrite.read", "link" : "tofu\/concurrent\/ReadWrite.html#read:F[(A,F[Unit])]", "kind" : "abstract def"}], "shortDescription" : "A purely functional ReadWriteLock."}, {"name" : "tofu.concurrent.Refs", "shortDescription" : "", "object" : "tofu\/concurrent\/Refs$.html", "members_object" : [{"label" : "apply", "tail" : "(agents: Refs[F]): Applier[F, F]", "member" : "tofu.concurrent.Refs.apply", "link" : "tofu\/concurrent\/Refs$.html#apply[F[_]](implicitagents:tofu.concurrent.Refs[F]):tofu.concurrent.MakeRef.Applier[F,F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/Refs$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/Refs$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/Refs$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/Refs$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/Refs$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/Refs$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/Refs$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Refs$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Refs$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Refs$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/Refs$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/Refs$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/Refs$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/Refs$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/Refs$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/Refs$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/Refs$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/Refs$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/Refs$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.concurrent.Semaphores", "shortDescription" : "", "object" : "tofu\/concurrent\/Semaphores$.html", "members_object" : [{"label" : "apply", "tail" : "(agents: Semaphores[F]): Applier[F, F]", "member" : "tofu.concurrent.Semaphores.apply", "link" : "tofu\/concurrent\/Semaphores$.html#apply[F[_]](implicitagents:tofu.concurrent.Semaphores[F]):tofu.concurrent.MakeSemaphore.Applier[F,F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/Semaphores$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/Semaphores$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/Semaphores$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/Semaphores$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/Semaphores$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/Semaphores$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/Semaphores$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Semaphores$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Semaphores$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Semaphores$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/Semaphores$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/Semaphores$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/Semaphores$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/Semaphores$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/Semaphores$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/Semaphores$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/Semaphores$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/Semaphores$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/Semaphores$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.concurrent.Stoplights", "shortDescription" : "", "object" : "tofu\/concurrent\/Stoplights$.html", "members_object" : [{"label" : "apply", "tail" : "(stoplights: Stoplights[F]): Maker[F, F, Long]", "member" : "tofu.concurrent.Stoplights.apply", "link" : "tofu\/concurrent\/Stoplights$.html#apply[F[_]](implicitstoplights:tofu.concurrent.Stoplights[F]):tofu.concurrent.MakeGatekeeper.Maker[F,F,Long]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/Stoplights$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/Stoplights$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/Stoplights$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/Stoplights$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/Stoplights$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/Stoplights$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/Stoplights$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Stoplights$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Stoplights$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/Stoplights$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/Stoplights$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/Stoplights$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/Stoplights$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/Stoplights$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/Stoplights$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/Stoplights$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/Stoplights$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/Stoplights$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/Stoplights$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.concurrent.TofuCanceledJoinException", "shortDescription" : "", "members_class" : [{"label" : "daemon", "tail" : ": Daemon[F, Throwable, A]", "member" : "tofu.concurrent.TofuCanceledJoinException.daemon", "link" : "tofu\/concurrent\/TofuCanceledJoinException.html#daemon:tofu.concurrent.Daemon[F,Throwable,A]", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "tofu\/concurrent\/TofuCanceledJoinException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "tofu\/concurrent\/TofuCanceledJoinException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "tofu\/concurrent\/TofuCanceledJoinException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "tofu\/concurrent\/TofuCanceledJoinException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "tofu\/concurrent\/TofuCanceledJoinException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "tofu\/concurrent\/TofuCanceledJoinException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "tofu\/concurrent\/TofuCanceledJoinException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "tofu\/concurrent\/TofuCanceledJoinException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "tofu\/concurrent\/TofuCanceledJoinException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "tofu\/concurrent\/TofuCanceledJoinException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "tofu\/concurrent\/TofuCanceledJoinException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "tofu\/concurrent\/TofuCanceledJoinException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "tofu\/concurrent\/TofuCanceledJoinException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/TofuCanceledJoinException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/TofuCanceledJoinException.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/TofuCanceledJoinException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/TofuCanceledJoinException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/TofuCanceledJoinException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/TofuCanceledJoinException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/TofuCanceledJoinException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/TofuCanceledJoinException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/TofuCanceledJoinException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/TofuCanceledJoinException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/TofuCanceledJoinException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/TofuCanceledJoinException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/TofuCanceledJoinException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/TofuCanceledJoinException.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/TofuCanceledJoinException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/TofuCanceledJoinException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/TofuCanceledJoinException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/TofuCanceledJoinException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "tofu\/concurrent\/TofuCanceledJoinException.html", "kind" : "class"}, {"name" : "tofu.concurrent.TryableDeferreds", "trait" : "tofu\/concurrent\/TryableDeferreds.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/TryableDeferreds.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/TryableDeferreds.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/TryableDeferreds.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/TryableDeferreds.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/TryableDeferreds.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/TryableDeferreds.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/TryableDeferreds.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/TryableDeferreds.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/TryableDeferreds.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/TryableDeferreds.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/TryableDeferreds.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/TryableDeferreds.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/TryableDeferreds.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/TryableDeferreds.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/TryableDeferreds.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/TryableDeferreds.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/TryableDeferreds.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/TryableDeferreds.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/TryableDeferreds.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "tryable", "tail" : "(): F[TryableDeferred[F, A]]", "member" : "tofu.concurrent.TryableDeferreds.tryable", "link" : "tofu\/concurrent\/TryableDeferreds.html#tryable[A]:F[cats.effect.concurrent.TryableDeferred[F,A]]", "kind" : "abstract def"}, {"label" : "deferred", "tail" : "(): F[Deferred[F, A]]", "member" : "tofu.concurrent.MakeDeferred.deferred", "link" : "tofu\/concurrent\/TryableDeferreds.html#deferred[A]:I[cats.effect.concurrent.Deferred[F,A]]", "kind" : "abstract def"}], "shortDescription" : ""}], "tofu.control" : [{"name" : "tofu.control.ApplicativeZip", "trait" : "tofu\/control\/ApplicativeZip.html", "kind" : "trait", "members_trait" : [{"label" : "map", "tail" : "(fa: F[A])(f: (A) => B): F[B]", "member" : "tofu.control.ApplicativeZip.map", "link" : "tofu\/control\/ApplicativeZip.html#map[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "def"}, {"label" : "whenA", "tail" : "(cond: Boolean)(f: => F[A]): F[Unit]", "member" : "cats.Applicative.whenA", "link" : "tofu\/control\/ApplicativeZip.html#whenA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "unlessA", "tail" : "(cond: Boolean)(f: => F[A]): F[Unit]", "member" : "cats.Applicative.unlessA", "link" : "tofu\/control\/ApplicativeZip.html#unlessA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "composeContravariantMonoidal", "tail" : "(arg0: ContravariantMonoidal[G]): ContravariantMonoidal[[α]F[G[α]]]", "member" : "cats.Applicative.composeContravariantMonoidal", "link" : "tofu\/control\/ApplicativeZip.html#composeContravariantMonoidal[G[_]](implicitevidence$2:cats.ContravariantMonoidal[G]):cats.ContravariantMonoidal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Applicative[G]): Applicative[[α]F[G[α]]]", "member" : "cats.Applicative.compose", "link" : "tofu\/control\/ApplicativeZip.html#compose[G[_]](implicitevidence$1:cats.Applicative[G]):cats.Applicative[[α]F[G[α]]]", "kind" : "def"}, {"label" : "replicateA", "tail" : "(n: Int, fa: F[A]): F[List[A]]", "member" : "cats.Applicative.replicateA", "link" : "tofu\/control\/ApplicativeZip.html#replicateA[A](n:Int,fa:F[A]):F[List[A]]", "kind" : "def"}, {"label" : "unit", "tail" : "(): F[Unit]", "member" : "cats.Applicative.unit", "link" : "tofu\/control\/ApplicativeZip.html#unit:F[Unit]", "kind" : "def"}, {"label" : "point", "tail" : "(a: A): F[A]", "member" : "cats.InvariantMonoidal.point", "link" : "tofu\/control\/ApplicativeZip.html#point[A](a:A):F[A]", "kind" : "def"}, {"label" : "ap", "tail" : "(ff: F[(A) => B])(fa: F[A]): F[B]", "member" : "tofu.control.ApplyZip.ap", "link" : "tofu\/control\/ApplicativeZip.html#ap[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "def"}, {"label" : "ifA", "tail" : "(fcond: F[Boolean])(ifTrue: F[A], ifFalse: F[A]): F[A]", "member" : "cats.Apply.ifA", "link" : "tofu\/control\/ApplicativeZip.html#ifA[A](fcond:F[Boolean])(ifTrue:F[A],ifFalse:F[A]):F[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Apply[G]): Apply[[α]F[G[α]]]", "member" : "cats.Apply.compose", "link" : "tofu\/control\/ApplicativeZip.html#compose[G[_]](implicitevidence$1:cats.Apply[G]):cats.Apply[[α]F[G[α]]]", "kind" : "def"}, {"label" : "map2Eval", "tail" : "(fa: F[A], fb: Eval[F[B]])(f: (A, B) => Z): Eval[F[Z]]", "member" : "cats.Apply.map2Eval", "link" : "tofu\/control\/ApplicativeZip.html#map2Eval[A,B,Z](fa:F[A],fb:cats.Eval[F[B]])(f:(A,B)=>Z):cats.Eval[F[Z]]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa: F[A], fb: F[B])(f: (A, B) => Z): F[Z]", "member" : "cats.Apply.map2", "link" : "tofu\/control\/ApplicativeZip.html#map2[A,B,Z](fa:F[A],fb:F[B])(f:(A,B)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap2", "tail" : "(ff: F[(A, B) => Z])(fa: F[A], fb: F[B]): F[Z]", "member" : "cats.Apply.ap2", "link" : "tofu\/control\/ApplicativeZip.html#ap2[A,B,Z](ff:F[(A,B)=>Z])(fa:F[A],fb:F[B]):F[Z]", "kind" : "def"}, {"label" : "<*", "tail" : "(fa: F[A])(fb: F[B]): F[A]", "member" : "cats.Apply.<*", "link" : "tofu\/control\/ApplicativeZip.html#<*[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(fa: F[A])(fb: F[B]): F[B]", "member" : "cats.Apply.*>", "link" : "tofu\/control\/ApplicativeZip.html#*>[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(ff: F[(A) => B])(fa: F[A]): F[B]", "member" : "cats.Apply.<*>", "link" : "tofu\/control\/ApplicativeZip.html#<*>[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "product", "tail" : "(fa: F[A], fb: F[B]): F[(A, B)]", "member" : "cats.Apply.product", "link" : "tofu\/control\/ApplicativeZip.html#product[A,B](fa:F[A],fb:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "productL", "tail" : "(fa: F[A])(fb: F[B]): F[A]", "member" : "cats.Apply.productL", "link" : "tofu\/control\/ApplicativeZip.html#productL[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "def"}, {"label" : "productR", "tail" : "(fa: F[A])(fb: F[B]): F[B]", "member" : "cats.Apply.productR", "link" : "tofu\/control\/ApplicativeZip.html#productR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "def"}, {"label" : "tuple22", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20], f21: F[A21]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.ApplyArityFunctions.tuple22", "link" : "tofu\/control\/ApplicativeZip.html#tuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "map22", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20], f21: F[A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map22", "link" : "tofu\/control\/ApplicativeZip.html#map22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap22", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20], f21: F[A21]): F[Z]", "member" : "cats.ApplyArityFunctions.ap22", "link" : "tofu\/control\/ApplicativeZip.html#ap22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[Z]", "kind" : "def"}, {"label" : "tuple21", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.ApplyArityFunctions.tuple21", "link" : "tofu\/control\/ApplicativeZip.html#tuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "map21", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map21", "link" : "tofu\/control\/ApplicativeZip.html#map21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap21", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20]): F[Z]", "member" : "cats.ApplyArityFunctions.ap21", "link" : "tofu\/control\/ApplicativeZip.html#ap21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[Z]", "kind" : "def"}, {"label" : "tuple20", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.ApplyArityFunctions.tuple20", "link" : "tofu\/control\/ApplicativeZip.html#tuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "map20", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map20", "link" : "tofu\/control\/ApplicativeZip.html#map20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap20", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19]): F[Z]", "member" : "cats.ApplyArityFunctions.ap20", "link" : "tofu\/control\/ApplicativeZip.html#ap20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[Z]", "kind" : "def"}, {"label" : "tuple19", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.ApplyArityFunctions.tuple19", "link" : "tofu\/control\/ApplicativeZip.html#tuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "map19", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map19", "link" : "tofu\/control\/ApplicativeZip.html#map19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap19", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18]): F[Z]", "member" : "cats.ApplyArityFunctions.ap19", "link" : "tofu\/control\/ApplicativeZip.html#ap19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[Z]", "kind" : "def"}, {"label" : "tuple18", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.ApplyArityFunctions.tuple18", "link" : "tofu\/control\/ApplicativeZip.html#tuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "map18", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map18", "link" : "tofu\/control\/ApplicativeZip.html#map18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap18", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17]): F[Z]", "member" : "cats.ApplyArityFunctions.ap18", "link" : "tofu\/control\/ApplicativeZip.html#ap18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[Z]", "kind" : "def"}, {"label" : "tuple17", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.ApplyArityFunctions.tuple17", "link" : "tofu\/control\/ApplicativeZip.html#tuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "map17", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map17", "link" : "tofu\/control\/ApplicativeZip.html#map17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap17", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16]): F[Z]", "member" : "cats.ApplyArityFunctions.ap17", "link" : "tofu\/control\/ApplicativeZip.html#ap17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[Z]", "kind" : "def"}, {"label" : "tuple16", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.ApplyArityFunctions.tuple16", "link" : "tofu\/control\/ApplicativeZip.html#tuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "map16", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map16", "link" : "tofu\/control\/ApplicativeZip.html#map16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap16", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15]): F[Z]", "member" : "cats.ApplyArityFunctions.ap16", "link" : "tofu\/control\/ApplicativeZip.html#ap16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[Z]", "kind" : "def"}, {"label" : "tuple15", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.ApplyArityFunctions.tuple15", "link" : "tofu\/control\/ApplicativeZip.html#tuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "map15", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map15", "link" : "tofu\/control\/ApplicativeZip.html#map15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap15", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14]): F[Z]", "member" : "cats.ApplyArityFunctions.ap15", "link" : "tofu\/control\/ApplicativeZip.html#ap15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[Z]", "kind" : "def"}, {"label" : "tuple14", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.ApplyArityFunctions.tuple14", "link" : "tofu\/control\/ApplicativeZip.html#tuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "map14", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map14", "link" : "tofu\/control\/ApplicativeZip.html#map14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap14", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13]): F[Z]", "member" : "cats.ApplyArityFunctions.ap14", "link" : "tofu\/control\/ApplicativeZip.html#ap14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[Z]", "kind" : "def"}, {"label" : "tuple13", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.ApplyArityFunctions.tuple13", "link" : "tofu\/control\/ApplicativeZip.html#tuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "map13", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map13", "link" : "tofu\/control\/ApplicativeZip.html#map13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap13", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12]): F[Z]", "member" : "cats.ApplyArityFunctions.ap13", "link" : "tofu\/control\/ApplicativeZip.html#ap13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[Z]", "kind" : "def"}, {"label" : "tuple12", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.ApplyArityFunctions.tuple12", "link" : "tofu\/control\/ApplicativeZip.html#tuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "map12", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map12", "link" : "tofu\/control\/ApplicativeZip.html#map12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap12", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11]): F[Z]", "member" : "cats.ApplyArityFunctions.ap12", "link" : "tofu\/control\/ApplicativeZip.html#ap12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[Z]", "kind" : "def"}, {"label" : "tuple11", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.ApplyArityFunctions.tuple11", "link" : "tofu\/control\/ApplicativeZip.html#tuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "map11", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map11", "link" : "tofu\/control\/ApplicativeZip.html#map11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap11", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10]): F[Z]", "member" : "cats.ApplyArityFunctions.ap11", "link" : "tofu\/control\/ApplicativeZip.html#ap11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[Z]", "kind" : "def"}, {"label" : "tuple10", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.ApplyArityFunctions.tuple10", "link" : "tofu\/control\/ApplicativeZip.html#tuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "map10", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map10", "link" : "tofu\/control\/ApplicativeZip.html#map10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap10", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9]): F[Z]", "member" : "cats.ApplyArityFunctions.ap10", "link" : "tofu\/control\/ApplicativeZip.html#ap10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[Z]", "kind" : "def"}, {"label" : "tuple9", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.ApplyArityFunctions.tuple9", "link" : "tofu\/control\/ApplicativeZip.html#tuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "map9", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map9", "link" : "tofu\/control\/ApplicativeZip.html#map9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap9", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8]): F[Z]", "member" : "cats.ApplyArityFunctions.ap9", "link" : "tofu\/control\/ApplicativeZip.html#ap9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[Z]", "kind" : "def"}, {"label" : "tuple8", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7]): F[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.ApplyArityFunctions.tuple8", "link" : "tofu\/control\/ApplicativeZip.html#tuple8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "map8", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map8", "link" : "tofu\/control\/ApplicativeZip.html#map8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap8", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7]): F[Z]", "member" : "cats.ApplyArityFunctions.ap8", "link" : "tofu\/control\/ApplicativeZip.html#ap8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[Z]", "kind" : "def"}, {"label" : "tuple7", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6]): F[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.ApplyArityFunctions.tuple7", "link" : "tofu\/control\/ApplicativeZip.html#tuple7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "map7", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6])(f: (A0, A1, A2, A3, A4, A5, A6) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map7", "link" : "tofu\/control\/ApplicativeZip.html#map7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap7", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6]): F[Z]", "member" : "cats.ApplyArityFunctions.ap7", "link" : "tofu\/control\/ApplicativeZip.html#ap7[A0,A1,A2,A3,A4,A5,A6,Z](f:F[(A0,A1,A2,A3,A4,A5,A6)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[Z]", "kind" : "def"}, {"label" : "tuple6", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5]): F[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.ApplyArityFunctions.tuple6", "link" : "tofu\/control\/ApplicativeZip.html#tuple6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[(A0,A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "map6", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5])(f: (A0, A1, A2, A3, A4, A5) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map6", "link" : "tofu\/control\/ApplicativeZip.html#map6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5])(f:(A0,A1,A2,A3,A4,A5)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap6", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5]): F[Z]", "member" : "cats.ApplyArityFunctions.ap6", "link" : "tofu\/control\/ApplicativeZip.html#ap6[A0,A1,A2,A3,A4,A5,Z](f:F[(A0,A1,A2,A3,A4,A5)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[Z]", "kind" : "def"}, {"label" : "tuple5", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4]): F[(A0, A1, A2, A3, A4)]", "member" : "cats.ApplyArityFunctions.tuple5", "link" : "tofu\/control\/ApplicativeZip.html#tuple5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[(A0,A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "map5", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4])(f: (A0, A1, A2, A3, A4) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map5", "link" : "tofu\/control\/ApplicativeZip.html#map5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4])(f:(A0,A1,A2,A3,A4)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap5", "tail" : "(f: F[(A0, A1, A2, A3, A4) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4]): F[Z]", "member" : "cats.ApplyArityFunctions.ap5", "link" : "tofu\/control\/ApplicativeZip.html#ap5[A0,A1,A2,A3,A4,Z](f:F[(A0,A1,A2,A3,A4)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[Z]", "kind" : "def"}, {"label" : "tuple4", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3]): F[(A0, A1, A2, A3)]", "member" : "cats.ApplyArityFunctions.tuple4", "link" : "tofu\/control\/ApplicativeZip.html#tuple4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[(A0,A1,A2,A3)]", "kind" : "def"}, {"label" : "map4", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3])(f: (A0, A1, A2, A3) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map4", "link" : "tofu\/control\/ApplicativeZip.html#map4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3])(f:(A0,A1,A2,A3)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap4", "tail" : "(f: F[(A0, A1, A2, A3) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3]): F[Z]", "member" : "cats.ApplyArityFunctions.ap4", "link" : "tofu\/control\/ApplicativeZip.html#ap4[A0,A1,A2,A3,Z](f:F[(A0,A1,A2,A3)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[Z]", "kind" : "def"}, {"label" : "tuple3", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2]): F[(A0, A1, A2)]", "member" : "cats.ApplyArityFunctions.tuple3", "link" : "tofu\/control\/ApplicativeZip.html#tuple3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2]):F[(A0,A1,A2)]", "kind" : "def"}, {"label" : "map3", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2])(f: (A0, A1, A2) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map3", "link" : "tofu\/control\/ApplicativeZip.html#map3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2])(f:(A0,A1,A2)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap3", "tail" : "(f: F[(A0, A1, A2) => Z])(f0: F[A0], f1: F[A1], f2: F[A2]): F[Z]", "member" : "cats.ApplyArityFunctions.ap3", "link" : "tofu\/control\/ApplicativeZip.html#ap3[A0,A1,A2,Z](f:F[(A0,A1,A2)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2]):F[Z]", "kind" : "def"}, {"label" : "tuple2", "tail" : "(f1: F[A], f2: F[B]): F[(A, B)]", "member" : "cats.ApplyArityFunctions.tuple2", "link" : "tofu\/control\/ApplicativeZip.html#tuple2[A,B](f1:F[A],f2:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "composeApply", "tail" : "(arg0: Apply[G]): InvariantSemigroupal[[α]F[G[α]]]", "member" : "cats.InvariantSemigroupal.composeApply", "link" : "tofu\/control\/ApplicativeZip.html#composeApply[G[_]](implicitevidence$1:cats.Apply[G]):cats.InvariantSemigroupal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Contravariant[[α]F[G[α]]]", "member" : "cats.Functor.composeContravariant", "link" : "tofu\/control\/ApplicativeZip.html#composeContravariant[G[_]](implicitevidence$2:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Functor[G]): Functor[[α]F[G[α]]]", "member" : "cats.Functor.compose", "link" : "tofu\/control\/ApplicativeZip.html#compose[G[_]](implicitevidence$1:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "def"}, {"label" : "ifF", "tail" : "(fb: F[Boolean])(ifTrue: => A, ifFalse: => A): F[A]", "member" : "cats.Functor.ifF", "link" : "tofu\/control\/ApplicativeZip.html#ifF[A](fb:F[Boolean])(ifTrue:=>A,ifFalse:=>A):F[A]", "kind" : "def"}, {"label" : "unzip", "tail" : "(fab: F[(A, B)]): (F[A], F[B])", "member" : "cats.Functor.unzip", "link" : "tofu\/control\/ApplicativeZip.html#unzip[A,B](fab:F[(A,B)]):(F[A],F[B])", "kind" : "def"}, {"label" : "tupleRight", "tail" : "(fa: F[A], b: B): F[(A, B)]", "member" : "cats.Functor.tupleRight", "link" : "tofu\/control\/ApplicativeZip.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "def"}, {"label" : "tupleLeft", "tail" : "(fa: F[A], b: B): F[(B, A)]", "member" : "cats.Functor.tupleLeft", "link" : "tofu\/control\/ApplicativeZip.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "def"}, {"label" : "as", "tail" : "(fa: F[A], b: B): F[B]", "member" : "cats.Functor.as", "link" : "tofu\/control\/ApplicativeZip.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(fa: F[A])(f: (A) => B): F[(A, B)]", "member" : "cats.Functor.fproduct", "link" : "tofu\/control\/ApplicativeZip.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "def"}, {"label" : "void", "tail" : "(fa: F[A]): F[Unit]", "member" : "cats.Functor.void", "link" : "tofu\/control\/ApplicativeZip.html#void[A](fa:F[A]):F[Unit]", "kind" : "def"}, {"label" : "lift", "tail" : "(f: (A) => B): (F[A]) => F[B]", "member" : "cats.Functor.lift", "link" : "tofu\/control\/ApplicativeZip.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "widen", "tail" : "(fa: F[A]): F[B]", "member" : "cats.Functor.widen", "link" : "tofu\/control\/ApplicativeZip.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: F[A])(f: (A) => B): F[B]", "member" : "cats.Functor.fmap", "link" : "tofu\/control\/ApplicativeZip.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: F[A])(f: (A) => B)(g: (B) => A): F[B]", "member" : "cats.Functor.imap", "link" : "tofu\/control\/ApplicativeZip.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]F[G[α]]]", "member" : "cats.Invariant.composeFunctor", "link" : "tofu\/control\/ApplicativeZip.html#composeFunctor[G[_]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]F[G[α]]]", "member" : "cats.Invariant.compose", "link" : "tofu\/control\/ApplicativeZip.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/control\/ApplicativeZip.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/control\/ApplicativeZip.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/control\/ApplicativeZip.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/control\/ApplicativeZip.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/control\/ApplicativeZip.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/control\/ApplicativeZip.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/control\/ApplicativeZip.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/ApplicativeZip.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/ApplicativeZip.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/ApplicativeZip.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/control\/ApplicativeZip.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/control\/ApplicativeZip.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/control\/ApplicativeZip.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/control\/ApplicativeZip.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/control\/ApplicativeZip.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/control\/ApplicativeZip.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/control\/ApplicativeZip.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/control\/ApplicativeZip.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/control\/ApplicativeZip.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "pure", "tail" : "(x: A): F[A]", "member" : "cats.Applicative.pure", "link" : "tofu\/control\/ApplicativeZip.html#pure[A](x:A):F[A]", "kind" : "abstract def"}, {"label" : "zipWith", "tail" : "(fa: F[A], fb: F[B])(f: (A, B) => C): F[C]", "member" : "tofu.control.ApplyZip.zipWith", "link" : "tofu\/control\/ApplicativeZip.html#zipWith[A,B,C](fa:F[A],fb:F[B])(f:(A,B)=>C):F[C]", "kind" : "abstract def"}], "shortDescription" : "mix-in for Applicative instances via map2"}, {"name" : "tofu.control.ApplyZip", "trait" : "tofu\/control\/ApplyZip.html", "kind" : "trait", "members_trait" : [{"label" : "ap", "tail" : "(ff: F[(A) => B])(fa: F[A]): F[B]", "member" : "tofu.control.ApplyZip.ap", "link" : "tofu\/control\/ApplyZip.html#ap[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "def"}, {"label" : "ifA", "tail" : "(fcond: F[Boolean])(ifTrue: F[A], ifFalse: F[A]): F[A]", "member" : "cats.Apply.ifA", "link" : "tofu\/control\/ApplyZip.html#ifA[A](fcond:F[Boolean])(ifTrue:F[A],ifFalse:F[A]):F[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Apply[G]): Apply[[α]F[G[α]]]", "member" : "cats.Apply.compose", "link" : "tofu\/control\/ApplyZip.html#compose[G[_]](implicitevidence$1:cats.Apply[G]):cats.Apply[[α]F[G[α]]]", "kind" : "def"}, {"label" : "map2Eval", "tail" : "(fa: F[A], fb: Eval[F[B]])(f: (A, B) => Z): Eval[F[Z]]", "member" : "cats.Apply.map2Eval", "link" : "tofu\/control\/ApplyZip.html#map2Eval[A,B,Z](fa:F[A],fb:cats.Eval[F[B]])(f:(A,B)=>Z):cats.Eval[F[Z]]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa: F[A], fb: F[B])(f: (A, B) => Z): F[Z]", "member" : "cats.Apply.map2", "link" : "tofu\/control\/ApplyZip.html#map2[A,B,Z](fa:F[A],fb:F[B])(f:(A,B)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap2", "tail" : "(ff: F[(A, B) => Z])(fa: F[A], fb: F[B]): F[Z]", "member" : "cats.Apply.ap2", "link" : "tofu\/control\/ApplyZip.html#ap2[A,B,Z](ff:F[(A,B)=>Z])(fa:F[A],fb:F[B]):F[Z]", "kind" : "def"}, {"label" : "<*", "tail" : "(fa: F[A])(fb: F[B]): F[A]", "member" : "cats.Apply.<*", "link" : "tofu\/control\/ApplyZip.html#<*[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(fa: F[A])(fb: F[B]): F[B]", "member" : "cats.Apply.*>", "link" : "tofu\/control\/ApplyZip.html#*>[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(ff: F[(A) => B])(fa: F[A]): F[B]", "member" : "cats.Apply.<*>", "link" : "tofu\/control\/ApplyZip.html#<*>[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "product", "tail" : "(fa: F[A], fb: F[B]): F[(A, B)]", "member" : "cats.Apply.product", "link" : "tofu\/control\/ApplyZip.html#product[A,B](fa:F[A],fb:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "productL", "tail" : "(fa: F[A])(fb: F[B]): F[A]", "member" : "cats.Apply.productL", "link" : "tofu\/control\/ApplyZip.html#productL[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "def"}, {"label" : "productR", "tail" : "(fa: F[A])(fb: F[B]): F[B]", "member" : "cats.Apply.productR", "link" : "tofu\/control\/ApplyZip.html#productR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "def"}, {"label" : "tuple22", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20], f21: F[A21]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.ApplyArityFunctions.tuple22", "link" : "tofu\/control\/ApplyZip.html#tuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "map22", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20], f21: F[A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map22", "link" : "tofu\/control\/ApplyZip.html#map22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap22", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20], f21: F[A21]): F[Z]", "member" : "cats.ApplyArityFunctions.ap22", "link" : "tofu\/control\/ApplyZip.html#ap22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[Z]", "kind" : "def"}, {"label" : "tuple21", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.ApplyArityFunctions.tuple21", "link" : "tofu\/control\/ApplyZip.html#tuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "map21", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map21", "link" : "tofu\/control\/ApplyZip.html#map21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap21", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20]): F[Z]", "member" : "cats.ApplyArityFunctions.ap21", "link" : "tofu\/control\/ApplyZip.html#ap21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[Z]", "kind" : "def"}, {"label" : "tuple20", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.ApplyArityFunctions.tuple20", "link" : "tofu\/control\/ApplyZip.html#tuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "map20", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map20", "link" : "tofu\/control\/ApplyZip.html#map20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap20", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19]): F[Z]", "member" : "cats.ApplyArityFunctions.ap20", "link" : "tofu\/control\/ApplyZip.html#ap20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[Z]", "kind" : "def"}, {"label" : "tuple19", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.ApplyArityFunctions.tuple19", "link" : "tofu\/control\/ApplyZip.html#tuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "map19", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map19", "link" : "tofu\/control\/ApplyZip.html#map19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap19", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18]): F[Z]", "member" : "cats.ApplyArityFunctions.ap19", "link" : "tofu\/control\/ApplyZip.html#ap19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[Z]", "kind" : "def"}, {"label" : "tuple18", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.ApplyArityFunctions.tuple18", "link" : "tofu\/control\/ApplyZip.html#tuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "map18", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map18", "link" : "tofu\/control\/ApplyZip.html#map18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap18", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17]): F[Z]", "member" : "cats.ApplyArityFunctions.ap18", "link" : "tofu\/control\/ApplyZip.html#ap18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[Z]", "kind" : "def"}, {"label" : "tuple17", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.ApplyArityFunctions.tuple17", "link" : "tofu\/control\/ApplyZip.html#tuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "map17", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map17", "link" : "tofu\/control\/ApplyZip.html#map17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap17", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16]): F[Z]", "member" : "cats.ApplyArityFunctions.ap17", "link" : "tofu\/control\/ApplyZip.html#ap17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[Z]", "kind" : "def"}, {"label" : "tuple16", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.ApplyArityFunctions.tuple16", "link" : "tofu\/control\/ApplyZip.html#tuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "map16", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map16", "link" : "tofu\/control\/ApplyZip.html#map16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap16", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15]): F[Z]", "member" : "cats.ApplyArityFunctions.ap16", "link" : "tofu\/control\/ApplyZip.html#ap16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[Z]", "kind" : "def"}, {"label" : "tuple15", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.ApplyArityFunctions.tuple15", "link" : "tofu\/control\/ApplyZip.html#tuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "map15", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map15", "link" : "tofu\/control\/ApplyZip.html#map15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap15", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14]): F[Z]", "member" : "cats.ApplyArityFunctions.ap15", "link" : "tofu\/control\/ApplyZip.html#ap15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[Z]", "kind" : "def"}, {"label" : "tuple14", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.ApplyArityFunctions.tuple14", "link" : "tofu\/control\/ApplyZip.html#tuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "map14", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map14", "link" : "tofu\/control\/ApplyZip.html#map14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap14", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13]): F[Z]", "member" : "cats.ApplyArityFunctions.ap14", "link" : "tofu\/control\/ApplyZip.html#ap14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[Z]", "kind" : "def"}, {"label" : "tuple13", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.ApplyArityFunctions.tuple13", "link" : "tofu\/control\/ApplyZip.html#tuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "map13", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map13", "link" : "tofu\/control\/ApplyZip.html#map13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap13", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12]): F[Z]", "member" : "cats.ApplyArityFunctions.ap13", "link" : "tofu\/control\/ApplyZip.html#ap13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[Z]", "kind" : "def"}, {"label" : "tuple12", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.ApplyArityFunctions.tuple12", "link" : "tofu\/control\/ApplyZip.html#tuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "map12", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map12", "link" : "tofu\/control\/ApplyZip.html#map12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap12", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11]): F[Z]", "member" : "cats.ApplyArityFunctions.ap12", "link" : "tofu\/control\/ApplyZip.html#ap12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[Z]", "kind" : "def"}, {"label" : "tuple11", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.ApplyArityFunctions.tuple11", "link" : "tofu\/control\/ApplyZip.html#tuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "map11", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map11", "link" : "tofu\/control\/ApplyZip.html#map11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap11", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10]): F[Z]", "member" : "cats.ApplyArityFunctions.ap11", "link" : "tofu\/control\/ApplyZip.html#ap11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[Z]", "kind" : "def"}, {"label" : "tuple10", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.ApplyArityFunctions.tuple10", "link" : "tofu\/control\/ApplyZip.html#tuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "map10", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map10", "link" : "tofu\/control\/ApplyZip.html#map10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap10", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9]): F[Z]", "member" : "cats.ApplyArityFunctions.ap10", "link" : "tofu\/control\/ApplyZip.html#ap10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[Z]", "kind" : "def"}, {"label" : "tuple9", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.ApplyArityFunctions.tuple9", "link" : "tofu\/control\/ApplyZip.html#tuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "map9", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map9", "link" : "tofu\/control\/ApplyZip.html#map9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap9", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8]): F[Z]", "member" : "cats.ApplyArityFunctions.ap9", "link" : "tofu\/control\/ApplyZip.html#ap9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[Z]", "kind" : "def"}, {"label" : "tuple8", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7]): F[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.ApplyArityFunctions.tuple8", "link" : "tofu\/control\/ApplyZip.html#tuple8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "map8", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map8", "link" : "tofu\/control\/ApplyZip.html#map8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap8", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7]): F[Z]", "member" : "cats.ApplyArityFunctions.ap8", "link" : "tofu\/control\/ApplyZip.html#ap8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[Z]", "kind" : "def"}, {"label" : "tuple7", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6]): F[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.ApplyArityFunctions.tuple7", "link" : "tofu\/control\/ApplyZip.html#tuple7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "map7", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6])(f: (A0, A1, A2, A3, A4, A5, A6) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map7", "link" : "tofu\/control\/ApplyZip.html#map7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap7", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6]): F[Z]", "member" : "cats.ApplyArityFunctions.ap7", "link" : "tofu\/control\/ApplyZip.html#ap7[A0,A1,A2,A3,A4,A5,A6,Z](f:F[(A0,A1,A2,A3,A4,A5,A6)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[Z]", "kind" : "def"}, {"label" : "tuple6", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5]): F[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.ApplyArityFunctions.tuple6", "link" : "tofu\/control\/ApplyZip.html#tuple6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[(A0,A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "map6", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5])(f: (A0, A1, A2, A3, A4, A5) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map6", "link" : "tofu\/control\/ApplyZip.html#map6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5])(f:(A0,A1,A2,A3,A4,A5)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap6", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5]): F[Z]", "member" : "cats.ApplyArityFunctions.ap6", "link" : "tofu\/control\/ApplyZip.html#ap6[A0,A1,A2,A3,A4,A5,Z](f:F[(A0,A1,A2,A3,A4,A5)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[Z]", "kind" : "def"}, {"label" : "tuple5", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4]): F[(A0, A1, A2, A3, A4)]", "member" : "cats.ApplyArityFunctions.tuple5", "link" : "tofu\/control\/ApplyZip.html#tuple5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[(A0,A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "map5", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4])(f: (A0, A1, A2, A3, A4) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map5", "link" : "tofu\/control\/ApplyZip.html#map5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4])(f:(A0,A1,A2,A3,A4)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap5", "tail" : "(f: F[(A0, A1, A2, A3, A4) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4]): F[Z]", "member" : "cats.ApplyArityFunctions.ap5", "link" : "tofu\/control\/ApplyZip.html#ap5[A0,A1,A2,A3,A4,Z](f:F[(A0,A1,A2,A3,A4)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[Z]", "kind" : "def"}, {"label" : "tuple4", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3]): F[(A0, A1, A2, A3)]", "member" : "cats.ApplyArityFunctions.tuple4", "link" : "tofu\/control\/ApplyZip.html#tuple4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[(A0,A1,A2,A3)]", "kind" : "def"}, {"label" : "map4", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3])(f: (A0, A1, A2, A3) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map4", "link" : "tofu\/control\/ApplyZip.html#map4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3])(f:(A0,A1,A2,A3)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap4", "tail" : "(f: F[(A0, A1, A2, A3) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3]): F[Z]", "member" : "cats.ApplyArityFunctions.ap4", "link" : "tofu\/control\/ApplyZip.html#ap4[A0,A1,A2,A3,Z](f:F[(A0,A1,A2,A3)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[Z]", "kind" : "def"}, {"label" : "tuple3", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2]): F[(A0, A1, A2)]", "member" : "cats.ApplyArityFunctions.tuple3", "link" : "tofu\/control\/ApplyZip.html#tuple3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2]):F[(A0,A1,A2)]", "kind" : "def"}, {"label" : "map3", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2])(f: (A0, A1, A2) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map3", "link" : "tofu\/control\/ApplyZip.html#map3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2])(f:(A0,A1,A2)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap3", "tail" : "(f: F[(A0, A1, A2) => Z])(f0: F[A0], f1: F[A1], f2: F[A2]): F[Z]", "member" : "cats.ApplyArityFunctions.ap3", "link" : "tofu\/control\/ApplyZip.html#ap3[A0,A1,A2,Z](f:F[(A0,A1,A2)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2]):F[Z]", "kind" : "def"}, {"label" : "tuple2", "tail" : "(f1: F[A], f2: F[B]): F[(A, B)]", "member" : "cats.ApplyArityFunctions.tuple2", "link" : "tofu\/control\/ApplyZip.html#tuple2[A,B](f1:F[A],f2:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "composeApply", "tail" : "(arg0: Apply[G]): InvariantSemigroupal[[α]F[G[α]]]", "member" : "cats.InvariantSemigroupal.composeApply", "link" : "tofu\/control\/ApplyZip.html#composeApply[G[_]](implicitevidence$1:cats.Apply[G]):cats.InvariantSemigroupal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Contravariant[[α]F[G[α]]]", "member" : "cats.Functor.composeContravariant", "link" : "tofu\/control\/ApplyZip.html#composeContravariant[G[_]](implicitevidence$2:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Functor[G]): Functor[[α]F[G[α]]]", "member" : "cats.Functor.compose", "link" : "tofu\/control\/ApplyZip.html#compose[G[_]](implicitevidence$1:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "def"}, {"label" : "ifF", "tail" : "(fb: F[Boolean])(ifTrue: => A, ifFalse: => A): F[A]", "member" : "cats.Functor.ifF", "link" : "tofu\/control\/ApplyZip.html#ifF[A](fb:F[Boolean])(ifTrue:=>A,ifFalse:=>A):F[A]", "kind" : "def"}, {"label" : "unzip", "tail" : "(fab: F[(A, B)]): (F[A], F[B])", "member" : "cats.Functor.unzip", "link" : "tofu\/control\/ApplyZip.html#unzip[A,B](fab:F[(A,B)]):(F[A],F[B])", "kind" : "def"}, {"label" : "tupleRight", "tail" : "(fa: F[A], b: B): F[(A, B)]", "member" : "cats.Functor.tupleRight", "link" : "tofu\/control\/ApplyZip.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "def"}, {"label" : "tupleLeft", "tail" : "(fa: F[A], b: B): F[(B, A)]", "member" : "cats.Functor.tupleLeft", "link" : "tofu\/control\/ApplyZip.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "def"}, {"label" : "as", "tail" : "(fa: F[A], b: B): F[B]", "member" : "cats.Functor.as", "link" : "tofu\/control\/ApplyZip.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(fa: F[A])(f: (A) => B): F[(A, B)]", "member" : "cats.Functor.fproduct", "link" : "tofu\/control\/ApplyZip.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "def"}, {"label" : "void", "tail" : "(fa: F[A]): F[Unit]", "member" : "cats.Functor.void", "link" : "tofu\/control\/ApplyZip.html#void[A](fa:F[A]):F[Unit]", "kind" : "def"}, {"label" : "lift", "tail" : "(f: (A) => B): (F[A]) => F[B]", "member" : "cats.Functor.lift", "link" : "tofu\/control\/ApplyZip.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "widen", "tail" : "(fa: F[A]): F[B]", "member" : "cats.Functor.widen", "link" : "tofu\/control\/ApplyZip.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: F[A])(f: (A) => B): F[B]", "member" : "cats.Functor.fmap", "link" : "tofu\/control\/ApplyZip.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: F[A])(f: (A) => B)(g: (B) => A): F[B]", "member" : "cats.Functor.imap", "link" : "tofu\/control\/ApplyZip.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]F[G[α]]]", "member" : "cats.Invariant.composeFunctor", "link" : "tofu\/control\/ApplyZip.html#composeFunctor[G[_]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]F[G[α]]]", "member" : "cats.Invariant.compose", "link" : "tofu\/control\/ApplyZip.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/control\/ApplyZip.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/control\/ApplyZip.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/control\/ApplyZip.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/control\/ApplyZip.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/control\/ApplyZip.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/control\/ApplyZip.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/control\/ApplyZip.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/ApplyZip.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/ApplyZip.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/ApplyZip.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/control\/ApplyZip.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/control\/ApplyZip.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/control\/ApplyZip.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/control\/ApplyZip.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/control\/ApplyZip.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/control\/ApplyZip.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/control\/ApplyZip.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/control\/ApplyZip.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/control\/ApplyZip.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "zipWith", "tail" : "(fa: F[A], fb: F[B])(f: (A, B) => C): F[C]", "member" : "tofu.control.ApplyZip.zipWith", "link" : "tofu\/control\/ApplyZip.html#zipWith[A,B,C](fa:F[A],fb:F[B])(f:(A,B)=>C):F[C]", "kind" : "abstract def"}, {"label" : "map", "tail" : "(fa: F[A])(f: (A) => B): F[B]", "member" : "cats.Functor.map", "link" : "tofu\/control\/ApplyZip.html#map[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "abstract def"}], "shortDescription" : "mix-in for Apply instances via map2"}, {"name" : "tofu.control.Consume", "object" : "tofu\/control\/Consume$.html", "members_object" : [{"label" : "ops", "tail" : "", "member" : "tofu.control.Consume.ops", "link" : "tofu\/control\/Consume$.html#ops", "kind" : "object"}, {"label" : "AllOps", "tail" : "", "member" : "tofu.control.Consume.AllOps", "link" : "tofu\/control\/Consume$.html#AllOps[F[_],A]extendsConsume.Ops[F,A]withPartial.AllOps[F,A]withContravariantMonoidal.AllOps[F,A]withContravariantFilter.AllOps[F,A]", "kind" : "trait"}, {"label" : "nonInheritedOps", "tail" : "", "member" : "tofu.control.Consume.nonInheritedOps", "link" : "tofu\/control\/Consume$.html#nonInheritedOps", "kind" : "object"}, {"label" : "ToConsumeOps", "tail" : "", "member" : "tofu.control.Consume.ToConsumeOps", "link" : "tofu\/control\/Consume$.html#ToConsumeOpsextendsAnyRef", "kind" : "trait"}, {"label" : "Ops", "tail" : "", "member" : "tofu.control.Consume.Ops", "link" : "tofu\/control\/Consume$.html#Ops[F[_],A]extendsAnyRef", "kind" : "trait"}, {"label" : "apply", "tail" : "(instance: Consume[F]): Consume[F]", "member" : "tofu.control.Consume.apply", "link" : "tofu\/control\/Consume$.html#apply[F[_]](implicitinstance:tofu.control.Consume[F]):tofu.control.Consume[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/control\/Consume$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/control\/Consume$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/control\/Consume$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/control\/Consume$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/control\/Consume$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/control\/Consume$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/control\/Consume$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/Consume$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/Consume$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/Consume$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/control\/Consume$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/control\/Consume$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/control\/Consume$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/control\/Consume$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/control\/Consume$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/control\/Consume$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/control\/Consume$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/control\/Consume$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/control\/Consume$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/control\/Consume.html", "kind" : "trait", "members_trait" : [{"label" : "contramapFilter", "tail" : "(fa: F[A])(f: (B) => Option[A]): F[B]", "member" : "tofu.control.Consume.contramapFilter", "link" : "tofu\/control\/Consume.html#contramapFilter[A,B](fa:F[A])(f:B=>Option[A]):F[B]", "kind" : "def"}, {"label" : "trivial", "tail" : "(): F[A]", "member" : "tofu.control.Consume.trivial", "link" : "tofu\/control\/Consume.html#trivial[A]:F[A]", "kind" : "def"}, {"label" : "unit", "tail" : "(): F[Unit]", "member" : "tofu.control.Consume.unit", "link" : "tofu\/control\/Consume.html#unit:F[Unit]", "kind" : "def"}, {"label" : "product", "tail" : "(fa: F[A], fb: F[B]): F[(A, B)]", "member" : "tofu.control.Consume.product", "link" : "tofu\/control\/Consume.html#product[A,B](fa:F[A],fb:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "contraFilter", "tail" : "(fa: F[A])(f: (A) => Boolean): F[A]", "member" : "tofu.control.ContravariantFilter.contraFilter", "link" : "tofu\/control\/Consume.html#contraFilter[A](fa:F[A])(f:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "optional", "tail" : "(fa: F[A]): F[Option[A]]", "member" : "tofu.control.ContravariantFilter.optional", "link" : "tofu\/control\/Consume.html#optional[A](fa:F[A]):F[Option[A]]", "kind" : "def"}, {"label" : "contraCollect", "tail" : "(fa: F[A])(f: PartialFunction[B, A]): F[B]", "member" : "tofu.control.ContravariantFilter.contraCollect", "link" : "tofu\/control\/Consume.html#contraCollect[A,B](fa:F[A])(f:PartialFunction[B,A]):F[B]", "kind" : "def"}, {"label" : "point", "tail" : "(a: A): F[A]", "member" : "cats.InvariantMonoidal.point", "link" : "tofu\/control\/Consume.html#point[A](a:A):F[A]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): ContravariantSemigroupal[[α]F[G[α]]]", "member" : "cats.ContravariantSemigroupal.composeFunctor", "link" : "tofu\/control\/Consume.html#composeFunctor[G[_]](implicitevidence$1:cats.Functor[G]):cats.ContravariantSemigroupal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "liftContravariant", "tail" : "(f: (A) => B): (F[B]) => F[A]", "member" : "cats.Contravariant.liftContravariant", "link" : "tofu\/control\/Consume.html#liftContravariant[A,B](f:A=>B):F[B]=>F[A]", "kind" : "def"}, {"label" : "narrow", "tail" : "(fa: F[A]): F[B]", "member" : "cats.Contravariant.narrow", "link" : "tofu\/control\/Consume.html#narrow[A,B<:A](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Contravariant[G]): Functor[[α]F[G[α]]]", "member" : "cats.Contravariant.compose", "link" : "tofu\/control\/Consume.html#compose[G[_]](implicitevidence$1:cats.Contravariant[G]):cats.Functor[[α]F[G[α]]]", "kind" : "def"}, {"label" : "imap", "tail" : "(fa: F[A])(f: (A) => B)(fi: (B) => A): F[B]", "member" : "cats.Contravariant.imap", "link" : "tofu\/control\/Consume.html#imap[A,B](fa:F[A])(f:A=>B)(fi:B=>A):F[B]", "kind" : "def"}, {"label" : "composeApply", "tail" : "(arg0: Apply[G]): InvariantSemigroupal[[α]F[G[α]]]", "member" : "cats.InvariantSemigroupal.composeApply", "link" : "tofu\/control\/Consume.html#composeApply[G[_]](implicitevidence$1:cats.Apply[G]):cats.InvariantSemigroupal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "nothing", "tail" : "(): F[Nothing]", "member" : "tofu.control.Partial.nothing", "link" : "tofu\/control\/Consume.html#nothing:F[Nothing]", "kind" : "def"}, {"label" : "skip", "tail" : "(): F[Void]", "member" : "tofu.control.Partial.skip", "link" : "tofu\/control\/Consume.html#skip:F[tofu.Void]", "kind" : "def"}, {"label" : "compose", "tail" : "(): MonoidK[[α]F[G[α]]]", "member" : "cats.MonoidK.compose", "link" : "tofu\/control\/Consume.html#compose[G[_]]:cats.MonoidK[[α]F[G[α]]]", "kind" : "def"}, {"label" : "algebra", "tail" : "(): Monoid[F[A]]", "member" : "cats.MonoidK.algebra", "link" : "tofu\/control\/Consume.html#algebra[A]:cats.Monoid[F[A]]", "kind" : "def"}, {"label" : "sum", "tail" : "(fa: F[A], fb: F[B])(F: Functor[F]): F[Either[A, B]]", "member" : "cats.SemigroupK.sum", "link" : "tofu\/control\/Consume.html#sum[A,B](fa:F[A],fb:F[B])(implicitF:cats.Functor[F]):F[Either[A,B]]", "kind" : "def"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Invariant[[α]F[G[α]]]", "member" : "cats.Invariant.composeContravariant", "link" : "tofu\/control\/Consume.html#composeContravariant[G[_]](implicitevidence$3:cats.Contravariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]F[G[α]]]", "member" : "cats.Invariant.compose", "link" : "tofu\/control\/Consume.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/control\/Consume.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/control\/Consume.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/control\/Consume.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/control\/Consume.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/control\/Consume.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/control\/Consume.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/control\/Consume.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/Consume.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/Consume.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/Consume.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/control\/Consume.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/control\/Consume.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/control\/Consume.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/control\/Consume.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/control\/Consume.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/control\/Consume.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/control\/Consume.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/control\/Consume.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/control\/Consume.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "contramap", "tail" : "(fa: F[A])(f: (B) => A): F[B]", "member" : "cats.Contravariant.contramap", "link" : "tofu\/control\/Consume.html#contramap[A,B](fa:F[A])(f:B=>A):F[B]", "kind" : "abstract def"}, {"label" : "empty", "tail" : "(): F[A]", "member" : "cats.MonoidK.empty", "link" : "tofu\/control\/Consume.html#empty[A]:F[A]", "kind" : "abstract def"}, {"label" : "combineK", "tail" : "(x: F[A], y: F[A]): F[A]", "member" : "cats.SemigroupK.combineK", "link" : "tofu\/control\/Consume.html#combineK[A](x:F[A],y:F[A]):F[A]", "kind" : "abstract def"}, {"label" : "switch", "tail" : "(fa: F[A], fb: F[B]): F[Either[A, B]]", "member" : "tofu.control.Switch.switch", "link" : "tofu\/control\/Consume.html#switch[A,B](fa:F[A],fb:F[B]):F[Either[A,B]]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.control.ContravariantFilter", "object" : "tofu\/control\/ContravariantFilter$.html", "members_object" : [{"label" : "ops", "tail" : "", "member" : "tofu.control.ContravariantFilter.ops", "link" : "tofu\/control\/ContravariantFilter$.html#ops", "kind" : "object"}, {"label" : "AllOps", "tail" : "", "member" : "tofu.control.ContravariantFilter.AllOps", "link" : "tofu\/control\/ContravariantFilter$.html#AllOps[F[_],A]extendsContravariantFilter.Ops[F,A]withContravariant.AllOps[F,A]withOptional.AllOps[F,A]", "kind" : "trait"}, {"label" : "nonInheritedOps", "tail" : "", "member" : "tofu.control.ContravariantFilter.nonInheritedOps", "link" : "tofu\/control\/ContravariantFilter$.html#nonInheritedOps", "kind" : "object"}, {"label" : "ToContravariantFilterOps", "tail" : "", "member" : "tofu.control.ContravariantFilter.ToContravariantFilterOps", "link" : "tofu\/control\/ContravariantFilter$.html#ToContravariantFilterOpsextendsAnyRef", "kind" : "trait"}, {"label" : "Ops", "tail" : "", "member" : "tofu.control.ContravariantFilter.Ops", "link" : "tofu\/control\/ContravariantFilter$.html#Ops[F[_],A]extendsAnyRef", "kind" : "trait"}, {"label" : "apply", "tail" : "(instance: ContravariantFilter[F]): ContravariantFilter[F]", "member" : "tofu.control.ContravariantFilter.apply", "link" : "tofu\/control\/ContravariantFilter$.html#apply[F[_]](implicitinstance:tofu.control.ContravariantFilter[F]):tofu.control.ContravariantFilter[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/control\/ContravariantFilter$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/control\/ContravariantFilter$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/control\/ContravariantFilter$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/control\/ContravariantFilter$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/control\/ContravariantFilter$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/control\/ContravariantFilter$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/control\/ContravariantFilter$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/ContravariantFilter$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/ContravariantFilter$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/ContravariantFilter$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/control\/ContravariantFilter$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/control\/ContravariantFilter$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/control\/ContravariantFilter$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/control\/ContravariantFilter$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/control\/ContravariantFilter$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/control\/ContravariantFilter$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/control\/ContravariantFilter$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/control\/ContravariantFilter$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/control\/ContravariantFilter$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/control\/ContravariantFilter.html", "kind" : "trait", "members_trait" : [{"label" : "contraFilter", "tail" : "(fa: F[A])(f: (A) => Boolean): F[A]", "member" : "tofu.control.ContravariantFilter.contraFilter", "link" : "tofu\/control\/ContravariantFilter.html#contraFilter[A](fa:F[A])(f:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "optional", "tail" : "(fa: F[A]): F[Option[A]]", "member" : "tofu.control.ContravariantFilter.optional", "link" : "tofu\/control\/ContravariantFilter.html#optional[A](fa:F[A]):F[Option[A]]", "kind" : "def"}, {"label" : "contraCollect", "tail" : "(fa: F[A])(f: PartialFunction[B, A]): F[B]", "member" : "tofu.control.ContravariantFilter.contraCollect", "link" : "tofu\/control\/ContravariantFilter.html#contraCollect[A,B](fa:F[A])(f:PartialFunction[B,A]):F[B]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Contravariant[[α]F[G[α]]]", "member" : "cats.Contravariant.composeFunctor", "link" : "tofu\/control\/ContravariantFilter.html#composeFunctor[G[_]](implicitevidence$2:cats.Functor[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "liftContravariant", "tail" : "(f: (A) => B): (F[B]) => F[A]", "member" : "cats.Contravariant.liftContravariant", "link" : "tofu\/control\/ContravariantFilter.html#liftContravariant[A,B](f:A=>B):F[B]=>F[A]", "kind" : "def"}, {"label" : "narrow", "tail" : "(fa: F[A]): F[B]", "member" : "cats.Contravariant.narrow", "link" : "tofu\/control\/ContravariantFilter.html#narrow[A,B<:A](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Contravariant[G]): Functor[[α]F[G[α]]]", "member" : "cats.Contravariant.compose", "link" : "tofu\/control\/ContravariantFilter.html#compose[G[_]](implicitevidence$1:cats.Contravariant[G]):cats.Functor[[α]F[G[α]]]", "kind" : "def"}, {"label" : "imap", "tail" : "(fa: F[A])(f: (A) => B)(fi: (B) => A): F[B]", "member" : "cats.Contravariant.imap", "link" : "tofu\/control\/ContravariantFilter.html#imap[A,B](fa:F[A])(f:A=>B)(fi:B=>A):F[B]", "kind" : "def"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Invariant[[α]F[G[α]]]", "member" : "cats.Invariant.composeContravariant", "link" : "tofu\/control\/ContravariantFilter.html#composeContravariant[G[_]](implicitevidence$3:cats.Contravariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]F[G[α]]]", "member" : "cats.Invariant.compose", "link" : "tofu\/control\/ContravariantFilter.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/control\/ContravariantFilter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/control\/ContravariantFilter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/control\/ContravariantFilter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/control\/ContravariantFilter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/control\/ContravariantFilter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/control\/ContravariantFilter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/control\/ContravariantFilter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/ContravariantFilter.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/ContravariantFilter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/ContravariantFilter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/control\/ContravariantFilter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/control\/ContravariantFilter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/control\/ContravariantFilter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/control\/ContravariantFilter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/control\/ContravariantFilter.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/control\/ContravariantFilter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/control\/ContravariantFilter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/control\/ContravariantFilter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/control\/ContravariantFilter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "contramapFilter", "tail" : "(fa: F[A])(f: (B) => Option[A]): F[B]", "member" : "tofu.control.ContravariantFilter.contramapFilter", "link" : "tofu\/control\/ContravariantFilter.html#contramapFilter[A,B](fa:F[A])(f:B=>Option[A]):F[B]", "kind" : "abstract def"}, {"label" : "contramap", "tail" : "(fa: F[A])(f: (B) => A): F[B]", "member" : "cats.Contravariant.contramap", "link" : "tofu\/control\/ContravariantFilter.html#contramap[A,B](fa:F[A])(f:B=>A):F[B]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.control.Optional", "object" : "tofu\/control\/Optional$.html", "members_object" : [{"label" : "ops", "tail" : "", "member" : "tofu.control.Optional.ops", "link" : "tofu\/control\/Optional$.html#ops", "kind" : "object"}, {"label" : "AllOps", "tail" : "", "member" : "tofu.control.Optional.AllOps", "link" : "tofu\/control\/Optional$.html#AllOps[F[_],A]extendsOptional.Ops[F,A]", "kind" : "trait"}, {"label" : "nonInheritedOps", "tail" : "", "member" : "tofu.control.Optional.nonInheritedOps", "link" : "tofu\/control\/Optional$.html#nonInheritedOps", "kind" : "object"}, {"label" : "ToOptionalOps", "tail" : "", "member" : "tofu.control.Optional.ToOptionalOps", "link" : "tofu\/control\/Optional$.html#ToOptionalOpsextendsAnyRef", "kind" : "trait"}, {"label" : "Ops", "tail" : "", "member" : "tofu.control.Optional.Ops", "link" : "tofu\/control\/Optional$.html#Ops[F[_],A]extendsAnyRef", "kind" : "trait"}, {"label" : "apply", "tail" : "(instance: Optional[F]): Optional[F]", "member" : "tofu.control.Optional.apply", "link" : "tofu\/control\/Optional$.html#apply[F[_]](implicitinstance:tofu.control.Optional[F]):tofu.control.Optional[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/control\/Optional$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/control\/Optional$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/control\/Optional$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/control\/Optional$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/control\/Optional$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/control\/Optional$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/control\/Optional$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/Optional$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/Optional$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/Optional$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/control\/Optional$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/control\/Optional$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/control\/Optional$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/control\/Optional$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/control\/Optional$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/control\/Optional$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/control\/Optional$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/control\/Optional$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/control\/Optional$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/control\/Optional.html", "kind" : "trait", "members_trait" : [{"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "tofu\/control\/Optional.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/control\/Optional.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/control\/Optional.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "tofu\/control\/Optional.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "tofu\/control\/Optional.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "tofu\/control\/Optional.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "tofu\/control\/Optional.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "tofu\/control\/Optional.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "optional", "tail" : "(fa: F[A]): F[Option[A]]", "member" : "tofu.control.Optional.optional", "link" : "tofu\/control\/Optional.html#optional[A](fa:F[A]):F[Option[A]]", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.Any.getClass", "link" : "tofu\/control\/Optional.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.control.Partial", "object" : "tofu\/control\/Partial$.html", "members_object" : [{"label" : "ops", "tail" : "", "member" : "tofu.control.Partial.ops", "link" : "tofu\/control\/Partial$.html#ops", "kind" : "object"}, {"label" : "AllOps", "tail" : "", "member" : "tofu.control.Partial.AllOps", "link" : "tofu\/control\/Partial$.html#AllOps[F[_],A]extendsPartial.Ops[F,A]withSwitch.AllOps[F,A]withInvariant.AllOps[F,A]withMonoidK.AllOps[F,A]withOptional.AllOps[F,A]", "kind" : "trait"}, {"label" : "nonInheritedOps", "tail" : "", "member" : "tofu.control.Partial.nonInheritedOps", "link" : "tofu\/control\/Partial$.html#nonInheritedOps", "kind" : "object"}, {"label" : "ToPartialOps", "tail" : "", "member" : "tofu.control.Partial.ToPartialOps", "link" : "tofu\/control\/Partial$.html#ToPartialOpsextendsAnyRef", "kind" : "trait"}, {"label" : "Ops", "tail" : "", "member" : "tofu.control.Partial.Ops", "link" : "tofu\/control\/Partial$.html#Ops[F[_],A]extendsAnyRef", "kind" : "trait"}, {"label" : "apply", "tail" : "(instance: Partial[F]): Partial[F]", "member" : "tofu.control.Partial.apply", "link" : "tofu\/control\/Partial$.html#apply[F[_]](implicitinstance:tofu.control.Partial[F]):tofu.control.Partial[F]", "kind" : "def"}, {"label" : "byCovariant", "tail" : "(arg0: Functor[F], arg1: MonoidK[F]): Partial[F]", "member" : "tofu.control.PartialInstances.byCovariant", "link" : "tofu\/control\/Partial$.html#byCovariant[F[_]](implicitevidence$1:cats.Functor[F],implicitevidence$2:cats.MonoidK[F]):TC[F]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/control\/Partial$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/control\/Partial$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/control\/Partial$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/control\/Partial$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/control\/Partial$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/control\/Partial$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/control\/Partial$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/Partial$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/Partial$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/Partial$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/control\/Partial$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/control\/Partial$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/control\/Partial$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/control\/Partial$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/control\/Partial$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/control\/Partial$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/control\/Partial$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/control\/Partial$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/control\/Partial$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/control\/Partial.html", "kind" : "trait", "members_trait" : [{"label" : "nothing", "tail" : "(): F[Nothing]", "member" : "tofu.control.Partial.nothing", "link" : "tofu\/control\/Partial.html#nothing:F[Nothing]", "kind" : "def"}, {"label" : "skip", "tail" : "(): F[Void]", "member" : "tofu.control.Partial.skip", "link" : "tofu\/control\/Partial.html#skip:F[tofu.Void]", "kind" : "def"}, {"label" : "optional", "tail" : "(fa: F[A]): F[Option[A]]", "member" : "tofu.control.Partial.optional", "link" : "tofu\/control\/Partial.html#optional[A](fa:F[A]):F[Option[A]]", "kind" : "def"}, {"label" : "compose", "tail" : "(): MonoidK[[α]F[G[α]]]", "member" : "cats.MonoidK.compose", "link" : "tofu\/control\/Partial.html#compose[G[_]]:cats.MonoidK[[α]F[G[α]]]", "kind" : "def"}, {"label" : "algebra", "tail" : "(): Monoid[F[A]]", "member" : "cats.MonoidK.algebra", "link" : "tofu\/control\/Partial.html#algebra[A]:cats.Monoid[F[A]]", "kind" : "def"}, {"label" : "sum", "tail" : "(fa: F[A], fb: F[B])(F: Functor[F]): F[Either[A, B]]", "member" : "cats.SemigroupK.sum", "link" : "tofu\/control\/Partial.html#sum[A,B](fa:F[A],fb:F[B])(implicitF:cats.Functor[F]):F[Either[A,B]]", "kind" : "def"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Invariant[[α]F[G[α]]]", "member" : "cats.Invariant.composeContravariant", "link" : "tofu\/control\/Partial.html#composeContravariant[G[_]](implicitevidence$3:cats.Contravariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]F[G[α]]]", "member" : "cats.Invariant.composeFunctor", "link" : "tofu\/control\/Partial.html#composeFunctor[G[_]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]F[G[α]]]", "member" : "cats.Invariant.compose", "link" : "tofu\/control\/Partial.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/control\/Partial.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/control\/Partial.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/control\/Partial.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/control\/Partial.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/control\/Partial.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/control\/Partial.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/control\/Partial.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/Partial.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/Partial.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/Partial.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/control\/Partial.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/control\/Partial.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/control\/Partial.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/control\/Partial.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/control\/Partial.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/control\/Partial.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/control\/Partial.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/control\/Partial.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/control\/Partial.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "empty", "tail" : "(): F[A]", "member" : "cats.MonoidK.empty", "link" : "tofu\/control\/Partial.html#empty[A]:F[A]", "kind" : "abstract def"}, {"label" : "combineK", "tail" : "(x: F[A], y: F[A]): F[A]", "member" : "cats.SemigroupK.combineK", "link" : "tofu\/control\/Partial.html#combineK[A](x:F[A],y:F[A]):F[A]", "kind" : "abstract def"}, {"label" : "switch", "tail" : "(fa: F[A], fb: F[B]): F[Either[A, B]]", "member" : "tofu.control.Switch.switch", "link" : "tofu\/control\/Partial.html#switch[A,B](fa:F[A],fb:F[B]):F[Either[A,B]]", "kind" : "abstract def"}, {"label" : "imap", "tail" : "(fa: F[A])(f: (A) => B)(g: (B) => A): F[B]", "member" : "cats.Invariant.imap", "link" : "tofu\/control\/Partial.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.control.PartialInstances", "trait" : "tofu\/control\/PartialInstances.html", "kind" : "trait", "members_trait" : [{"label" : "byCovariant", "tail" : "(arg0: Functor[F], arg1: MonoidK[F]): TC[F]", "member" : "tofu.control.PartialInstances.byCovariant", "link" : "tofu\/control\/PartialInstances.html#byCovariant[F[_]](implicitevidence$1:cats.Functor[F],implicitevidence$2:cats.MonoidK[F]):TC[F]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/control\/PartialInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/control\/PartialInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/control\/PartialInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/control\/PartialInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/control\/PartialInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/control\/PartialInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/control\/PartialInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/PartialInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/PartialInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/PartialInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/control\/PartialInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/control\/PartialInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/control\/PartialInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/control\/PartialInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/control\/PartialInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/control\/PartialInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/control\/PartialInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/control\/PartialInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/control\/PartialInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "tofu.control.Selective", "object" : "tofu\/control\/Selective$.html", "members_object" : [{"label" : "ops", "tail" : "", "member" : "tofu.control.Selective.ops", "link" : "tofu\/control\/Selective$.html#ops", "kind" : "object"}, {"label" : "AllOps", "tail" : "", "member" : "tofu.control.Selective.AllOps", "link" : "tofu\/control\/Selective$.html#AllOps[F[_],A]extendsSelective.Ops[F,A]withApplicative.AllOps[F,A]", "kind" : "trait"}, {"label" : "nonInheritedOps", "tail" : "", "member" : "tofu.control.Selective.nonInheritedOps", "link" : "tofu\/control\/Selective$.html#nonInheritedOps", "kind" : "object"}, {"label" : "ToSelectiveOps", "tail" : "", "member" : "tofu.control.Selective.ToSelectiveOps", "link" : "tofu\/control\/Selective$.html#ToSelectiveOpsextendsAnyRef", "kind" : "trait"}, {"label" : "Ops", "tail" : "", "member" : "tofu.control.Selective.Ops", "link" : "tofu\/control\/Selective$.html#Ops[F[_],A]extendsAnyRef", "kind" : "trait"}, {"label" : "apply", "tail" : "(instance: Selective[F]): Selective[F]", "member" : "tofu.control.Selective.apply", "link" : "tofu\/control\/Selective$.html#apply[F[_]](implicitinstance:tofu.control.Selective[F]):tofu.control.Selective[F]", "kind" : "def"}, {"label" : "selectiveOverMonad", "tail" : "(arg0: Monad[F]): Selective[F]", "member" : "tofu.control.SelectiveInstances.selectiveOverMonad", "link" : "tofu\/control\/Selective$.html#selectiveOverMonad[F[_]](implicitevidence$1:cats.Monad[F]):tofu.control.Selective[F]", "kind" : "implicit final def"}, {"label" : "selectiveWriterT", "tail" : "(arg0: Selective[F], arg1: Monoid[W]): Selective[[γ$3$]WriterT[F, W, γ$3$]]", "member" : "tofu.control.SelectiveInstances2.selectiveWriterT", "link" : "tofu\/control\/Selective$.html#selectiveWriterT[F[_],W](implicitevidence$5:tofu.control.Selective[F],implicitevidence$6:cats.Monoid[W]):tofu.control.Selective[[γ$3$]cats.data.WriterT[F,W,γ$3$]]", "kind" : "implicit final def"}, {"label" : "selectiveReaderT", "tail" : "(arg0: Selective[F]): Selective[[γ$2$]Kleisli[F, R, γ$2$]]", "member" : "tofu.control.SelectiveInstances2.selectiveReaderT", "link" : "tofu\/control\/Selective$.html#selectiveReaderT[F[_],R](implicitevidence$4:tofu.control.Selective[F]):tofu.control.Selective[[γ$2$]cats.data.Kleisli[F,R,γ$2$]]", "kind" : "implicit final def"}, {"label" : "selectiveEitherT", "tail" : "(arg0: Selective[F]): Selective[[γ$1$]EitherT[F, E, γ$1$]]", "member" : "tofu.control.SelectiveInstances2.selectiveEitherT", "link" : "tofu\/control\/Selective$.html#selectiveEitherT[F[_],E](implicitevidence$3:tofu.control.Selective[F]):tofu.control.Selective[[γ$1$]cats.data.EitherT[F,E,γ$1$]]", "kind" : "implicit final def"}, {"label" : "selectiveOptionT", "tail" : "(arg0: Selective[F]): Selective[[β$0$]OptionT[F, β$0$]]", "member" : "tofu.control.SelectiveInstances2.selectiveOptionT", "link" : "tofu\/control\/Selective$.html#selectiveOptionT[F[_]](implicitevidence$2:tofu.control.Selective[F]):tofu.control.Selective[[β$0$]cats.data.OptionT[F,β$0$]]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/control\/Selective$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/control\/Selective$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/control\/Selective$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/control\/Selective$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/control\/Selective$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/control\/Selective$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/control\/Selective$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/Selective$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/Selective$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/Selective$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/control\/Selective$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/control\/Selective$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/control\/Selective$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/control\/Selective$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/control\/Selective$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/control\/Selective$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/control\/Selective$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/control\/Selective$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/control\/Selective$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/control\/Selective.html", "kind" : "trait", "members_trait" : [{"label" : "optionMonoid", "tail" : "(): Monoid[F[Option[A]]]", "member" : "tofu.control.Selective.optionMonoid", "link" : "tofu\/control\/Selective.html#optionMonoid[A]:cats.Monoid[F[Option[A]]]", "kind" : "def"}, {"label" : "unlesss_", "tail" : "(fb: F[Boolean])(fa: => F[A]): F[Unit]", "member" : "tofu.control.Selective.unlesss_", "link" : "tofu\/control\/Selective.html#unlesss_[A](fb:F[Boolean])(fa:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "whens_", "tail" : "(fb: F[Boolean])(fa: => F[A]): F[Unit]", "member" : "tofu.control.Selective.whens_", "link" : "tofu\/control\/Selective.html#whens_[A](fb:F[Boolean])(fa:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "unlesss", "tail" : "(fb: F[Boolean])(fa: => F[A]): F[Option[A]]", "member" : "tofu.control.Selective.unlesss", "link" : "tofu\/control\/Selective.html#unlesss[A](fb:F[Boolean])(fa:=>F[A]):F[Option[A]]", "kind" : "def"}, {"label" : "whens", "tail" : "(fb: F[Boolean])(fa: => F[A]): F[Option[A]]", "member" : "tofu.control.Selective.whens", "link" : "tofu\/control\/Selective.html#whens[A](fb:F[Boolean])(fa:=>F[A]):F[Option[A]]", "kind" : "def"}, {"label" : "orElses", "tail" : "(fx: F[Option[A]])(fy: => F[Option[A]]): F[Option[A]]", "member" : "tofu.control.Selective.orElses", "link" : "tofu\/control\/Selective.html#orElses[A](fx:F[Option[A]])(fy:=>F[Option[A]]):F[Option[A]]", "kind" : "def"}, {"label" : "selectRight", "tail" : "(fb: F[A], fo: F[Option[A]]): F[A]", "member" : "tofu.control.Selective.selectRight", "link" : "tofu\/control\/Selective.html#selectRight[A](fb:F[A],fo:F[Option[A]]):F[A]", "kind" : "def"}, {"label" : "select", "tail" : "(fo: F[Option[A]])(fa: => F[A]): F[A]", "member" : "tofu.control.Selective.select", "link" : "tofu\/control\/Selective.html#select[A](fo:F[Option[A]])(fa:=>F[A]):F[A]", "kind" : "def"}, {"label" : "whenA", "tail" : "(cond: Boolean)(f: => F[A]): F[Unit]", "member" : "cats.Applicative.whenA", "link" : "tofu\/control\/Selective.html#whenA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "unlessA", "tail" : "(cond: Boolean)(f: => F[A]): F[Unit]", "member" : "cats.Applicative.unlessA", "link" : "tofu\/control\/Selective.html#unlessA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "composeContravariantMonoidal", "tail" : "(arg0: ContravariantMonoidal[G]): ContravariantMonoidal[[α]F[G[α]]]", "member" : "cats.Applicative.composeContravariantMonoidal", "link" : "tofu\/control\/Selective.html#composeContravariantMonoidal[G[_]](implicitevidence$2:cats.ContravariantMonoidal[G]):cats.ContravariantMonoidal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Applicative[G]): Applicative[[α]F[G[α]]]", "member" : "cats.Applicative.compose", "link" : "tofu\/control\/Selective.html#compose[G[_]](implicitevidence$1:cats.Applicative[G]):cats.Applicative[[α]F[G[α]]]", "kind" : "def"}, {"label" : "replicateA", "tail" : "(n: Int, fa: F[A]): F[List[A]]", "member" : "cats.Applicative.replicateA", "link" : "tofu\/control\/Selective.html#replicateA[A](n:Int,fa:F[A]):F[List[A]]", "kind" : "def"}, {"label" : "map", "tail" : "(fa: F[A])(f: (A) => B): F[B]", "member" : "cats.Applicative.map", "link" : "tofu\/control\/Selective.html#map[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "def"}, {"label" : "unit", "tail" : "(): F[Unit]", "member" : "cats.Applicative.unit", "link" : "tofu\/control\/Selective.html#unit:F[Unit]", "kind" : "def"}, {"label" : "point", "tail" : "(a: A): F[A]", "member" : "cats.InvariantMonoidal.point", "link" : "tofu\/control\/Selective.html#point[A](a:A):F[A]", "kind" : "def"}, {"label" : "ifA", "tail" : "(fcond: F[Boolean])(ifTrue: F[A], ifFalse: F[A]): F[A]", "member" : "cats.Apply.ifA", "link" : "tofu\/control\/Selective.html#ifA[A](fcond:F[Boolean])(ifTrue:F[A],ifFalse:F[A]):F[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Apply[G]): Apply[[α]F[G[α]]]", "member" : "cats.Apply.compose", "link" : "tofu\/control\/Selective.html#compose[G[_]](implicitevidence$1:cats.Apply[G]):cats.Apply[[α]F[G[α]]]", "kind" : "def"}, {"label" : "map2Eval", "tail" : "(fa: F[A], fb: Eval[F[B]])(f: (A, B) => Z): Eval[F[Z]]", "member" : "cats.Apply.map2Eval", "link" : "tofu\/control\/Selective.html#map2Eval[A,B,Z](fa:F[A],fb:cats.Eval[F[B]])(f:(A,B)=>Z):cats.Eval[F[Z]]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa: F[A], fb: F[B])(f: (A, B) => Z): F[Z]", "member" : "cats.Apply.map2", "link" : "tofu\/control\/Selective.html#map2[A,B,Z](fa:F[A],fb:F[B])(f:(A,B)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap2", "tail" : "(ff: F[(A, B) => Z])(fa: F[A], fb: F[B]): F[Z]", "member" : "cats.Apply.ap2", "link" : "tofu\/control\/Selective.html#ap2[A,B,Z](ff:F[(A,B)=>Z])(fa:F[A],fb:F[B]):F[Z]", "kind" : "def"}, {"label" : "<*", "tail" : "(fa: F[A])(fb: F[B]): F[A]", "member" : "cats.Apply.<*", "link" : "tofu\/control\/Selective.html#<*[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(fa: F[A])(fb: F[B]): F[B]", "member" : "cats.Apply.*>", "link" : "tofu\/control\/Selective.html#*>[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(ff: F[(A) => B])(fa: F[A]): F[B]", "member" : "cats.Apply.<*>", "link" : "tofu\/control\/Selective.html#<*>[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "product", "tail" : "(fa: F[A], fb: F[B]): F[(A, B)]", "member" : "cats.Apply.product", "link" : "tofu\/control\/Selective.html#product[A,B](fa:F[A],fb:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "productL", "tail" : "(fa: F[A])(fb: F[B]): F[A]", "member" : "cats.Apply.productL", "link" : "tofu\/control\/Selective.html#productL[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "def"}, {"label" : "productR", "tail" : "(fa: F[A])(fb: F[B]): F[B]", "member" : "cats.Apply.productR", "link" : "tofu\/control\/Selective.html#productR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "def"}, {"label" : "tuple22", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20], f21: F[A21]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.ApplyArityFunctions.tuple22", "link" : "tofu\/control\/Selective.html#tuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "map22", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20], f21: F[A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map22", "link" : "tofu\/control\/Selective.html#map22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap22", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20], f21: F[A21]): F[Z]", "member" : "cats.ApplyArityFunctions.ap22", "link" : "tofu\/control\/Selective.html#ap22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[Z]", "kind" : "def"}, {"label" : "tuple21", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.ApplyArityFunctions.tuple21", "link" : "tofu\/control\/Selective.html#tuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "map21", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map21", "link" : "tofu\/control\/Selective.html#map21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap21", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20]): F[Z]", "member" : "cats.ApplyArityFunctions.ap21", "link" : "tofu\/control\/Selective.html#ap21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[Z]", "kind" : "def"}, {"label" : "tuple20", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.ApplyArityFunctions.tuple20", "link" : "tofu\/control\/Selective.html#tuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "map20", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map20", "link" : "tofu\/control\/Selective.html#map20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap20", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19]): F[Z]", "member" : "cats.ApplyArityFunctions.ap20", "link" : "tofu\/control\/Selective.html#ap20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[Z]", "kind" : "def"}, {"label" : "tuple19", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.ApplyArityFunctions.tuple19", "link" : "tofu\/control\/Selective.html#tuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "map19", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map19", "link" : "tofu\/control\/Selective.html#map19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap19", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18]): F[Z]", "member" : "cats.ApplyArityFunctions.ap19", "link" : "tofu\/control\/Selective.html#ap19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[Z]", "kind" : "def"}, {"label" : "tuple18", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.ApplyArityFunctions.tuple18", "link" : "tofu\/control\/Selective.html#tuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "map18", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map18", "link" : "tofu\/control\/Selective.html#map18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap18", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17]): F[Z]", "member" : "cats.ApplyArityFunctions.ap18", "link" : "tofu\/control\/Selective.html#ap18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[Z]", "kind" : "def"}, {"label" : "tuple17", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.ApplyArityFunctions.tuple17", "link" : "tofu\/control\/Selective.html#tuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "map17", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map17", "link" : "tofu\/control\/Selective.html#map17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap17", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16]): F[Z]", "member" : "cats.ApplyArityFunctions.ap17", "link" : "tofu\/control\/Selective.html#ap17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[Z]", "kind" : "def"}, {"label" : "tuple16", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.ApplyArityFunctions.tuple16", "link" : "tofu\/control\/Selective.html#tuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "map16", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map16", "link" : "tofu\/control\/Selective.html#map16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap16", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15]): F[Z]", "member" : "cats.ApplyArityFunctions.ap16", "link" : "tofu\/control\/Selective.html#ap16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[Z]", "kind" : "def"}, {"label" : "tuple15", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.ApplyArityFunctions.tuple15", "link" : "tofu\/control\/Selective.html#tuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "map15", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map15", "link" : "tofu\/control\/Selective.html#map15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap15", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14]): F[Z]", "member" : "cats.ApplyArityFunctions.ap15", "link" : "tofu\/control\/Selective.html#ap15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[Z]", "kind" : "def"}, {"label" : "tuple14", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.ApplyArityFunctions.tuple14", "link" : "tofu\/control\/Selective.html#tuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "map14", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map14", "link" : "tofu\/control\/Selective.html#map14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap14", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13]): F[Z]", "member" : "cats.ApplyArityFunctions.ap14", "link" : "tofu\/control\/Selective.html#ap14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[Z]", "kind" : "def"}, {"label" : "tuple13", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.ApplyArityFunctions.tuple13", "link" : "tofu\/control\/Selective.html#tuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "map13", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map13", "link" : "tofu\/control\/Selective.html#map13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap13", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12]): F[Z]", "member" : "cats.ApplyArityFunctions.ap13", "link" : "tofu\/control\/Selective.html#ap13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[Z]", "kind" : "def"}, {"label" : "tuple12", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.ApplyArityFunctions.tuple12", "link" : "tofu\/control\/Selective.html#tuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "map12", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map12", "link" : "tofu\/control\/Selective.html#map12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap12", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11]): F[Z]", "member" : "cats.ApplyArityFunctions.ap12", "link" : "tofu\/control\/Selective.html#ap12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[Z]", "kind" : "def"}, {"label" : "tuple11", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.ApplyArityFunctions.tuple11", "link" : "tofu\/control\/Selective.html#tuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "map11", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map11", "link" : "tofu\/control\/Selective.html#map11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap11", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10]): F[Z]", "member" : "cats.ApplyArityFunctions.ap11", "link" : "tofu\/control\/Selective.html#ap11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[Z]", "kind" : "def"}, {"label" : "tuple10", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.ApplyArityFunctions.tuple10", "link" : "tofu\/control\/Selective.html#tuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "map10", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map10", "link" : "tofu\/control\/Selective.html#map10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap10", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9]): F[Z]", "member" : "cats.ApplyArityFunctions.ap10", "link" : "tofu\/control\/Selective.html#ap10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[Z]", "kind" : "def"}, {"label" : "tuple9", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.ApplyArityFunctions.tuple9", "link" : "tofu\/control\/Selective.html#tuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "map9", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map9", "link" : "tofu\/control\/Selective.html#map9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap9", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8]): F[Z]", "member" : "cats.ApplyArityFunctions.ap9", "link" : "tofu\/control\/Selective.html#ap9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[Z]", "kind" : "def"}, {"label" : "tuple8", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7]): F[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.ApplyArityFunctions.tuple8", "link" : "tofu\/control\/Selective.html#tuple8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "map8", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map8", "link" : "tofu\/control\/Selective.html#map8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap8", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7]): F[Z]", "member" : "cats.ApplyArityFunctions.ap8", "link" : "tofu\/control\/Selective.html#ap8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[Z]", "kind" : "def"}, {"label" : "tuple7", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6]): F[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.ApplyArityFunctions.tuple7", "link" : "tofu\/control\/Selective.html#tuple7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "map7", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6])(f: (A0, A1, A2, A3, A4, A5, A6) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map7", "link" : "tofu\/control\/Selective.html#map7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap7", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6]): F[Z]", "member" : "cats.ApplyArityFunctions.ap7", "link" : "tofu\/control\/Selective.html#ap7[A0,A1,A2,A3,A4,A5,A6,Z](f:F[(A0,A1,A2,A3,A4,A5,A6)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[Z]", "kind" : "def"}, {"label" : "tuple6", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5]): F[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.ApplyArityFunctions.tuple6", "link" : "tofu\/control\/Selective.html#tuple6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[(A0,A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "map6", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5])(f: (A0, A1, A2, A3, A4, A5) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map6", "link" : "tofu\/control\/Selective.html#map6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5])(f:(A0,A1,A2,A3,A4,A5)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap6", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5]): F[Z]", "member" : "cats.ApplyArityFunctions.ap6", "link" : "tofu\/control\/Selective.html#ap6[A0,A1,A2,A3,A4,A5,Z](f:F[(A0,A1,A2,A3,A4,A5)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[Z]", "kind" : "def"}, {"label" : "tuple5", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4]): F[(A0, A1, A2, A3, A4)]", "member" : "cats.ApplyArityFunctions.tuple5", "link" : "tofu\/control\/Selective.html#tuple5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[(A0,A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "map5", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4])(f: (A0, A1, A2, A3, A4) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map5", "link" : "tofu\/control\/Selective.html#map5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4])(f:(A0,A1,A2,A3,A4)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap5", "tail" : "(f: F[(A0, A1, A2, A3, A4) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4]): F[Z]", "member" : "cats.ApplyArityFunctions.ap5", "link" : "tofu\/control\/Selective.html#ap5[A0,A1,A2,A3,A4,Z](f:F[(A0,A1,A2,A3,A4)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[Z]", "kind" : "def"}, {"label" : "tuple4", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3]): F[(A0, A1, A2, A3)]", "member" : "cats.ApplyArityFunctions.tuple4", "link" : "tofu\/control\/Selective.html#tuple4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[(A0,A1,A2,A3)]", "kind" : "def"}, {"label" : "map4", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3])(f: (A0, A1, A2, A3) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map4", "link" : "tofu\/control\/Selective.html#map4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3])(f:(A0,A1,A2,A3)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap4", "tail" : "(f: F[(A0, A1, A2, A3) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3]): F[Z]", "member" : "cats.ApplyArityFunctions.ap4", "link" : "tofu\/control\/Selective.html#ap4[A0,A1,A2,A3,Z](f:F[(A0,A1,A2,A3)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[Z]", "kind" : "def"}, {"label" : "tuple3", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2]): F[(A0, A1, A2)]", "member" : "cats.ApplyArityFunctions.tuple3", "link" : "tofu\/control\/Selective.html#tuple3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2]):F[(A0,A1,A2)]", "kind" : "def"}, {"label" : "map3", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2])(f: (A0, A1, A2) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map3", "link" : "tofu\/control\/Selective.html#map3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2])(f:(A0,A1,A2)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap3", "tail" : "(f: F[(A0, A1, A2) => Z])(f0: F[A0], f1: F[A1], f2: F[A2]): F[Z]", "member" : "cats.ApplyArityFunctions.ap3", "link" : "tofu\/control\/Selective.html#ap3[A0,A1,A2,Z](f:F[(A0,A1,A2)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2]):F[Z]", "kind" : "def"}, {"label" : "tuple2", "tail" : "(f1: F[A], f2: F[B]): F[(A, B)]", "member" : "cats.ApplyArityFunctions.tuple2", "link" : "tofu\/control\/Selective.html#tuple2[A,B](f1:F[A],f2:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "composeApply", "tail" : "(arg0: Apply[G]): InvariantSemigroupal[[α]F[G[α]]]", "member" : "cats.InvariantSemigroupal.composeApply", "link" : "tofu\/control\/Selective.html#composeApply[G[_]](implicitevidence$1:cats.Apply[G]):cats.InvariantSemigroupal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Contravariant[[α]F[G[α]]]", "member" : "cats.Functor.composeContravariant", "link" : "tofu\/control\/Selective.html#composeContravariant[G[_]](implicitevidence$2:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Functor[G]): Functor[[α]F[G[α]]]", "member" : "cats.Functor.compose", "link" : "tofu\/control\/Selective.html#compose[G[_]](implicitevidence$1:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "def"}, {"label" : "ifF", "tail" : "(fb: F[Boolean])(ifTrue: => A, ifFalse: => A): F[A]", "member" : "cats.Functor.ifF", "link" : "tofu\/control\/Selective.html#ifF[A](fb:F[Boolean])(ifTrue:=>A,ifFalse:=>A):F[A]", "kind" : "def"}, {"label" : "unzip", "tail" : "(fab: F[(A, B)]): (F[A], F[B])", "member" : "cats.Functor.unzip", "link" : "tofu\/control\/Selective.html#unzip[A,B](fab:F[(A,B)]):(F[A],F[B])", "kind" : "def"}, {"label" : "tupleRight", "tail" : "(fa: F[A], b: B): F[(A, B)]", "member" : "cats.Functor.tupleRight", "link" : "tofu\/control\/Selective.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "def"}, {"label" : "tupleLeft", "tail" : "(fa: F[A], b: B): F[(B, A)]", "member" : "cats.Functor.tupleLeft", "link" : "tofu\/control\/Selective.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "def"}, {"label" : "as", "tail" : "(fa: F[A], b: B): F[B]", "member" : "cats.Functor.as", "link" : "tofu\/control\/Selective.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(fa: F[A])(f: (A) => B): F[(A, B)]", "member" : "cats.Functor.fproduct", "link" : "tofu\/control\/Selective.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "def"}, {"label" : "void", "tail" : "(fa: F[A]): F[Unit]", "member" : "cats.Functor.void", "link" : "tofu\/control\/Selective.html#void[A](fa:F[A]):F[Unit]", "kind" : "def"}, {"label" : "lift", "tail" : "(f: (A) => B): (F[A]) => F[B]", "member" : "cats.Functor.lift", "link" : "tofu\/control\/Selective.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "widen", "tail" : "(fa: F[A]): F[B]", "member" : "cats.Functor.widen", "link" : "tofu\/control\/Selective.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: F[A])(f: (A) => B): F[B]", "member" : "cats.Functor.fmap", "link" : "tofu\/control\/Selective.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: F[A])(f: (A) => B)(g: (B) => A): F[B]", "member" : "cats.Functor.imap", "link" : "tofu\/control\/Selective.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]F[G[α]]]", "member" : "cats.Invariant.composeFunctor", "link" : "tofu\/control\/Selective.html#composeFunctor[G[_]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]F[G[α]]]", "member" : "cats.Invariant.compose", "link" : "tofu\/control\/Selective.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/control\/Selective.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/control\/Selective.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/control\/Selective.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/control\/Selective.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/control\/Selective.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/control\/Selective.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/control\/Selective.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/Selective.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/Selective.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/Selective.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/control\/Selective.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/control\/Selective.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/control\/Selective.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/control\/Selective.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/control\/Selective.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/control\/Selective.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/control\/Selective.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/control\/Selective.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/control\/Selective.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "selectAp", "tail" : "(fe: F[Either[A, B]])(ff: => F[(A) => B]): F[B]", "member" : "tofu.control.Selective.selectAp", "link" : "tofu\/control\/Selective.html#selectAp[A,B](fe:F[Either[A,B]])(ff:=>F[A=>B]):F[B]", "kind" : "abstract def"}, {"label" : "pure", "tail" : "(x: A): F[A]", "member" : "cats.Applicative.pure", "link" : "tofu\/control\/Selective.html#pure[A](x:A):F[A]", "kind" : "abstract def"}, {"label" : "ap", "tail" : "(ff: F[(A) => B])(fa: F[A]): F[B]", "member" : "cats.Apply.ap", "link" : "tofu\/control\/Selective.html#ap[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.control.SelectiveInstances", "trait" : "tofu\/control\/SelectiveInstances.html", "kind" : "trait", "members_trait" : [{"label" : "selectiveOverMonad", "tail" : "(arg0: Monad[F]): Selective[F]", "member" : "tofu.control.SelectiveInstances.selectiveOverMonad", "link" : "tofu\/control\/SelectiveInstances.html#selectiveOverMonad[F[_]](implicitevidence$1:cats.Monad[F]):tofu.control.Selective[F]", "kind" : "implicit final def"}, {"label" : "selectiveWriterT", "tail" : "(arg0: Selective[F], arg1: Monoid[W]): Selective[[γ$3$]WriterT[F, W, γ$3$]]", "member" : "tofu.control.SelectiveInstances2.selectiveWriterT", "link" : "tofu\/control\/SelectiveInstances.html#selectiveWriterT[F[_],W](implicitevidence$5:tofu.control.Selective[F],implicitevidence$6:cats.Monoid[W]):tofu.control.Selective[[γ$3$]cats.data.WriterT[F,W,γ$3$]]", "kind" : "implicit final def"}, {"label" : "selectiveReaderT", "tail" : "(arg0: Selective[F]): Selective[[γ$2$]Kleisli[F, R, γ$2$]]", "member" : "tofu.control.SelectiveInstances2.selectiveReaderT", "link" : "tofu\/control\/SelectiveInstances.html#selectiveReaderT[F[_],R](implicitevidence$4:tofu.control.Selective[F]):tofu.control.Selective[[γ$2$]cats.data.Kleisli[F,R,γ$2$]]", "kind" : "implicit final def"}, {"label" : "selectiveEitherT", "tail" : "(arg0: Selective[F]): Selective[[γ$1$]EitherT[F, E, γ$1$]]", "member" : "tofu.control.SelectiveInstances2.selectiveEitherT", "link" : "tofu\/control\/SelectiveInstances.html#selectiveEitherT[F[_],E](implicitevidence$3:tofu.control.Selective[F]):tofu.control.Selective[[γ$1$]cats.data.EitherT[F,E,γ$1$]]", "kind" : "implicit final def"}, {"label" : "selectiveOptionT", "tail" : "(arg0: Selective[F]): Selective[[β$0$]OptionT[F, β$0$]]", "member" : "tofu.control.SelectiveInstances2.selectiveOptionT", "link" : "tofu\/control\/SelectiveInstances.html#selectiveOptionT[F[_]](implicitevidence$2:tofu.control.Selective[F]):tofu.control.Selective[[β$0$]cats.data.OptionT[F,β$0$]]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/control\/SelectiveInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/control\/SelectiveInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/control\/SelectiveInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/control\/SelectiveInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/control\/SelectiveInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/control\/SelectiveInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/control\/SelectiveInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/SelectiveInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/SelectiveInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/SelectiveInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/control\/SelectiveInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/control\/SelectiveInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/control\/SelectiveInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/control\/SelectiveInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/control\/SelectiveInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/control\/SelectiveInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/control\/SelectiveInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/control\/SelectiveInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/control\/SelectiveInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "tofu.control.SelectiveInstances2", "trait" : "tofu\/control\/SelectiveInstances2.html", "kind" : "trait", "members_trait" : [{"label" : "selectiveWriterT", "tail" : "(arg0: Selective[F], arg1: Monoid[W]): Selective[[γ$3$]WriterT[F, W, γ$3$]]", "member" : "tofu.control.SelectiveInstances2.selectiveWriterT", "link" : "tofu\/control\/SelectiveInstances2.html#selectiveWriterT[F[_],W](implicitevidence$5:tofu.control.Selective[F],implicitevidence$6:cats.Monoid[W]):tofu.control.Selective[[γ$3$]cats.data.WriterT[F,W,γ$3$]]", "kind" : "implicit final def"}, {"label" : "selectiveReaderT", "tail" : "(arg0: Selective[F]): Selective[[γ$2$]Kleisli[F, R, γ$2$]]", "member" : "tofu.control.SelectiveInstances2.selectiveReaderT", "link" : "tofu\/control\/SelectiveInstances2.html#selectiveReaderT[F[_],R](implicitevidence$4:tofu.control.Selective[F]):tofu.control.Selective[[γ$2$]cats.data.Kleisli[F,R,γ$2$]]", "kind" : "implicit final def"}, {"label" : "selectiveEitherT", "tail" : "(arg0: Selective[F]): Selective[[γ$1$]EitherT[F, E, γ$1$]]", "member" : "tofu.control.SelectiveInstances2.selectiveEitherT", "link" : "tofu\/control\/SelectiveInstances2.html#selectiveEitherT[F[_],E](implicitevidence$3:tofu.control.Selective[F]):tofu.control.Selective[[γ$1$]cats.data.EitherT[F,E,γ$1$]]", "kind" : "implicit final def"}, {"label" : "selectiveOptionT", "tail" : "(arg0: Selective[F]): Selective[[β$0$]OptionT[F, β$0$]]", "member" : "tofu.control.SelectiveInstances2.selectiveOptionT", "link" : "tofu\/control\/SelectiveInstances2.html#selectiveOptionT[F[_]](implicitevidence$2:tofu.control.Selective[F]):tofu.control.Selective[[β$0$]cats.data.OptionT[F,β$0$]]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/control\/SelectiveInstances2.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/control\/SelectiveInstances2.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/control\/SelectiveInstances2.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/control\/SelectiveInstances2.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/control\/SelectiveInstances2.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/control\/SelectiveInstances2.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/control\/SelectiveInstances2.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/SelectiveInstances2.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/SelectiveInstances2.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/SelectiveInstances2.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/control\/SelectiveInstances2.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/control\/SelectiveInstances2.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/control\/SelectiveInstances2.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/control\/SelectiveInstances2.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/control\/SelectiveInstances2.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/control\/SelectiveInstances2.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/control\/SelectiveInstances2.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/control\/SelectiveInstances2.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/control\/SelectiveInstances2.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "tofu.control.Switch", "object" : "tofu\/control\/Switch$.html", "members_object" : [{"label" : "ops", "tail" : "", "member" : "tofu.control.Switch.ops", "link" : "tofu\/control\/Switch$.html#ops", "kind" : "object"}, {"label" : "AllOps", "tail" : "", "member" : "tofu.control.Switch.AllOps", "link" : "tofu\/control\/Switch$.html#AllOps[F[_],A]extendsSwitch.Ops[F,A]withInvariant.AllOps[F,A]", "kind" : "trait"}, {"label" : "nonInheritedOps", "tail" : "", "member" : "tofu.control.Switch.nonInheritedOps", "link" : "tofu\/control\/Switch$.html#nonInheritedOps", "kind" : "object"}, {"label" : "ToSwitchOps", "tail" : "", "member" : "tofu.control.Switch.ToSwitchOps", "link" : "tofu\/control\/Switch$.html#ToSwitchOpsextendsAnyRef", "kind" : "trait"}, {"label" : "Ops", "tail" : "", "member" : "tofu.control.Switch.Ops", "link" : "tofu\/control\/Switch$.html#Ops[F[_],A]extendsAnyRef", "kind" : "trait"}, {"label" : "apply", "tail" : "(instance: Switch[F]): Switch[F]", "member" : "tofu.control.Switch.apply", "link" : "tofu\/control\/Switch$.html#apply[F[_]](implicitinstance:tofu.control.Switch[F]):tofu.control.Switch[F]", "kind" : "def"}, {"label" : "byCovariant", "tail" : "(arg0: Functor[F], arg1: MonoidK[F]): Switch[F]", "member" : "tofu.control.PartialInstances.byCovariant", "link" : "tofu\/control\/Switch$.html#byCovariant[F[_]](implicitevidence$1:cats.Functor[F],implicitevidence$2:cats.MonoidK[F]):TC[F]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/control\/Switch$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/control\/Switch$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/control\/Switch$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/control\/Switch$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/control\/Switch$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/control\/Switch$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/control\/Switch$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/Switch$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/Switch$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/Switch$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/control\/Switch$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/control\/Switch$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/control\/Switch$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/control\/Switch$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/control\/Switch$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/control\/Switch$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/control\/Switch$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/control\/Switch$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/control\/Switch$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/control\/Switch.html", "kind" : "trait", "members_trait" : [{"label" : "nothing", "tail" : "(): F[Nothing]", "member" : "tofu.control.Switch.nothing", "link" : "tofu\/control\/Switch.html#nothing:F[Nothing]", "kind" : "def"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Invariant[[α]F[G[α]]]", "member" : "cats.Invariant.composeContravariant", "link" : "tofu\/control\/Switch.html#composeContravariant[G[_]](implicitevidence$3:cats.Contravariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]F[G[α]]]", "member" : "cats.Invariant.composeFunctor", "link" : "tofu\/control\/Switch.html#composeFunctor[G[_]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]F[G[α]]]", "member" : "cats.Invariant.compose", "link" : "tofu\/control\/Switch.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/control\/Switch.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/control\/Switch.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/control\/Switch.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/control\/Switch.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/control\/Switch.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/control\/Switch.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/control\/Switch.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/Switch.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/Switch.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/Switch.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/control\/Switch.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/control\/Switch.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/control\/Switch.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/control\/Switch.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/control\/Switch.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/control\/Switch.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/control\/Switch.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/control\/Switch.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/control\/Switch.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "skip", "tail" : "(): F[Void]", "member" : "tofu.control.Switch.skip", "link" : "tofu\/control\/Switch.html#skip:F[tofu.Void]", "kind" : "abstract def"}, {"label" : "switch", "tail" : "(fa: F[A], fb: F[B]): F[Either[A, B]]", "member" : "tofu.control.Switch.switch", "link" : "tofu\/control\/Switch.html#switch[A,B](fa:F[A],fb:F[B]):F[Either[A,B]]", "kind" : "abstract def"}, {"label" : "imap", "tail" : "(fa: F[A])(f: (A) => B)(g: (B) => A): F[B]", "member" : "cats.Invariant.imap", "link" : "tofu\/control\/Switch.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "abstract def"}], "shortDescription" : "monoidal with respect to Either"}], "tofu.optics.data" : [{"name" : "tofu.optics.data.Constant", "object" : "tofu\/optics\/data\/Constant$.html", "members_object" : [{"label" : "applicative", "tail" : "(arg0: Monoid[X]): Applicative[[β$0$]Constant[X, β$0$]]", "member" : "tofu.optics.data.Constant.applicative", "link" : "tofu\/optics\/data\/Constant$.html#applicative[X](implicitevidence$1:cats.kernel.Monoid[X]):cats.Applicative[[β$0$]tofu.optics.data.Constant[X,β$0$]]", "kind" : "implicit def"}, {"label" : "bifunctor", "tail" : ": Bifunctor[Constant]", "member" : "tofu.optics.data.Constant.bifunctor", "link" : "tofu\/optics\/data\/Constant$.html#bifunctor:cats.Bifunctor[tofu.optics.data.Constant]", "kind" : "implicit val"}, {"label" : "Impl", "tail" : "", "member" : "tofu.optics.data.Constant.Impl", "link" : "tofu\/optics\/data\/Constant$.html#Impl[+A]extendsConstant[A,Nothing]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Apply", "tail" : "", "member" : "tofu.optics.data.Constant.Apply", "link" : "tofu\/optics\/data\/Constant$.html#Apply[B]extendsAnyRef", "kind" : "class"}, {"label" : "of", "tail" : "(): Apply[B]", "member" : "tofu.optics.data.Constant.of", "link" : "tofu\/optics\/data\/Constant$.html#of[B]:tofu.optics.data.Constant.Apply[B]", "kind" : "def"}, {"label" : "apply", "tail" : "(a: A): Impl[A]", "member" : "tofu.optics.data.Constant.apply", "link" : "tofu\/optics\/data\/Constant$.html#apply[A](a:A):tofu.optics.data.Constant.Impl[A]", "kind" : "def"}, {"label" : "applyInstance", "tail" : "(arg0: Semigroup[X]): cats.Apply[[β$2$]Constant[X, β$2$]]", "member" : "tofu.optics.data.ConstantLowPrior.applyInstance", "link" : "tofu\/optics\/data\/Constant$.html#applyInstance[X](implicitevidence$2:cats.kernel.Semigroup[X]):cats.Apply[[β$2$]tofu.optics.data.Constant[X,β$2$]]", "kind" : "implicit def"}, {"label" : "functor", "tail" : "(): Functor[[β$4$]Constant[X, β$4$]]", "member" : "tofu.optics.data.ConstantLowPrior2.functor", "link" : "tofu\/optics\/data\/Constant$.html#functor[X]:cats.Functor[[β$4$]tofu.optics.data.Constant[X,β$4$]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/data\/Constant$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/data\/Constant$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/data\/Constant$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/data\/Constant$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/data\/Constant$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/data\/Constant$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/data\/Constant$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/data\/Constant$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/data\/Constant$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/data\/Constant$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/data\/Constant$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/data\/Constant$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/data\/Constant$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/data\/Constant$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/data\/Constant$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/data\/Constant$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/data\/Constant$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/data\/Constant$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/data\/Constant$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/optics\/data\/Constant.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/data\/Constant.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/data\/Constant.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/data\/Constant.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/data\/Constant.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/data\/Constant.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/data\/Constant.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/data\/Constant.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/data\/Constant.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/data\/Constant.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/data\/Constant.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/data\/Constant.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/data\/Constant.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/data\/Constant.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/data\/Constant.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/data\/Constant.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/data\/Constant.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/data\/Constant.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/data\/Constant.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/data\/Constant.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "retag", "tail" : "(): Constant[A, C]", "member" : "tofu.optics.data.Constant.retag", "link" : "tofu\/optics\/data\/Constant.html#retag[C]:tofu.optics.data.Constant[A,C]", "kind" : "abstract def"}, {"label" : "value", "tail" : "(): A", "member" : "tofu.optics.data.Constant.value", "link" : "tofu\/optics\/data\/Constant.html#value:A", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.optics.data.ConstantLowPrior", "shortDescription" : "", "members_class" : [{"label" : "applyInstance", "tail" : "(arg0: Semigroup[X]): Apply[[β$2$]Constant[X, β$2$]]", "member" : "tofu.optics.data.ConstantLowPrior.applyInstance", "link" : "tofu\/optics\/data\/ConstantLowPrior.html#applyInstance[X](implicitevidence$2:cats.kernel.Semigroup[X]):cats.Apply[[β$2$]tofu.optics.data.Constant[X,β$2$]]", "kind" : "implicit def"}, {"member" : "tofu.optics.data.ConstantLowPrior#<init>", "error" : "unsupported entity"}, {"label" : "functor", "tail" : "(): Functor[[β$4$]Constant[X, β$4$]]", "member" : "tofu.optics.data.ConstantLowPrior2.functor", "link" : "tofu\/optics\/data\/ConstantLowPrior.html#functor[X]:cats.Functor[[β$4$]tofu.optics.data.Constant[X,β$4$]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/data\/ConstantLowPrior.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/data\/ConstantLowPrior.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/data\/ConstantLowPrior.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/data\/ConstantLowPrior.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/data\/ConstantLowPrior.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/data\/ConstantLowPrior.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/data\/ConstantLowPrior.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/data\/ConstantLowPrior.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/data\/ConstantLowPrior.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/data\/ConstantLowPrior.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/data\/ConstantLowPrior.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/data\/ConstantLowPrior.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/data\/ConstantLowPrior.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/data\/ConstantLowPrior.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/data\/ConstantLowPrior.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/data\/ConstantLowPrior.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/data\/ConstantLowPrior.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/data\/ConstantLowPrior.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/data\/ConstantLowPrior.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "tofu\/optics\/data\/ConstantLowPrior.html", "kind" : "class"}, {"name" : "tofu.optics.data.ConstantLowPrior2", "shortDescription" : "", "members_class" : [{"label" : "functor", "tail" : "(): Functor[[β$4$]Constant[X, β$4$]]", "member" : "tofu.optics.data.ConstantLowPrior2.functor", "link" : "tofu\/optics\/data\/ConstantLowPrior2.html#functor[X]:cats.Functor[[β$4$]tofu.optics.data.Constant[X,β$4$]]", "kind" : "implicit def"}, {"member" : "tofu.optics.data.ConstantLowPrior2#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/data\/ConstantLowPrior2.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/data\/ConstantLowPrior2.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/data\/ConstantLowPrior2.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/data\/ConstantLowPrior2.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/data\/ConstantLowPrior2.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/data\/ConstantLowPrior2.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/data\/ConstantLowPrior2.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/data\/ConstantLowPrior2.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/data\/ConstantLowPrior2.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/data\/ConstantLowPrior2.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/data\/ConstantLowPrior2.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/data\/ConstantLowPrior2.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/data\/ConstantLowPrior2.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/data\/ConstantLowPrior2.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/data\/ConstantLowPrior2.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/data\/ConstantLowPrior2.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/data\/ConstantLowPrior2.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/data\/ConstantLowPrior2.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/data\/ConstantLowPrior2.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "tofu\/optics\/data\/ConstantLowPrior2.html", "kind" : "class"}, {"name" : "tofu.optics.data.Tagged", "shortDescription" : "reversed version of cats.data.Const", "object" : "tofu\/optics\/data\/Tagged$.html", "members_object" : [{"label" : "profunctor", "tail" : ": Compose[Tagged] with PChoice[Tagged]", "member" : "tofu.optics.data.Tagged.profunctor", "link" : "tofu\/optics\/data\/Tagged$.html#profunctor:cats.arrow.Compose[tofu.optics.data.Tagged]withtofu.optics.classes.PChoice[tofu.optics.data.Tagged]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/data\/Tagged$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/data\/Tagged$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/data\/Tagged$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/data\/Tagged$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/data\/Tagged$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/data\/Tagged$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/data\/Tagged$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/data\/Tagged$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/data\/Tagged$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/data\/Tagged$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/data\/Tagged$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/data\/Tagged$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/data\/Tagged$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/data\/Tagged$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/data\/Tagged$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/data\/Tagged$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/data\/Tagged$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/data\/Tagged$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/data\/Tagged$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "retag", "tail" : "(): Tagged[C, B]", "member" : "tofu.optics.data.Tagged.retag", "link" : "tofu\/optics\/data\/Tagged.html#retag[C]:tofu.optics.data.Tagged[C,B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (B) => C): Tagged[A, C]", "member" : "tofu.optics.data.Tagged.map", "link" : "tofu\/optics\/data\/Tagged.html#map[C](f:B=>C):tofu.optics.data.Tagged[A,C]", "kind" : "def"}, {"member" : "tofu.optics.data.Tagged#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": B", "member" : "tofu.optics.data.Tagged.value", "link" : "tofu\/optics\/data\/Tagged.html#value:B", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "tofu\/optics\/data\/Tagged.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "tofu\/optics\/data\/Tagged.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "tofu\/optics\/data\/Tagged.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/data\/Tagged.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/data\/Tagged.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "tofu\/optics\/data\/Tagged.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "tofu\/optics\/data\/Tagged.html#==(x$1:Any):Boolean", "kind" : "final def"}], "case class" : "tofu\/optics\/data\/Tagged.html", "kind" : "case class"}], "tofu.observable" : [{"name" : "tofu.observable.ObservableAdditionalOps", "shortDescription" : "", "members_class" : [{"label" : "takeWhileInclusive", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "tofu.observable.ObservableAdditionalOps.takeWhileInclusive", "link" : "tofu\/observable\/package$$ObservableAdditionalOps.html#takeWhileInclusive(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "def"}, {"member" : "tofu.observable.ObservableAdditionalOps#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "tofu\/observable\/package$$ObservableAdditionalOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "tofu\/observable\/package$$ObservableAdditionalOps.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/observable\/package$$ObservableAdditionalOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/observable\/package$$ObservableAdditionalOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "tofu\/observable\/package$$ObservableAdditionalOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "tofu\/observable\/package$$ObservableAdditionalOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "tofu\/observable\/package$$ObservableAdditionalOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "tofu\/observable\/package$$ObservableAdditionalOps.html", "kind" : "class"}], "tofu.env.internal" : [{"name" : "tofu.env.internal.CollectionMapper", "shortDescription" : "", "object" : "tofu\/env\/internal\/CollectionMapper$.html", "members_class" : [{"member" : "tofu.env.internal.CollectionMapper#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/env\/internal\/CollectionMapper.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/env\/internal\/CollectionMapper.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/env\/internal\/CollectionMapper.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/env\/internal\/CollectionMapper.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/env\/internal\/CollectionMapper.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/env\/internal\/CollectionMapper.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/env\/internal\/CollectionMapper.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/env\/internal\/CollectionMapper.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/env\/internal\/CollectionMapper.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/env\/internal\/CollectionMapper.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/env\/internal\/CollectionMapper.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/env\/internal\/CollectionMapper.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/env\/internal\/CollectionMapper.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/env\/internal\/CollectionMapper.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/env\/internal\/CollectionMapper.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/env\/internal\/CollectionMapper.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/env\/internal\/CollectionMapper.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/env\/internal\/CollectionMapper.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/env\/internal\/CollectionMapper.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "map", "tail" : "(ca: C[A], f: (A) => B): C[B]", "member" : "tofu.env.internal.CollectionMapper.map", "link" : "tofu\/env\/internal\/CollectionMapper.html#map(ca:C[A],f:A=>B):C[B]", "kind" : "abstract def"}], "members_object" : [{"label" : "iterableOpsMapper", "tail" : "(): CollectionMapper[A, B, C]", "member" : "tofu.env.internal.CollectionMapperInstances.iterableOpsMapper", "link" : "tofu\/env\/internal\/CollectionMapper$.html#iterableOpsMapper[A,B,C[x]<:scala.collection.IterableOps[x,C,C[x]]]:tofu.env.internal.CollectionMapper[A,B,C]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/env\/internal\/CollectionMapper$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/env\/internal\/CollectionMapper$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/env\/internal\/CollectionMapper$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/env\/internal\/CollectionMapper$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/env\/internal\/CollectionMapper$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/env\/internal\/CollectionMapper$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/env\/internal\/CollectionMapper$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/env\/internal\/CollectionMapper$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/env\/internal\/CollectionMapper$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/env\/internal\/CollectionMapper$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/env\/internal\/CollectionMapper$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/env\/internal\/CollectionMapper$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/env\/internal\/CollectionMapper$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/env\/internal\/CollectionMapper$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/env\/internal\/CollectionMapper$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/env\/internal\/CollectionMapper$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/env\/internal\/CollectionMapper$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/env\/internal\/CollectionMapper$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/env\/internal\/CollectionMapper$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "tofu\/env\/internal\/CollectionMapper.html", "kind" : "class"}], "tofu.higherKind.derived" : [{"name" : "tofu.higherKind.derived.HigherKindedMacros", "shortDescription" : "", "members_class" : [{"label" : "Method", "tail" : "", "member" : "cats.tagless.DeriveMacros.Method", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#MethodextendsProductwithSerializable", "kind" : "case class"}, {"label" : "representableK", "tail" : "(tag: scala.reflect.macros.Universe.WeakTypeTag[Alg[Any]]): scala.reflect.macros.Universe.Tree", "member" : "tofu.higherKind.derived.HigherKindedMacros.representableK", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#representableK[Alg[_[_]]](implicittag:HigherKindedMacros.this.c.universe.WeakTypeTag[Alg[Any]]):HigherKindedMacros.this.c.universe.Tree", "kind" : "def"}, {"label" : "tabulate", "tail" : "(algebra: scala.reflect.macros.Universe.Type): (String, (scala.reflect.macros.Universe.Type) => scala.reflect.macros.Universe.Tree)", "member" : "tofu.higherKind.derived.HigherKindedMacros.tabulate", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#tabulate(algebra:HigherKindedMacros.this.c.universe.Type):(String,HigherKindedMacros.this.c.universe.Type=>HigherKindedMacros.this.c.universe.Tree)", "kind" : "def"}, {"label" : "MethodOps", "tail" : "", "member" : "tofu.higherKind.derived.HigherKindedMacros.MethodOps", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#MethodOpsextendsAnyRef", "kind" : "implicit final class"}, {"member" : "tofu.higherKind.derived.HigherKindedMacros#<init>", "error" : "unsupported entity"}, {"label" : "c", "tail" : ": scala.reflect.macros.blackbox.Context", "member" : "tofu.higherKind.derived.HigherKindedMacros.c", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#c:scala.reflect.macros.blackbox.Context", "kind" : "val"}, {"label" : "instrument", "tail" : "(tag: scala.reflect.macros.Universe.WeakTypeTag[Alg[Any]]): scala.reflect.macros.Universe.Tree", "member" : "cats.tagless.DeriveMacros.instrument", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#instrument[Alg<:<?>](implicittag:DeriveMacros.this.c.universe.WeakTypeTag[Alg[Any]]):DeriveMacros.this.c.universe.Tree", "kind" : "def"}, {"label" : "applyK", "tail" : "(tag: scala.reflect.macros.Universe.WeakTypeTag[Alg[Any]]): scala.reflect.macros.Universe.Tree", "member" : "cats.tagless.DeriveMacros.applyK", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#applyK[Alg<:<?>](implicittag:DeriveMacros.this.c.universe.WeakTypeTag[Alg[Any]]):DeriveMacros.this.c.universe.Tree", "kind" : "def"}, {"label" : "semigroupalK", "tail" : "(tag: scala.reflect.macros.Universe.WeakTypeTag[Alg[Any]]): scala.reflect.macros.Universe.Tree", "member" : "cats.tagless.DeriveMacros.semigroupalK", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#semigroupalK[Alg<:<?>](implicittag:DeriveMacros.this.c.universe.WeakTypeTag[Alg[Any]]):DeriveMacros.this.c.universe.Tree", "kind" : "def"}, {"label" : "invariantK", "tail" : "(tag: scala.reflect.macros.Universe.WeakTypeTag[Alg[Any]]): scala.reflect.macros.Universe.Tree", "member" : "cats.tagless.DeriveMacros.invariantK", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#invariantK[Alg<:<?>](implicittag:DeriveMacros.this.c.universe.WeakTypeTag[Alg[Any]]):DeriveMacros.this.c.universe.Tree", "kind" : "def"}, {"label" : "contravariantK", "tail" : "(tag: scala.reflect.macros.Universe.WeakTypeTag[Alg[Any]]): scala.reflect.macros.Universe.Tree", "member" : "cats.tagless.DeriveMacros.contravariantK", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#contravariantK[Alg<:<?>](implicittag:DeriveMacros.this.c.universe.WeakTypeTag[Alg[Any]]):DeriveMacros.this.c.universe.Tree", "kind" : "def"}, {"label" : "functorK", "tail" : "(tag: scala.reflect.macros.Universe.WeakTypeTag[Alg[Any]]): scala.reflect.macros.Universe.Tree", "member" : "cats.tagless.DeriveMacros.functorK", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#functorK[Alg<:<?>](implicittag:DeriveMacros.this.c.universe.WeakTypeTag[Alg[Any]]):DeriveMacros.this.c.universe.Tree", "kind" : "def"}, {"label" : "flatMap", "tail" : "(tag: scala.reflect.macros.Universe.WeakTypeTag[F[Any]]): scala.reflect.macros.Universe.Tree", "member" : "cats.tagless.DeriveMacros.flatMap", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#flatMap[F<:<?>](implicittag:DeriveMacros.this.c.universe.WeakTypeTag[F[Any]]):DeriveMacros.this.c.universe.Tree", "kind" : "def"}, {"label" : "apply", "tail" : "(tag: scala.reflect.macros.Universe.WeakTypeTag[F[Any]]): scala.reflect.macros.Universe.Tree", "member" : "cats.tagless.DeriveMacros.apply", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#apply[F<:<?>](implicittag:DeriveMacros.this.c.universe.WeakTypeTag[F[Any]]):DeriveMacros.this.c.universe.Tree", "kind" : "def"}, {"label" : "semigroupal", "tail" : "(tag: scala.reflect.macros.Universe.WeakTypeTag[F[Any]]): scala.reflect.macros.Universe.Tree", "member" : "cats.tagless.DeriveMacros.semigroupal", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#semigroupal[F<:<?>](implicittag:DeriveMacros.this.c.universe.WeakTypeTag[F[Any]]):DeriveMacros.this.c.universe.Tree", "kind" : "def"}, {"label" : "bifunctor", "tail" : "(tag: scala.reflect.macros.Universe.WeakTypeTag[F[Any, Any]]): scala.reflect.macros.Universe.Tree", "member" : "cats.tagless.DeriveMacros.bifunctor", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#bifunctor[F<:<?>](implicittag:DeriveMacros.this.c.universe.WeakTypeTag[F[Any,Any]]):DeriveMacros.this.c.universe.Tree", "kind" : "def"}, {"label" : "profunctor", "tail" : "(tag: scala.reflect.macros.Universe.WeakTypeTag[F[Any, Any]]): scala.reflect.macros.Universe.Tree", "member" : "cats.tagless.DeriveMacros.profunctor", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#profunctor[F<:<?>](implicittag:DeriveMacros.this.c.universe.WeakTypeTag[F[Any,Any]]):DeriveMacros.this.c.universe.Tree", "kind" : "def"}, {"label" : "invariant", "tail" : "(tag: scala.reflect.macros.Universe.WeakTypeTag[F[Any]]): scala.reflect.macros.Universe.Tree", "member" : "cats.tagless.DeriveMacros.invariant", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#invariant[F<:<?>](implicittag:DeriveMacros.this.c.universe.WeakTypeTag[F[Any]]):DeriveMacros.this.c.universe.Tree", "kind" : "def"}, {"label" : "contravariant", "tail" : "(tag: scala.reflect.macros.Universe.WeakTypeTag[F[Any]]): scala.reflect.macros.Universe.Tree", "member" : "cats.tagless.DeriveMacros.contravariant", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#contravariant[F<:<?>](implicittag:DeriveMacros.this.c.universe.WeakTypeTag[F[Any]]):DeriveMacros.this.c.universe.Tree", "kind" : "def"}, {"label" : "functor", "tail" : "(tag: scala.reflect.macros.Universe.WeakTypeTag[F[Any]]): scala.reflect.macros.Universe.Tree", "member" : "cats.tagless.DeriveMacros.functor", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#functor[F<:<?>](implicittag:DeriveMacros.this.c.universe.WeakTypeTag[F[Any]]):DeriveMacros.this.c.universe.Tree", "kind" : "def"}, {"label" : "instrumentation", "tail" : "(algebra: scala.reflect.macros.Universe.Type): (String, (scala.reflect.macros.Universe.Type) => scala.reflect.macros.Universe.Tree)", "member" : "cats.tagless.DeriveMacros.instrumentation", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#instrumentation(algebra:DeriveMacros.this.c.universe.Type):(String,DeriveMacros.this.c.universe.Type=>DeriveMacros.this.c.universe.Tree)", "kind" : "def"}, {"label" : "bimap", "tail" : "(algebra: scala.reflect.macros.Universe.Type): (String, (scala.reflect.macros.Universe.Type) => scala.reflect.macros.Universe.Tree)", "member" : "cats.tagless.DeriveMacros.bimap", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#bimap(algebra:DeriveMacros.this.c.universe.Type):(String,DeriveMacros.this.c.universe.Type=>DeriveMacros.this.c.universe.Tree)", "kind" : "def"}, {"label" : "dimap", "tail" : "(algebra: scala.reflect.macros.Universe.Type): (String, (scala.reflect.macros.Universe.Type) => scala.reflect.macros.Universe.Tree)", "member" : "cats.tagless.DeriveMacros.dimap", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#dimap(algebra:DeriveMacros.this.c.universe.Type):(String,DeriveMacros.this.c.universe.Type=>DeriveMacros.this.c.universe.Tree)", "kind" : "def"}, {"label" : "tailRecM", "tail" : "(algebra: scala.reflect.macros.Universe.Type): (String, (scala.reflect.macros.Universe.Type) => scala.reflect.macros.Universe.Tree)", "member" : "cats.tagless.DeriveMacros.tailRecM", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#tailRecM(algebra:DeriveMacros.this.c.universe.Type):(String,DeriveMacros.this.c.universe.Type=>DeriveMacros.this.c.universe.Tree)", "kind" : "def"}, {"label" : "flatMap_", "tail" : "(algebra: scala.reflect.macros.Universe.Type): (String, (scala.reflect.macros.Universe.Type) => scala.reflect.macros.Universe.Tree)", "member" : "cats.tagless.DeriveMacros.flatMap_", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#flatMap_(algebra:DeriveMacros.this.c.universe.Type):(String,DeriveMacros.this.c.universe.Type=>DeriveMacros.this.c.universe.Tree)", "kind" : "def"}, {"label" : "productK", "tail" : "(algebra: scala.reflect.macros.Universe.Type): (String, (scala.reflect.macros.Universe.Type) => scala.reflect.macros.Universe.Tree)", "member" : "cats.tagless.DeriveMacros.productK", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#productK(algebra:DeriveMacros.this.c.universe.Type):(String,DeriveMacros.this.c.universe.Type=>DeriveMacros.this.c.universe.Tree)", "kind" : "def"}, {"label" : "product", "tail" : "(algebra: scala.reflect.macros.Universe.Type): (String, (scala.reflect.macros.Universe.Type) => scala.reflect.macros.Universe.Tree)", "member" : "cats.tagless.DeriveMacros.product", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#product(algebra:DeriveMacros.this.c.universe.Type):(String,DeriveMacros.this.c.universe.Type=>DeriveMacros.this.c.universe.Tree)", "kind" : "def"}, {"label" : "ap", "tail" : "(algebra: scala.reflect.macros.Universe.Type): (String, (scala.reflect.macros.Universe.Type) => scala.reflect.macros.Universe.Tree)", "member" : "cats.tagless.DeriveMacros.ap", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#ap(algebra:DeriveMacros.this.c.universe.Type):(String,DeriveMacros.this.c.universe.Type=>DeriveMacros.this.c.universe.Tree)", "kind" : "def"}, {"label" : "imapK", "tail" : "(algebra: scala.reflect.macros.Universe.Type): (String, (scala.reflect.macros.Universe.Type) => scala.reflect.macros.Universe.Tree)", "member" : "cats.tagless.DeriveMacros.imapK", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#imapK(algebra:DeriveMacros.this.c.universe.Type):(String,DeriveMacros.this.c.universe.Type=>DeriveMacros.this.c.universe.Tree)", "kind" : "def"}, {"label" : "imap", "tail" : "(algebra: scala.reflect.macros.Universe.Type): (String, (scala.reflect.macros.Universe.Type) => scala.reflect.macros.Universe.Tree)", "member" : "cats.tagless.DeriveMacros.imap", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#imap(algebra:DeriveMacros.this.c.universe.Type):(String,DeriveMacros.this.c.universe.Type=>DeriveMacros.this.c.universe.Tree)", "kind" : "def"}, {"label" : "contramapK", "tail" : "(algebra: scala.reflect.macros.Universe.Type): (String, (scala.reflect.macros.Universe.Type) => scala.reflect.macros.Universe.Tree)", "member" : "cats.tagless.DeriveMacros.contramapK", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#contramapK(algebra:DeriveMacros.this.c.universe.Type):(String,DeriveMacros.this.c.universe.Type=>DeriveMacros.this.c.universe.Tree)", "kind" : "def"}, {"label" : "contramap", "tail" : "(algebra: scala.reflect.macros.Universe.Type): (String, (scala.reflect.macros.Universe.Type) => scala.reflect.macros.Universe.Tree)", "member" : "cats.tagless.DeriveMacros.contramap", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#contramap(algebra:DeriveMacros.this.c.universe.Type):(String,DeriveMacros.this.c.universe.Type=>DeriveMacros.this.c.universe.Tree)", "kind" : "def"}, {"label" : "mapK", "tail" : "(algebra: scala.reflect.macros.Universe.Type): (String, (scala.reflect.macros.Universe.Type) => scala.reflect.macros.Universe.Tree)", "member" : "cats.tagless.DeriveMacros.mapK", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#mapK(algebra:DeriveMacros.this.c.universe.Type):(String,DeriveMacros.this.c.universe.Type=>DeriveMacros.this.c.universe.Tree)", "kind" : "def"}, {"label" : "map", "tail" : "(algebra: scala.reflect.macros.Universe.Type): (String, (scala.reflect.macros.Universe.Type) => scala.reflect.macros.Universe.Tree)", "member" : "cats.tagless.DeriveMacros.map", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#map(algebra:DeriveMacros.this.c.universe.Type):(String,DeriveMacros.this.c.universe.Type=>DeriveMacros.this.c.universe.Tree)", "kind" : "def"}, {"label" : "instantiate", "tail" : "(tag: scala.reflect.macros.Universe.WeakTypeTag[_])(rhs: (scala.reflect.macros.Universe.Type) => (String, (scala.reflect.macros.Universe.Type) => scala.reflect.macros.Universe.Tree)*)(arg0: scala.reflect.macros.Universe.WeakTypeTag[T]): scala.reflect.macros.Universe.Tree", "member" : "cats.tagless.DeriveMacros.instantiate", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#instantiate[T](tag:DeriveMacros.this.c.universe.WeakTypeTag[_])(rhs:DeriveMacros.this.c.universe.Type=>(String,DeriveMacros.this.c.universe.Type=>DeriveMacros.this.c.universe.Tree)*)(implicitevidence$2:DeriveMacros.this.c.universe.WeakTypeTag[T]):DeriveMacros.this.c.universe.Tree", "kind" : "def"}, {"label" : "implement", "tail" : "(algebra: scala.reflect.macros.Universe.Type)(typeArgs: scala.reflect.macros.Universe.Symbol*)(members: Iterable[scala.reflect.macros.Universe.Tree]): scala.reflect.macros.Universe.Tree", "member" : "cats.tagless.DeriveMacros.implement", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#implement(algebra:DeriveMacros.this.c.universe.Type)(typeArgs:DeriveMacros.this.c.universe.Symbol*)(members:Iterable[DeriveMacros.this.c.universe.Tree]):DeriveMacros.this.c.universe.Tree", "kind" : "def"}, {"label" : "declare", "tail" : "(instance: scala.reflect.macros.Universe.Type): scala.reflect.macros.Universe.Tree", "member" : "cats.tagless.DeriveMacros.declare", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#declare(instance:DeriveMacros.this.c.universe.Type):DeriveMacros.this.c.universe.Tree", "kind" : "def"}, {"label" : "delegateMethods", "tail" : "(algebra: scala.reflect.macros.Universe.Type, members: Iterable[scala.reflect.macros.Universe.Symbol], instance: scala.reflect.macros.Universe.Symbol)(transform: PartialFunction[Method, Method]): Iterable[scala.reflect.macros.Universe.Tree]", "member" : "cats.tagless.DeriveMacros.delegateMethods", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#delegateMethods(algebra:DeriveMacros.this.c.universe.Type,members:Iterable[DeriveMacros.this.c.universe.Symbol],instance:DeriveMacros.this.c.universe.Symbol)(transform:PartialFunction[DeriveMacros.this.Method,DeriveMacros.this.Method]):Iterable[DeriveMacros.this.c.universe.Tree]", "kind" : "def"}, {"label" : "delegateAbstractTypes", "tail" : "(algebra: scala.reflect.macros.Universe.Type, members: Iterable[scala.reflect.macros.Universe.Symbol], instance: scala.reflect.macros.Universe.Type): Iterable[scala.reflect.macros.Universe.Tree]", "member" : "cats.tagless.DeriveMacros.delegateAbstractTypes", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#delegateAbstractTypes(algebra:DeriveMacros.this.c.universe.Type,members:Iterable[DeriveMacros.this.c.universe.Symbol],instance:DeriveMacros.this.c.universe.Type):Iterable[DeriveMacros.this.c.universe.Tree]", "kind" : "def"}, {"label" : "delegateTypes", "tail" : "(algebra: scala.reflect.macros.Universe.Type, members: Iterable[scala.reflect.macros.Universe.Symbol])(rhs: (scala.reflect.macros.Universe.TypeSymbol, List[scala.reflect.macros.Universe.Type]) => scala.reflect.macros.Universe.Type): Iterable[scala.reflect.macros.Universe.Tree]", "member" : "cats.tagless.DeriveMacros.delegateTypes", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#delegateTypes(algebra:DeriveMacros.this.c.universe.Type,members:Iterable[DeriveMacros.this.c.universe.Symbol])(rhs:(DeriveMacros.this.c.universe.TypeSymbol,List[DeriveMacros.this.c.universe.Type])=>DeriveMacros.this.c.universe.Type):Iterable[DeriveMacros.this.c.universe.Tree]", "kind" : "def"}, {"label" : "summon", "tail" : "(typeArgs: scala.reflect.macros.Universe.Type*)(arg0: scala.reflect.macros.Universe.TypeTag[A]): scala.reflect.macros.Universe.Tree", "member" : "cats.tagless.DeriveMacros.summon", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#summon[A](typeArgs:DeriveMacros.this.c.universe.Type*)(implicitevidence$1:DeriveMacros.this.c.universe.TypeTag[A]):DeriveMacros.this.c.universe.Tree", "kind" : "def"}, {"label" : "occursIn", "tail" : "(tpe: scala.reflect.macros.Universe.Type)(symbol: scala.reflect.macros.Universe.Symbol): Boolean", "member" : "cats.tagless.DeriveMacros.occursIn", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#occursIn(tpe:DeriveMacros.this.c.universe.Type)(symbol:DeriveMacros.this.c.universe.Symbol):Boolean", "kind" : "def"}, {"label" : "abort", "tail" : "(message: String): Nothing", "member" : "cats.tagless.DeriveMacros.abort", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#abort(message:String):Nothing", "kind" : "def"}, {"label" : "typeCheckWithFreshTypeParams", "tail" : "(tree: scala.reflect.macros.Universe.Tree): scala.reflect.macros.Universe.Tree", "member" : "cats.tagless.DeriveMacros.typeCheckWithFreshTypeParams", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#typeCheckWithFreshTypeParams(tree:DeriveMacros.this.c.universe.Tree):DeriveMacros.this.c.universe.Tree", "kind" : "def"}, {"label" : "overridableMembersOf", "tail" : "(tpe: scala.reflect.macros.Universe.Type): Iterable[scala.reflect.macros.Universe.Symbol]", "member" : "cats.tagless.DeriveMacros.overridableMembersOf", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#overridableMembersOf(tpe:DeriveMacros.this.c.universe.Type):Iterable[DeriveMacros.this.c.universe.Symbol]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/higherKind\/derived\/HigherKindedMacros.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "tofu\/higherKind\/derived\/HigherKindedMacros.html", "kind" : "class"}, {"name" : "tofu.higherKind.derived.representableK", "shortDescription" : "", "object" : "tofu\/higherKind\/derived\/representableK$.html", "members_object" : [{"label" : "instance", "tail" : "(): RepresentableK[T]", "member" : "tofu.higherKind.derived.representableK.instance", "link" : "tofu\/higherKind\/derived\/representableK$.html#instance[T[_[_]]]:tofu.higherKind.RepresentableK[T]", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/higherKind\/derived\/representableK$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/higherKind\/derived\/representableK$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/higherKind\/derived\/representableK$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/higherKind\/derived\/representableK$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/higherKind\/derived\/representableK$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/higherKind\/derived\/representableK$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/higherKind\/derived\/representableK$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/derived\/representableK$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/derived\/representableK$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/derived\/representableK$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/higherKind\/derived\/representableK$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/higherKind\/derived\/representableK$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/higherKind\/derived\/representableK$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/higherKind\/derived\/representableK$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/higherKind\/derived\/representableK$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/higherKind\/derived\/representableK$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/higherKind\/derived\/representableK$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/higherKind\/derived\/representableK$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/higherKind\/derived\/representableK$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "tofu.logging" : [{"name" : "tofu.logging.LoggableEnum", "trait" : "tofu\/logging\/LoggableEnum.html", "kind" : "trait", "members_trait" : [{"label" : "logging", "tail" : ": Loggable[E]", "member" : "tofu.logging.LoggableEnum.logging", "link" : "tofu\/logging\/LoggableEnum.html#logging:tofu.logging.Loggable[E]", "kind" : "implicit final val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/logging\/LoggableEnum.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/logging\/LoggableEnum.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/logging\/LoggableEnum.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/logging\/LoggableEnum.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/logging\/LoggableEnum.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/logging\/LoggableEnum.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/logging\/LoggableEnum.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/logging\/LoggableEnum.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/logging\/LoggableEnum.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/logging\/LoggableEnum.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/logging\/LoggableEnum.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/logging\/LoggableEnum.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/logging\/LoggableEnum.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/logging\/LoggableEnum.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/logging\/LoggableEnum.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/logging\/LoggableEnum.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/logging\/LoggableEnum.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/logging\/LoggableEnum.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/logging\/LoggableEnum.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}], "tofu.optics" : [{"name" : "tofu.optics.Applied", "shortDescription" : "", "members_case class" : [{"label" : "traverse1", "tail" : "(f: (A) => G[B])(arg0: Apply[G], ev: <:<[O[S, T, A, B], PRepeated[S, T, A, B]]): G[T]", "member" : "tofu.optics.Applied.traverse1", "link" : "tofu\/optics\/Applied.html#traverse1[G[+_]](f:A=>G[B])(implicitevidence$5:cats.Apply[G],implicitev:O[S,T,A,B]<:<tofu.optics.PRepeated[S,T,A,B]):G[T]", "kind" : "def"}, {"label" : "getAll", "tail" : "(ev: <:<[O[S, T, A, B], PFolded[S, T, A, B]]): List[A]", "member" : "tofu.optics.Applied.getAll", "link" : "tofu\/optics\/Applied.html#getAll(implicitev:O[S,T,A,B]<:<tofu.optics.PFolded[S,T,A,B]):List[A]", "kind" : "def"}, {"label" : "getAll1", "tail" : "(ev: <:<[O[S, T, A, B], PReduced[S, T, A, B]]): NonEmptyList[A]", "member" : "tofu.optics.Applied.getAll1", "link" : "tofu\/optics\/Applied.html#getAll1(implicitev:O[S,T,A,B]<:<tofu.optics.PReduced[S,T,A,B]):cats.data.NonEmptyList[A]", "kind" : "def"}, {"label" : "reduceMap", "tail" : "(f: (A) => M)(arg0: Semigroup[M], ev: <:<[O[S, T, A, B], PReduced[S, T, A, B]]): M", "member" : "tofu.optics.Applied.reduceMap", "link" : "tofu\/optics\/Applied.html#reduceMap[M](f:A=>M)(implicitevidence$4:cats.kernel.Semigroup[M],implicitev:O[S,T,A,B]<:<tofu.optics.PReduced[S,T,A,B]):M", "kind" : "def"}, {"label" : "foldMap", "tail" : "(f: (A) => M)(arg0: Monoid[M], ev: <:<[O[S, T, A, B], PFolded[S, T, A, B]]): M", "member" : "tofu.optics.Applied.foldMap", "link" : "tofu\/optics\/Applied.html#foldMap[M](f:A=>M)(implicitevidence$3:cats.Monoid[M],implicitev:O[S,T,A,B]<:<tofu.optics.PFolded[S,T,A,B]):M", "kind" : "def"}, {"label" : "traverse", "tail" : "(f: (A) => G[B])(arg0: Applicative[G], ev: <:<[O[S, T, A, B], PItems[S, T, A, B]]): G[T]", "member" : "tofu.optics.Applied.traverse", "link" : "tofu\/optics\/Applied.html#traverse[G[+_]](f:A=>G[B])(implicitevidence$2:cats.Applicative[G],implicitev:O[S,T,A,B]<:<tofu.optics.PItems[S,T,A,B]):G[T]", "kind" : "def"}, {"label" : "downcast", "tail" : "(ev: <:<[O[S, T, A, B], PDowncast[S, T, A, B]]): Option[A]", "member" : "tofu.optics.Applied.downcast", "link" : "tofu\/optics\/Applied.html#downcast(implicitev:O[S,T,A,B]<:<tofu.optics.PDowncast[S,T,A,B]):Option[A]", "kind" : "def"}, {"label" : "get", "tail" : "(ev: <:<[O[S, T, A, B], PExtract[S, T, A, B]]): A", "member" : "tofu.optics.Applied.get", "link" : "tofu\/optics\/Applied.html#get(implicitev:O[S,T,A,B]<:<tofu.optics.PExtract[S,T,A,B]):A", "kind" : "def"}, {"label" : "update", "tail" : "(f: (A) => B)(ev: <:<[O[S, T, A, B], PUpdate[S, T, A, B]]): T", "member" : "tofu.optics.Applied.update", "link" : "tofu\/optics\/Applied.html#update(f:A=>B)(implicitev:O[S,T,A,B]<:<tofu.optics.PUpdate[S,T,A,B]):T", "kind" : "def"}, {"label" : "put", "tail" : "(b: B)(ev: <:<[O[S, T, A, B], PUpdate[S, T, A, B]]): T", "member" : "tofu.optics.Applied.put", "link" : "tofu\/optics\/Applied.html#put(b:B)(implicitev:O[S,T,A,B]<:<tofu.optics.PUpdate[S,T,A,B]):T", "kind" : "def"}, {"label" : ">", "tail" : "(tagger: Tagger[O1]): AppliedWithTag[O1, S, T, A, B, Tag]", "member" : "tofu.optics.Applied.>", "link" : "tofu\/optics\/Applied.html#>[O1[s,t,a,b]>:O[s,t,a,b]](tagger:tofu.optics.tags.Tagger[O1]):tofu.optics.AppliedWithTag[O1,S,T,A,B,tagger.Tag]", "kind" : "def"}, {"label" : ">>", "tail" : "(o1: O1[A, B, U, V])(arg0: Category2[O1]): Applied[O1, S, T, U, V]", "member" : "tofu.optics.Applied.>>", "link" : "tofu\/optics\/Applied.html#>>[O1[s,t,a,b]>:O[s,t,a,b],U,V](o1:O1[A,B,U,V])(implicitevidence$1:tofu.optics.classes.Category2[O1]):tofu.optics.Applied[O1,S,T,U,V]", "kind" : "def"}, {"member" : "tofu.optics.Applied#<init>", "error" : "unsupported entity"}, {"label" : "o", "tail" : ": O[S, T, A, B]", "member" : "tofu.optics.Applied.o", "link" : "tofu\/optics\/Applied.html#o:O[S,T,A,B]", "kind" : "val"}, {"label" : "s", "tail" : ": S", "member" : "tofu.optics.Applied.s", "link" : "tofu\/optics\/Applied.html#s:S", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "tofu\/optics\/Applied.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/Applied.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/Applied.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/Applied.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/Applied.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/Applied.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/Applied.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/Applied.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Applied.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Applied.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Applied.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/Applied.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/Applied.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/Applied.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/Applied.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/Applied.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/Applied.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "tofu\/optics\/Applied.html", "kind" : "case class"}, {"name" : "tofu.optics.AppliedWithTag", "shortDescription" : "", "members_case class" : [{"label" : "end", "tail" : "(tag: PTagApply[O, A, B, U, V, Tag, Unit], cat: Category2[O]): Applied[O, S, T, U, V]", "member" : "tofu.optics.AppliedWithTag.end", "link" : "tofu\/optics\/AppliedWithTag.html#end[U,V](implicittag:tofu.optics.tags.PTagApply[O,A,B,U,V,Tag,Unit],implicitcat:tofu.optics.classes.Category2[O]):tofu.optics.Applied[O,S,T,U,V]", "kind" : "def"}, {"label" : ">>", "tail" : "(o1: O1[U, V, X, Y])(arg0: Category2[O1], tag: PTagApply[O, A, B, U, V, Tag, Unit], cat: Category2[O]): Applied[O1, S, T, X, Y]", "member" : "tofu.optics.AppliedWithTag.>>", "link" : "tofu\/optics\/AppliedWithTag.html#>>[O1[s,t,a,b]>:O[s,t,a,b],U,V,X,Y](o1:O1[U,V,X,Y])(implicitevidence$6:tofu.optics.classes.Category2[O1],implicittag:tofu.optics.tags.PTagApply[O,A,B,U,V,Tag,Unit],implicitcat:tofu.optics.classes.Category2[O]):tofu.optics.Applied[O1,S,T,X,Y]", "kind" : "def"}, {"label" : ">", "tail" : "(tagger: Tagger[O1])(tag: PTagApply[O, A, B, U, V, Tag, Unit], cat: Category2[O]): AppliedWithTag[O1, S, T, U, V, Tag]", "member" : "tofu.optics.AppliedWithTag.>", "link" : "tofu\/optics\/AppliedWithTag.html#>[O1[s,t,a,b]>:O[s,t,a,b],U,V](tagger:tofu.optics.tags.Tagger[O1])(implicittag:tofu.optics.tags.PTagApply[O,A,B,U,V,Tag,Unit],implicitcat:tofu.optics.classes.Category2[O]):tofu.optics.AppliedWithTag[O1,S,T,U,V,tagger.Tag]", "kind" : "def"}, {"label" : ">@", "tail" : "(x: X)(tag: PTagApply[O, A, B, U, V, Tag, X], cat: Category2[O]): Applied[O, S, T, U, V]", "member" : "tofu.optics.AppliedWithTag.>@", "link" : "tofu\/optics\/AppliedWithTag.html#>@[X,U,V](x:X)(implicittag:tofu.optics.tags.PTagApply[O,A,B,U,V,Tag,X],implicitcat:tofu.optics.classes.Category2[O]):tofu.optics.Applied[O,S,T,U,V]", "kind" : "def"}, {"member" : "tofu.optics.AppliedWithTag#<init>", "error" : "unsupported entity"}, {"label" : "o", "tail" : ": O[S, T, A, B]", "member" : "tofu.optics.AppliedWithTag.o", "link" : "tofu\/optics\/AppliedWithTag.html#o:O[S,T,A,B]", "kind" : "val"}, {"label" : "s", "tail" : ": S", "member" : "tofu.optics.AppliedWithTag.s", "link" : "tofu\/optics\/AppliedWithTag.html#s:S", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "tofu\/optics\/AppliedWithTag.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/AppliedWithTag.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/AppliedWithTag.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/AppliedWithTag.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/AppliedWithTag.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/AppliedWithTag.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/AppliedWithTag.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/AppliedWithTag.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/AppliedWithTag.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/AppliedWithTag.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/AppliedWithTag.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/AppliedWithTag.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/AppliedWithTag.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/AppliedWithTag.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/AppliedWithTag.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/AppliedWithTag.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/AppliedWithTag.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "tofu\/optics\/AppliedWithTag.html", "kind" : "case class"}, {"name" : "tofu.optics.chain", "shortDescription" : "", "object" : "tofu\/optics\/chain$.html", "members_object" : [{"label" : "ChainTo", "tail" : "", "member" : "tofu.optics.chain.ChainTo", "link" : "tofu\/optics\/chain$.html#ChainTo[T]extendsAnyRef", "kind" : "class"}, {"label" : "apply", "tail" : "(s: S): Applied[PSame, S, S, S, S]", "member" : "tofu.optics.chain.apply", "link" : "tofu\/optics\/chain$.html#apply[S](s:S):tofu.optics.Applied[tofu.optics.PSame,S,S,S,S]", "kind" : "def"}, {"label" : "to", "tail" : "(): ChainTo[T]", "member" : "tofu.optics.chain.to", "link" : "tofu\/optics\/chain$.html#to[T]:tofu.optics.chain.ChainTo[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/chain$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/chain$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/chain$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/chain$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/chain$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/chain$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/chain$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/chain$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/chain$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/chain$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/chain$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/chain$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/chain$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/chain$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/chain$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/chain$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/chain$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/chain$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/chain$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.optics.classic", "shortDescription" : "classic names for types", "object" : "tofu\/optics\/classic$.html", "members_object" : [{"label" : "PSetter", "tail" : "", "member" : "tofu.optics.classic.PSetter", "link" : "tofu\/optics\/classic$.html#PSetter[S,T,A,B]=tofu.optics.PUpdate[S,T,A,B]", "kind" : "type"}, {"label" : "PFold", "tail" : "", "member" : "tofu.optics.classic.PFold", "link" : "tofu\/optics\/classic$.html#PFold[S,T,A,B]=tofu.optics.PFolded[S,T,A,B]", "kind" : "type"}, {"label" : "PGetter", "tail" : "", "member" : "tofu.optics.classic.PGetter", "link" : "tofu\/optics\/classic$.html#PGetter[S,T,A,B]=tofu.optics.PExtract[S,T,A,B]", "kind" : "type"}, {"label" : "PReview", "tail" : "", "member" : "tofu.optics.classic.PReview", "link" : "tofu\/optics\/classic$.html#PReview[S,T,A,B]=tofu.optics.PUpcast[S,T,A,B]", "kind" : "type"}, {"label" : "PView", "tail" : "", "member" : "tofu.optics.classic.PView", "link" : "tofu\/optics\/classic$.html#PView[S,T,A,B]=tofu.optics.PDowncast[S,T,A,B]", "kind" : "type"}, {"label" : "PNonEmptyFold", "tail" : "", "member" : "tofu.optics.classic.PNonEmptyFold", "link" : "tofu\/optics\/classic$.html#PNonEmptyFold[S,T,A,B]=tofu.optics.PReduced[S,T,A,B]", "kind" : "type"}, {"label" : "PTraversal", "tail" : "", "member" : "tofu.optics.classic.PTraversal", "link" : "tofu\/optics\/classic$.html#PTraversal[S,T,A,B]=tofu.optics.PItems[S,T,A,B]", "kind" : "type"}, {"label" : "PNonEmptyTraversal", "tail" : "", "member" : "tofu.optics.classic.PNonEmptyTraversal", "link" : "tofu\/optics\/classic$.html#PNonEmptyTraversal[S,T,A,B]=tofu.optics.PRepeated[S,T,A,B]", "kind" : "type"}, {"label" : "POptional", "tail" : "", "member" : "tofu.optics.classic.POptional", "link" : "tofu\/optics\/classic$.html#POptional[S,T,A,B]=tofu.optics.PProperty[S,T,A,B]", "kind" : "type"}, {"label" : "PLens", "tail" : "", "member" : "tofu.optics.classic.PLens", "link" : "tofu\/optics\/classic$.html#PLens[S,T,A,B]=tofu.optics.PContains[S,T,A,B]", "kind" : "type"}, {"label" : "PPrism", "tail" : "", "member" : "tofu.optics.classic.PPrism", "link" : "tofu\/optics\/classic$.html#PPrism[S,T,A,B]=tofu.optics.PSubset[S,T,A,B]", "kind" : "type"}, {"label" : "PIso", "tail" : "", "member" : "tofu.optics.classic.PIso", "link" : "tofu\/optics\/classic$.html#PIso[S,T,A,B]=tofu.optics.PEquivalent[S,T,A,B]", "kind" : "type"}, {"label" : "PEquality", "tail" : "", "member" : "tofu.optics.classic.PEquality", "link" : "tofu\/optics\/classic$.html#PEquality[S,T,A,B]=tofu.optics.PSame[S,T,A,B]", "kind" : "type"}, {"label" : "PSetter", "tail" : ": PUpdate.type", "member" : "tofu.optics.classic.PSetter", "link" : "tofu\/optics\/classic$.html#PSetter:tofu.optics.PUpdate.type", "kind" : "val"}, {"label" : "PFold", "tail" : ": PFolded.type", "member" : "tofu.optics.classic.PFold", "link" : "tofu\/optics\/classic$.html#PFold:tofu.optics.PFolded.type", "kind" : "val"}, {"label" : "PGetter", "tail" : ": PExtract.type", "member" : "tofu.optics.classic.PGetter", "link" : "tofu\/optics\/classic$.html#PGetter:tofu.optics.PExtract.type", "kind" : "val"}, {"label" : "PReview", "tail" : ": PUpcast.type", "member" : "tofu.optics.classic.PReview", "link" : "tofu\/optics\/classic$.html#PReview:tofu.optics.PUpcast.type", "kind" : "val"}, {"label" : "PView", "tail" : ": PDowncast.type", "member" : "tofu.optics.classic.PView", "link" : "tofu\/optics\/classic$.html#PView:tofu.optics.PDowncast.type", "kind" : "val"}, {"label" : "PNonEmptyFold", "tail" : ": PReduced.type", "member" : "tofu.optics.classic.PNonEmptyFold", "link" : "tofu\/optics\/classic$.html#PNonEmptyFold:tofu.optics.PReduced.type", "kind" : "val"}, {"label" : "PTraversal", "tail" : ": PItems.type", "member" : "tofu.optics.classic.PTraversal", "link" : "tofu\/optics\/classic$.html#PTraversal:tofu.optics.PItems.type", "kind" : "val"}, {"label" : "PNonEmptyTraversal", "tail" : ": PRepeated.type", "member" : "tofu.optics.classic.PNonEmptyTraversal", "link" : "tofu\/optics\/classic$.html#PNonEmptyTraversal:tofu.optics.PRepeated.type", "kind" : "val"}, {"label" : "POptional", "tail" : ": PProperty.type", "member" : "tofu.optics.classic.POptional", "link" : "tofu\/optics\/classic$.html#POptional:tofu.optics.PProperty.type", "kind" : "val"}, {"label" : "PLens", "tail" : ": PContains.type", "member" : "tofu.optics.classic.PLens", "link" : "tofu\/optics\/classic$.html#PLens:tofu.optics.PContains.type", "kind" : "val"}, {"label" : "PPrism", "tail" : ": PSubset.type", "member" : "tofu.optics.classic.PPrism", "link" : "tofu\/optics\/classic$.html#PPrism:tofu.optics.PSubset.type", "kind" : "val"}, {"label" : "PIso", "tail" : ": PEquivalent.type", "member" : "tofu.optics.classic.PIso", "link" : "tofu\/optics\/classic$.html#PIso:tofu.optics.PEquivalent.type", "kind" : "val"}, {"label" : "PEquality", "tail" : ": PSame.type", "member" : "tofu.optics.classic.PEquality", "link" : "tofu\/optics\/classic$.html#PEquality:tofu.optics.PSame.type", "kind" : "val"}, {"label" : "Setter", "tail" : "", "member" : "tofu.optics.classic.Setter", "link" : "tofu\/optics\/classic$.html#Setter[A,B]=tofu.optics.PUpdate[A,A,B,B]", "kind" : "type"}, {"label" : "Fold", "tail" : "", "member" : "tofu.optics.classic.Fold", "link" : "tofu\/optics\/classic$.html#Fold[A,B]=tofu.optics.PFolded[A,A,B,B]", "kind" : "type"}, {"label" : "Getter", "tail" : "", "member" : "tofu.optics.classic.Getter", "link" : "tofu\/optics\/classic$.html#Getter[A,B]=tofu.optics.PExtract[A,A,B,B]", "kind" : "type"}, {"label" : "Review", "tail" : "", "member" : "tofu.optics.classic.Review", "link" : "tofu\/optics\/classic$.html#Review[A,B]=tofu.optics.PUpcast[A,A,B,B]", "kind" : "type"}, {"label" : "View", "tail" : "", "member" : "tofu.optics.classic.View", "link" : "tofu\/optics\/classic$.html#View[A,B]=tofu.optics.PDowncast[A,A,B,B]", "kind" : "type"}, {"label" : "NonEmptyFold", "tail" : "", "member" : "tofu.optics.classic.NonEmptyFold", "link" : "tofu\/optics\/classic$.html#NonEmptyFold[A,B]=tofu.optics.PReduced[A,A,B,B]", "kind" : "type"}, {"label" : "Traversal", "tail" : "", "member" : "tofu.optics.classic.Traversal", "link" : "tofu\/optics\/classic$.html#Traversal[A,B]=tofu.optics.PItems[A,A,B,B]", "kind" : "type"}, {"label" : "NonEmptyTraversal", "tail" : "", "member" : "tofu.optics.classic.NonEmptyTraversal", "link" : "tofu\/optics\/classic$.html#NonEmptyTraversal[A,B]=tofu.optics.PRepeated[A,A,B,B]", "kind" : "type"}, {"label" : "Optional", "tail" : "", "member" : "tofu.optics.classic.Optional", "link" : "tofu\/optics\/classic$.html#Optional[A,B]=tofu.optics.PProperty[A,A,B,B]", "kind" : "type"}, {"label" : "Lens", "tail" : "", "member" : "tofu.optics.classic.Lens", "link" : "tofu\/optics\/classic$.html#Lens[A,B]=tofu.optics.PContains[A,A,B,B]", "kind" : "type"}, {"label" : "Prism", "tail" : "", "member" : "tofu.optics.classic.Prism", "link" : "tofu\/optics\/classic$.html#Prism[A,B]=tofu.optics.PSubset[A,A,B,B]", "kind" : "type"}, {"label" : "Iso", "tail" : "", "member" : "tofu.optics.classic.Iso", "link" : "tofu\/optics\/classic$.html#Iso[A,B]=tofu.optics.PEquivalent[A,A,B,B]", "kind" : "type"}, {"label" : "Equality", "tail" : "", "member" : "tofu.optics.classic.Equality", "link" : "tofu\/optics\/classic$.html#Equality[A,B]=tofu.optics.PSame[A,A,B,B]", "kind" : "type"}, {"label" : "Setter", "tail" : ": Update.type", "member" : "tofu.optics.classic.Setter", "link" : "tofu\/optics\/classic$.html#Setter:tofu.optics.Update.type", "kind" : "val"}, {"label" : "Fold", "tail" : ": Folded.type", "member" : "tofu.optics.classic.Fold", "link" : "tofu\/optics\/classic$.html#Fold:tofu.optics.Folded.type", "kind" : "val"}, {"label" : "Getter", "tail" : ": Extract.type", "member" : "tofu.optics.classic.Getter", "link" : "tofu\/optics\/classic$.html#Getter:tofu.optics.Extract.type", "kind" : "val"}, {"label" : "Review", "tail" : ": Upcast.type", "member" : "tofu.optics.classic.Review", "link" : "tofu\/optics\/classic$.html#Review:tofu.optics.Upcast.type", "kind" : "val"}, {"label" : "View", "tail" : ": Downcast.type", "member" : "tofu.optics.classic.View", "link" : "tofu\/optics\/classic$.html#View:tofu.optics.Downcast.type", "kind" : "val"}, {"label" : "NonEmptyFold", "tail" : ": Reduced.type", "member" : "tofu.optics.classic.NonEmptyFold", "link" : "tofu\/optics\/classic$.html#NonEmptyFold:tofu.optics.Reduced.type", "kind" : "val"}, {"label" : "Traversal", "tail" : ": Items.type", "member" : "tofu.optics.classic.Traversal", "link" : "tofu\/optics\/classic$.html#Traversal:tofu.optics.Items.type", "kind" : "val"}, {"label" : "NonEmptyTraversal", "tail" : ": Repeated.type", "member" : "tofu.optics.classic.NonEmptyTraversal", "link" : "tofu\/optics\/classic$.html#NonEmptyTraversal:tofu.optics.Repeated.type", "kind" : "val"}, {"label" : "Optional", "tail" : ": Property.type", "member" : "tofu.optics.classic.Optional", "link" : "tofu\/optics\/classic$.html#Optional:tofu.optics.Property.type", "kind" : "val"}, {"label" : "Lens", "tail" : ": Contains.type", "member" : "tofu.optics.classic.Lens", "link" : "tofu\/optics\/classic$.html#Lens:tofu.optics.Contains.type", "kind" : "val"}, {"label" : "Prism", "tail" : ": Subset.type", "member" : "tofu.optics.classic.Prism", "link" : "tofu\/optics\/classic$.html#Prism:tofu.optics.Subset.type", "kind" : "val"}, {"label" : "Iso", "tail" : ": Equivalent.type", "member" : "tofu.optics.classic.Iso", "link" : "tofu\/optics\/classic$.html#Iso:tofu.optics.Equivalent.type", "kind" : "val"}, {"label" : "Equality", "tail" : ": Same.type", "member" : "tofu.optics.classic.Equality", "link" : "tofu\/optics\/classic$.html#Equality:tofu.optics.Same.type", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/classic$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/classic$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/classic$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/classic$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/classic$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/classic$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/classic$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/classic$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/classic$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/classic$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/classic$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/classic$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/classic$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/classic$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/classic$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/classic$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/classic$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/classic$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/classic$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.optics.Contains", "shortDescription" : "", "object" : "tofu\/optics\/Contains$.html", "members_object" : [{"label" : "ContainsApplied", "tail" : "", "member" : "tofu.optics.Contains.ContainsApplied", "link" : "tofu\/optics\/Contains$.html#ContainsApplied[A]extendsAnyVal", "kind" : "final class"}, {"label" : "apply", "tail" : "(): ContainsApplied[A]", "member" : "tofu.optics.Contains.apply", "link" : "tofu\/optics\/Contains$.html#apply[A]:tofu.optics.Contains.ContainsApplied[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(f: O[B, C], g: O[A, B]): O[A, C]", "member" : "tofu.optics.MonoOpticCompanion.compose", "link" : "tofu\/optics\/Contains$.html#compose[A,B,C](f:MonoOpticCompanion.this.O[B,C],g:MonoOpticCompanion.this.O[A,B]):MonoOpticCompanion.this.O[A,C]", "kind" : "def"}, {"label" : "apply", "tail" : "(o: O[A, B]): O[A, B]", "member" : "tofu.optics.MonoOpticCompanion.apply", "link" : "tofu\/optics\/Contains$.html#apply[A,B](implicito:MonoOpticCompanion.this.O[A,B]):MonoOpticCompanion.this.O[A,B]", "kind" : "def"}, {"label" : "O", "tail" : "", "member" : "tofu.optics.MonoOpticCompanion.O", "link" : "tofu\/optics\/Contains$.html#O[a,b]=PO[a,a,b,b]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/Contains$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/Contains$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/Contains$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/Contains$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/Contains$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/Contains$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/Contains$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Contains$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Contains$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Contains$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/Contains$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/Contains$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/Contains$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/Contains$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/Contains$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/Contains$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/Contains$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/Contains$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/Contains$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.optics.Downcast", "shortDescription" : "", "object" : "tofu\/optics\/Downcast$.html", "members_object" : [{"label" : "compose", "tail" : "(f: O[B, C], g: O[A, B]): O[A, C]", "member" : "tofu.optics.MonoOpticCompanion.compose", "link" : "tofu\/optics\/Downcast$.html#compose[A,B,C](f:MonoOpticCompanion.this.O[B,C],g:MonoOpticCompanion.this.O[A,B]):MonoOpticCompanion.this.O[A,C]", "kind" : "def"}, {"label" : "apply", "tail" : "(o: O[A, B]): O[A, B]", "member" : "tofu.optics.MonoOpticCompanion.apply", "link" : "tofu\/optics\/Downcast$.html#apply[A,B](implicito:MonoOpticCompanion.this.O[A,B]):MonoOpticCompanion.this.O[A,B]", "kind" : "def"}, {"label" : "O", "tail" : "", "member" : "tofu.optics.MonoOpticCompanion.O", "link" : "tofu\/optics\/Downcast$.html#O[a,b]=PO[a,a,b,b]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/Downcast$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/Downcast$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/Downcast$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/Downcast$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/Downcast$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/Downcast$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/Downcast$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Downcast$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Downcast$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Downcast$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/Downcast$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/Downcast$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/Downcast$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/Downcast$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/Downcast$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/Downcast$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/Downcast$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/Downcast$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/Downcast$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.optics.Equivalent", "shortDescription" : "", "object" : "tofu\/optics\/Equivalent$.html", "members_object" : [{"label" : "EquivalentApplied", "tail" : "", "member" : "tofu.optics.Equivalent.EquivalentApplied", "link" : "tofu\/optics\/Equivalent$.html#EquivalentApplied[A]extendsAnyVal", "kind" : "final class"}, {"label" : "apply", "tail" : "(): EquivalentApplied[A]", "member" : "tofu.optics.Equivalent.apply", "link" : "tofu\/optics\/Equivalent$.html#apply[A]:tofu.optics.Equivalent.EquivalentApplied[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(f: O[B, C], g: O[A, B]): O[A, C]", "member" : "tofu.optics.MonoOpticCompanion.compose", "link" : "tofu\/optics\/Equivalent$.html#compose[A,B,C](f:MonoOpticCompanion.this.O[B,C],g:MonoOpticCompanion.this.O[A,B]):MonoOpticCompanion.this.O[A,C]", "kind" : "def"}, {"label" : "apply", "tail" : "(o: O[A, B]): O[A, B]", "member" : "tofu.optics.MonoOpticCompanion.apply", "link" : "tofu\/optics\/Equivalent$.html#apply[A,B](implicito:MonoOpticCompanion.this.O[A,B]):MonoOpticCompanion.this.O[A,B]", "kind" : "def"}, {"label" : "O", "tail" : "", "member" : "tofu.optics.MonoOpticCompanion.O", "link" : "tofu\/optics\/Equivalent$.html#O[a,b]=PO[a,a,b,b]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/Equivalent$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/Equivalent$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/Equivalent$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/Equivalent$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/Equivalent$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/Equivalent$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/Equivalent$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Equivalent$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Equivalent$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Equivalent$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/Equivalent$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/Equivalent$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/Equivalent$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/Equivalent$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/Equivalent$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/Equivalent$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/Equivalent$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/Equivalent$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/Equivalent$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.optics.Extract", "shortDescription" : "", "object" : "tofu\/optics\/Extract$.html", "members_object" : [{"label" : "compose", "tail" : "(f: O[B, C], g: O[A, B]): O[A, C]", "member" : "tofu.optics.MonoOpticCompanion.compose", "link" : "tofu\/optics\/Extract$.html#compose[A,B,C](f:MonoOpticCompanion.this.O[B,C],g:MonoOpticCompanion.this.O[A,B]):MonoOpticCompanion.this.O[A,C]", "kind" : "def"}, {"label" : "apply", "tail" : "(o: O[A, B]): O[A, B]", "member" : "tofu.optics.MonoOpticCompanion.apply", "link" : "tofu\/optics\/Extract$.html#apply[A,B](implicito:MonoOpticCompanion.this.O[A,B]):MonoOpticCompanion.this.O[A,B]", "kind" : "def"}, {"label" : "O", "tail" : "", "member" : "tofu.optics.MonoOpticCompanion.O", "link" : "tofu\/optics\/Extract$.html#O[a,b]=PO[a,a,b,b]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/Extract$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/Extract$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/Extract$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/Extract$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/Extract$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/Extract$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/Extract$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Extract$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Extract$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Extract$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/Extract$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/Extract$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/Extract$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/Extract$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/Extract$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/Extract$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/Extract$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/Extract$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/Extract$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.optics.Folded", "shortDescription" : "", "object" : "tofu\/optics\/Folded$.html", "members_object" : [{"label" : "FoldedApply", "tail" : "", "member" : "tofu.optics.Folded.FoldedApply", "link" : "tofu\/optics\/Folded$.html#FoldedApply[S]extendsAnyRef", "kind" : "class"}, {"label" : "apply", "tail" : "(): FoldedApply[S]", "member" : "tofu.optics.Folded.apply", "link" : "tofu\/optics\/Folded$.html#apply[S]:tofu.optics.Folded.FoldedApply[S]", "kind" : "def"}, {"label" : "compose", "tail" : "(f: O[B, C], g: O[A, B]): O[A, C]", "member" : "tofu.optics.MonoOpticCompanion.compose", "link" : "tofu\/optics\/Folded$.html#compose[A,B,C](f:MonoOpticCompanion.this.O[B,C],g:MonoOpticCompanion.this.O[A,B]):MonoOpticCompanion.this.O[A,C]", "kind" : "def"}, {"label" : "apply", "tail" : "(o: O[A, B]): O[A, B]", "member" : "tofu.optics.MonoOpticCompanion.apply", "link" : "tofu\/optics\/Folded$.html#apply[A,B](implicito:MonoOpticCompanion.this.O[A,B]):MonoOpticCompanion.this.O[A,B]", "kind" : "def"}, {"label" : "O", "tail" : "", "member" : "tofu.optics.MonoOpticCompanion.O", "link" : "tofu\/optics\/Folded$.html#O[a,b]=PO[a,a,b,b]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/Folded$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/Folded$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/Folded$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/Folded$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/Folded$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/Folded$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/Folded$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Folded$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Folded$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Folded$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/Folded$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/Folded$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/Folded$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/Folded$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/Folded$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/Folded$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/Folded$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/Folded$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/Folded$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.optics.functions", "shortDescription" : "", "object" : "tofu\/optics\/functions$.html", "members_object" : [{"label" : "extractSubtype", "tail" : "(): Extract[A, B]", "member" : "tofu.optics.functions.extractSubtype", "link" : "tofu\/optics\/functions$.html#extractSubtype[A<:B,B]:tofu.optics.Extract[A,B]", "kind" : "def"}, {"label" : "none", "tail" : "(): Subset[Option[A], Unit]", "member" : "tofu.optics.functions.none", "link" : "tofu\/optics\/functions$.html#none[A]:tofu.optics.Subset[Option[A],Unit]", "kind" : "def"}, {"label" : "some", "tail" : "(): Subset[Option[A], A]", "member" : "tofu.optics.functions.some", "link" : "tofu\/optics\/functions$.html#some[A]:tofu.optics.Subset[Option[A],A]", "kind" : "def"}, {"label" : "left", "tail" : "(): Subset[Either[A, B], A]", "member" : "tofu.optics.functions.left", "link" : "tofu\/optics\/functions$.html#left[A,B]:tofu.optics.Subset[Either[A,B],A]", "kind" : "def"}, {"label" : "right", "tail" : "(): Subset[Either[A, B], B]", "member" : "tofu.optics.functions.right", "link" : "tofu\/optics\/functions$.html#right[A,B]:tofu.optics.Subset[Either[A,B],B]", "kind" : "def"}, {"label" : "everyTuple4", "tail" : "(): PItems[(A, A, A, A), (B, B, B, B), A, B]", "member" : "tofu.optics.functions.everyTuple4", "link" : "tofu\/optics\/functions$.html#everyTuple4[A,B]:tofu.optics.PItems[(A,A,A,A),(B,B,B,B),A,B]", "kind" : "def"}, {"label" : "everyTuple3", "tail" : "(): PItems[(A, A, A), (B, B, B), A, B]", "member" : "tofu.optics.functions.everyTuple3", "link" : "tofu\/optics\/functions$.html#everyTuple3[A,B]:tofu.optics.PItems[(A,A,A),(B,B,B),A,B]", "kind" : "def"}, {"label" : "everyTuple2", "tail" : "(): PItems[(A, A), (B, B), A, B]", "member" : "tofu.optics.functions.everyTuple2", "link" : "tofu\/optics\/functions$.html#everyTuple2[A,B]:tofu.optics.PItems[(A,A),(B,B),A,B]", "kind" : "def"}, {"label" : "vecItems", "tail" : "(): PItems[Vector[A], Vector[B], A, B]", "member" : "tofu.optics.functions.vecItems", "link" : "tofu\/optics\/functions$.html#vecItems[A,B]:tofu.optics.PItems[Vector[A],Vector[B],A,B]", "kind" : "def"}, {"label" : "listItems", "tail" : "(): PItems[List[A], List[B], A, B]", "member" : "tofu.optics.functions.listItems", "link" : "tofu\/optics\/functions$.html#listItems[A,B]:tofu.optics.PItems[List[A],List[B],A,B]", "kind" : "def"}, {"label" : "mapItems", "tail" : "(): PItems[Map[K, V1], Map[K, V2], V1, V2]", "member" : "tofu.optics.functions.mapItems", "link" : "tofu\/optics\/functions$.html#mapItems[K,V1,V2]:tofu.optics.PItems[Map[K,V1],Map[K,V2],V1,V2]", "kind" : "def"}, {"label" : "vecItem", "tail" : "(i: Int): Property[Vector[A], A]", "member" : "tofu.optics.functions.vecItem", "link" : "tofu\/optics\/functions$.html#vecItem[A](i:Int):tofu.optics.Property[Vector[A],A]", "kind" : "def"}, {"label" : "mapItem", "tail" : "(k: K): Property[Map[K, V], V]", "member" : "tofu.optics.functions.mapItem", "link" : "tofu\/optics\/functions$.html#mapItem[K,V](k:K):tofu.optics.Property[Map[K,V],V]", "kind" : "def"}, {"label" : "listItem", "tail" : "(i: Int): Property[List[A], A]", "member" : "tofu.optics.functions.listItem", "link" : "tofu\/optics\/functions$.html#listItem[A](i:Int):tofu.optics.Property[List[A],A]", "kind" : "def"}, {"label" : "mapAt", "tail" : "(k: K): Contains[Map[K, V], Option[V]]", "member" : "tofu.optics.functions.mapAt", "link" : "tofu\/optics\/functions$.html#mapAt[K,V](k:K):tofu.optics.Contains[Map[K,V],Option[V]]", "kind" : "def"}, {"label" : "listAt", "tail" : "(i: Int): Contains[List[A], Option[A]]", "member" : "tofu.optics.functions.listAt", "link" : "tofu\/optics\/functions$.html#listAt[A](i:Int):tofu.optics.Contains[List[A],Option[A]]", "kind" : "def"}, {"label" : "setAt", "tail" : "(a: A): Contains[Set[A], Boolean]", "member" : "tofu.optics.functions.setAt", "link" : "tofu\/optics\/functions$.html#setAt[A](a:A):tofu.optics.Contains[Set[A],Boolean]", "kind" : "def"}, {"label" : "streamElems", "tail" : "(): PItems[Stream[A], Stream[B], A, B]", "member" : "tofu.optics.functions.streamElems", "link" : "tofu\/optics\/functions$.html#streamElems[A,B]:tofu.optics.PItems[Stream[A],Stream[B],A,B]", "kind" : "def"}, {"label" : "vectorElems", "tail" : "(): PItems[Vector[A], Vector[B], A, B]", "member" : "tofu.optics.functions.vectorElems", "link" : "tofu\/optics\/functions$.html#vectorElems[A,B]:tofu.optics.PItems[Vector[A],Vector[B],A,B]", "kind" : "def"}, {"label" : "listElems", "tail" : "(): PItems[List[A], List[B], A, B]", "member" : "tofu.optics.functions.listElems", "link" : "tofu\/optics\/functions$.html#listElems[A,B]:tofu.optics.PItems[List[A],List[B],A,B]", "kind" : "def"}, {"label" : "both2", "tail" : "(): PRepeated[(A, A), (B, B), A, B]", "member" : "tofu.optics.functions.both2", "link" : "tofu\/optics\/functions$.html#both2[A,B]:tofu.optics.PRepeated[(A,A),(B,B),A,B]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/functions$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/functions$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/functions$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/functions$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/functions$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/functions$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/functions$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/functions$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/functions$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/functions$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/functions$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/functions$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/functions$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/functions$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/functions$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/functions$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/functions$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/functions$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/functions$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.optics.interop", "shortDescription" : "", "object" : "tofu\/optics\/interop$.html", "members_object" : [{"label" : "GetterInteropOps", "tail" : "", "member" : "tofu.optics.interop.GetterInteropOps", "link" : "tofu\/optics\/interop$.html#GetterInteropOps[S,A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "ExtractInteropOps", "tail" : "", "member" : "tofu.optics.interop.ExtractInteropOps", "link" : "tofu\/optics\/interop$.html#ExtractInteropOps[S,T,A,B]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "SettterInteropOps", "tail" : "", "member" : "tofu.optics.interop.SettterInteropOps", "link" : "tofu\/optics\/interop$.html#SettterInteropOps[S,T,A,B]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "UpdateInteropOps", "tail" : "", "member" : "tofu.optics.interop.UpdateInteropOps", "link" : "tofu\/optics\/interop$.html#UpdateInteropOps[S,T,A,B]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "FoldInteropOps", "tail" : "", "member" : "tofu.optics.interop.FoldInteropOps", "link" : "tofu\/optics\/interop$.html#FoldInteropOps[S,A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "FoldedInteropOps", "tail" : "", "member" : "tofu.optics.interop.FoldedInteropOps", "link" : "tofu\/optics\/interop$.html#FoldedInteropOps[S,T,A,B]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "TraversalInteropOps", "tail" : "", "member" : "tofu.optics.interop.TraversalInteropOps", "link" : "tofu\/optics\/interop$.html#TraversalInteropOps[S,T,A,B]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "ItemsInteropOps", "tail" : "", "member" : "tofu.optics.interop.ItemsInteropOps", "link" : "tofu\/optics\/interop$.html#ItemsInteropOps[S,T,A,B]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "MonocleOptionalInteropOps", "tail" : "", "member" : "tofu.optics.interop.MonocleOptionalInteropOps", "link" : "tofu\/optics\/interop$.html#MonocleOptionalInteropOps[S,T,A,B]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "PropertyInteropOps", "tail" : "", "member" : "tofu.optics.interop.PropertyInteropOps", "link" : "tofu\/optics\/interop$.html#PropertyInteropOps[S,T,A,B]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "MonoclePrismInteropOps", "tail" : "", "member" : "tofu.optics.interop.MonoclePrismInteropOps", "link" : "tofu\/optics\/interop$.html#MonoclePrismInteropOps[S,T,A,B]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "SubsetInteropOps", "tail" : "", "member" : "tofu.optics.interop.SubsetInteropOps", "link" : "tofu\/optics\/interop$.html#SubsetInteropOps[S,T,A,B]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "MonocleLensInteropOps", "tail" : "", "member" : "tofu.optics.interop.MonocleLensInteropOps", "link" : "tofu\/optics\/interop$.html#MonocleLensInteropOps[S,T,A,B]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "ContainsInteropOps", "tail" : "", "member" : "tofu.optics.interop.ContainsInteropOps", "link" : "tofu\/optics\/interop$.html#ContainsInteropOps[S,T,A,B]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "MonocleIsoInteropOps", "tail" : "", "member" : "tofu.optics.interop.MonocleIsoInteropOps", "link" : "tofu\/optics\/interop$.html#MonocleIsoInteropOps[S,T,A,B]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "EquivalentInteropOps", "tail" : "", "member" : "tofu.optics.interop.EquivalentInteropOps", "link" : "tofu\/optics\/interop$.html#EquivalentInteropOps[S,T,A,B]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/interop$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/interop$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/interop$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/interop$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/interop$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/interop$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/interop$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/interop$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/interop$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/interop$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/interop$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/interop$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/interop$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/interop$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/interop$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/interop$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/interop$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/interop$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/interop$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.optics.Items", "shortDescription" : "", "object" : "tofu\/optics\/Items$.html", "members_object" : [{"label" : "ItemsApply", "tail" : "", "member" : "tofu.optics.Items.ItemsApply", "link" : "tofu\/optics\/Items$.html#ItemsApply[S]extendsAnyRef", "kind" : "class"}, {"label" : "apply", "tail" : "(): ItemsApply[S]", "member" : "tofu.optics.Items.apply", "link" : "tofu\/optics\/Items$.html#apply[S]:tofu.optics.Items.ItemsApply[S]", "kind" : "def"}, {"label" : "compose", "tail" : "(f: O[B, C], g: O[A, B]): O[A, C]", "member" : "tofu.optics.MonoOpticCompanion.compose", "link" : "tofu\/optics\/Items$.html#compose[A,B,C](f:MonoOpticCompanion.this.O[B,C],g:MonoOpticCompanion.this.O[A,B]):MonoOpticCompanion.this.O[A,C]", "kind" : "def"}, {"label" : "apply", "tail" : "(o: O[A, B]): O[A, B]", "member" : "tofu.optics.MonoOpticCompanion.apply", "link" : "tofu\/optics\/Items$.html#apply[A,B](implicito:MonoOpticCompanion.this.O[A,B]):MonoOpticCompanion.this.O[A,B]", "kind" : "def"}, {"label" : "O", "tail" : "", "member" : "tofu.optics.MonoOpticCompanion.O", "link" : "tofu\/optics\/Items$.html#O[a,b]=PO[a,a,b,b]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/Items$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/Items$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/Items$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/Items$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/Items$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/Items$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/Items$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Items$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Items$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Items$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/Items$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/Items$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/Items$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/Items$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/Items$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/Items$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/Items$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/Items$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/Items$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.optics.MonoOpticCompanion", "shortDescription" : "", "members_class" : [{"label" : "compose", "tail" : "(f: O[B, C], g: O[A, B]): O[A, C]", "member" : "tofu.optics.MonoOpticCompanion.compose", "link" : "tofu\/optics\/MonoOpticCompanion.html#compose[A,B,C](f:MonoOpticCompanion.this.O[B,C],g:MonoOpticCompanion.this.O[A,B]):MonoOpticCompanion.this.O[A,C]", "kind" : "def"}, {"label" : "apply", "tail" : "(o: O[A, B]): O[A, B]", "member" : "tofu.optics.MonoOpticCompanion.apply", "link" : "tofu\/optics\/MonoOpticCompanion.html#apply[A,B](implicito:MonoOpticCompanion.this.O[A,B]):MonoOpticCompanion.this.O[A,B]", "kind" : "def"}, {"label" : "O", "tail" : "", "member" : "tofu.optics.MonoOpticCompanion.O", "link" : "tofu\/optics\/MonoOpticCompanion.html#O[a,b]=PO[a,a,b,b]", "kind" : "type"}, {"member" : "tofu.optics.MonoOpticCompanion#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/MonoOpticCompanion.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/MonoOpticCompanion.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/MonoOpticCompanion.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/MonoOpticCompanion.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/MonoOpticCompanion.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/MonoOpticCompanion.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/MonoOpticCompanion.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/MonoOpticCompanion.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/MonoOpticCompanion.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/MonoOpticCompanion.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/MonoOpticCompanion.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/MonoOpticCompanion.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/MonoOpticCompanion.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/MonoOpticCompanion.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/MonoOpticCompanion.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/MonoOpticCompanion.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/MonoOpticCompanion.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/MonoOpticCompanion.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/MonoOpticCompanion.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "tofu\/optics\/MonoOpticCompanion.html", "kind" : "class"}, {"name" : "tofu.optics.MonoOpticOps", "shortDescription" : "", "members_class" : [{"label" : "->:", "tail" : "(s: S): Applied[O, S, S, A, A]", "member" : "tofu.optics.MonoOpticOps.->:", "link" : "tofu\/optics\/MonoOpticOps.html#->:(s:S):tofu.optics.Applied[O,S,S,A,A]", "kind" : "def"}, {"member" : "tofu.optics.MonoOpticOps#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "tofu\/optics\/MonoOpticOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "tofu\/optics\/MonoOpticOps.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/MonoOpticOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/MonoOpticOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "tofu\/optics\/MonoOpticOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "tofu\/optics\/MonoOpticOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "tofu\/optics\/MonoOpticOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "tofu\/optics\/MonoOpticOps.html", "kind" : "class"}, {"name" : "tofu.optics.Optic", "object" : "tofu\/optics\/Optic$.html", "members_object" : [{"label" : "opticCategoryInstance", "tail" : "(): Category[[β$0$, γ$1$]Optic[Ctx, β$0$, β$0$, γ$1$, γ$1$]]", "member" : "tofu.optics.Optic.opticCategoryInstance", "link" : "tofu\/optics\/Optic$.html#opticCategoryInstance[Ctx<:tofu.optics.OpticContext]:cats.arrow.Category[[β$0$,γ$1$]tofu.optics.Optic[Ctx,β$0$,β$0$,γ$1$,γ$1$]]", "kind" : "implicit def"}, {"label" : "id", "tail" : "(): Optic[Ctx, S, A, S, A]", "member" : "tofu.optics.Optic.id", "link" : "tofu\/optics\/Optic$.html#id[Ctx<:tofu.optics.OpticContext,S,A]:tofu.optics.Optic[Ctx,S,A,S,A]", "kind" : "def"}, {"label" : "Mono", "tail" : "", "member" : "tofu.optics.Optic.Mono", "link" : "tofu\/optics\/Optic$.html#Mono[C<:tofu.optics.OpticContext,A,B]=tofu.optics.Optic[C,A,A,B,B]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/Optic$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/Optic$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/Optic$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/Optic$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/Optic$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/Optic$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/Optic$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Optic$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Optic$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Optic$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/Optic$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/Optic$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/Optic$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/Optic$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/Optic$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/Optic$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/Optic$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/Optic$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/Optic$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/optics\/Optic.html", "kind" : "trait", "members_trait" : [{"label" : "andThen", "tail" : "(that: Optic[C1, A, B, U, V]): Optic[C1, S, T, U, V]", "member" : "tofu.optics.Optic.andThen", "link" : "tofu\/optics\/Optic.html#andThen[C1<:Ctx,U,V](that:tofu.optics.Optic[C1,A,B,U,V]):tofu.optics.Optic[C1,S,T,U,V]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/Optic.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/Optic.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/Optic.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/Optic.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/Optic.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/Optic.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/Optic.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Optic.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Optic.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Optic.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/Optic.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/Optic.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/Optic.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/Optic.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/Optic.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/Optic.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/Optic.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/Optic.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/Optic.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(c: Ctx)(p: Ctx.P[A, Ctx.F[B]]): Ctx.P[S, Ctx.F[T]]", "member" : "tofu.optics.Optic.apply", "link" : "tofu\/optics\/Optic.html#apply(c:Ctx)(p:c.P[A,c.F[B]]):c.P[S,c.F[T]]", "kind" : "abstract def"}], "shortDescription" : "generic optic form, aka Profunctor Optic"}, {"name" : "tofu.optics.OpticCompanion", "trait" : "tofu\/optics\/OpticCompanion.html", "kind" : "trait", "members_trait" : [{"label" : "toMonoOpticOps", "tail" : "(o: O[S, S, A, A]): MonoOpticOps[O, S, A]", "member" : "tofu.optics.OpticCompanion.toMonoOpticOps", "link" : "tofu\/optics\/OpticCompanion.html#toMonoOpticOps[S,A](o:O[S,S,A,A]):tofu.optics.MonoOpticOps[O,S,A]", "kind" : "implicit final def"}, {"label" : "toOpticComposeOps", "tail" : "(o: O[S, T, A, B]): OpticComposeOps[O, S, T, A, B]", "member" : "tofu.optics.OpticCompanion.toOpticComposeOps", "link" : "tofu\/optics\/OpticCompanion.html#toOpticComposeOps[S,T,A,B](o:O[S,T,A,B]):tofu.optics.OpticComposeOps[O,S,T,A,B]", "kind" : "implicit final def"}, {"label" : "category2", "tail" : ": Category2[O]", "member" : "tofu.optics.OpticCompanion.category2", "link" : "tofu\/optics\/OpticCompanion.html#category2:tofu.optics.classes.Category2[O]", "kind" : "implicit final val"}, {"label" : "category", "tail" : ": Category[Mono]", "member" : "tofu.optics.OpticCompanion.category", "link" : "tofu\/optics\/OpticCompanion.html#category:cats.arrow.Category[OpticCompanion.this.Mono]", "kind" : "implicit final val"}, {"label" : "Mono", "tail" : "", "member" : "tofu.optics.OpticCompanion.Mono", "link" : "tofu\/optics\/OpticCompanion.html#Mono[a,b]=O[a,a,b,b]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/OpticCompanion.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/OpticCompanion.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/OpticCompanion.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/OpticCompanion.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/OpticCompanion.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/OpticCompanion.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/OpticCompanion.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/OpticCompanion.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/OpticCompanion.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/OpticCompanion.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/OpticCompanion.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/OpticCompanion.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/OpticCompanion.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/OpticCompanion.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/OpticCompanion.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/OpticCompanion.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/OpticCompanion.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/OpticCompanion.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/OpticCompanion.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "fromGeneric", "tail" : "(o: Optic[Context, S, T, A, B]): O[S, T, A, B]", "member" : "tofu.optics.OpticCompanion.fromGeneric", "link" : "tofu\/optics\/OpticCompanion.html#fromGeneric[S,T,A,B](o:tofu.optics.Optic[OpticCompanion.this.Context,S,T,A,B]):O[S,T,A,B]", "kind" : "abstract def"}, {"label" : "toGeneric", "tail" : "(o: O[S, T, A, B]): Optic[Context, S, T, A, B]", "member" : "tofu.optics.OpticCompanion.toGeneric", "link" : "tofu\/optics\/OpticCompanion.html#toGeneric[S,T,A,B](o:O[S,T,A,B]):tofu.optics.Optic[OpticCompanion.this.Context,S,T,A,B]", "kind" : "abstract def"}, {"label" : "compose", "tail" : "(f: O[A, B, U, V], g: O[S, T, A, B]): O[S, T, U, V]", "member" : "tofu.optics.OpticCompanion.compose", "link" : "tofu\/optics\/OpticCompanion.html#compose[S,T,A,B,U,V](f:O[A,B,U,V],g:O[S,T,A,B]):O[S,T,U,V]", "kind" : "abstract def"}, {"member" : "tofu.optics.OpticCompanion.Context", "error" : "unsupported entity"}], "shortDescription" : ""}, {"name" : "tofu.optics.OpticComposeOps", "shortDescription" : "", "members_class" : [{"label" : ">>", "tail" : "(o1: O1[A, B, U, V])(arg0: Category2[O1]): O1[S, T, U, V]", "member" : "tofu.optics.OpticComposeOps.>>", "link" : "tofu\/optics\/OpticComposeOps.html#>>[O1[s,t,a,b]>:O[s,t,a,b],U,V](o1:O1[A,B,U,V])(implicitevidence$1:tofu.optics.classes.Category2[O1]):O1[S,T,U,V]", "kind" : "def"}, {"label" : "andThen", "tail" : "(o1: O1[A, B, U, V])(category2: Category2[O1]): O1[S, T, U, V]", "member" : "tofu.optics.OpticComposeOps.andThen", "link" : "tofu\/optics\/OpticComposeOps.html#andThen[O1[s,t,a,b]>:O[s,t,a,b],U,V](o1:O1[A,B,U,V])(implicitcategory2:tofu.optics.classes.Category2[O1]):O1[S,T,U,V]", "kind" : "def"}, {"member" : "tofu.optics.OpticComposeOps#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "tofu\/optics\/OpticComposeOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "tofu\/optics\/OpticComposeOps.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/OpticComposeOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/OpticComposeOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "tofu\/optics\/OpticComposeOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "tofu\/optics\/OpticComposeOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "tofu\/optics\/OpticComposeOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "tofu\/optics\/OpticComposeOps.html", "kind" : "class"}, {"name" : "tofu.optics.OpticContext", "trait" : "tofu\/optics\/OpticContext.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/OpticContext.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/OpticContext.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/OpticContext.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/OpticContext.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/OpticContext.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/OpticContext.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/OpticContext.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/OpticContext.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/OpticContext.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/OpticContext.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/OpticContext.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/OpticContext.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/OpticContext.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/OpticContext.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/OpticContext.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/OpticContext.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/OpticContext.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/OpticContext.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/OpticContext.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"member" : "tofu.optics.OpticContext.P", "error" : "unsupported entity"}, {"member" : "tofu.optics.OpticContext.F", "error" : "unsupported entity"}], "shortDescription" : ""}, {"name" : "tofu.optics.PBase", "trait" : "tofu\/optics\/PBase.html", "kind" : "trait", "members_trait" : [{"label" : "label", "tail" : "(): PBase.this.type with Label[label]", "member" : "tofu.optics.PBase.label", "link" : "tofu\/optics\/PBase.html#label[label]:PBase.this.typewithtofu.optics.Label[label]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/PBase.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/PBase.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/PBase.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/PBase.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/PBase.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/PBase.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/PBase.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PBase.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PBase.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PBase.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/PBase.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/PBase.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/PBase.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/PBase.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/PBase.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/PBase.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/PBase.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/PBase.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/PBase.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "tofu.optics.PContains", "object" : "tofu\/optics\/PContains$.html", "members_object" : [{"label" : "PContainsOps", "tail" : "", "member" : "tofu.optics.PContains.PContainsOps", "link" : "tofu\/optics\/PContains$.html#PContainsOps[S,T,A,B]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "fromGeneric", "tail" : "(o: Optic[Context, S, T, A, B]): PContains[S, T, A, B]", "member" : "tofu.optics.PContains.fromGeneric", "link" : "tofu\/optics\/PContains$.html#fromGeneric[S,T,A,B](o:tofu.optics.Optic[tofu.optics.PContains.Context,S,T,A,B]):tofu.optics.PContains[S,T,A,B]", "kind" : "def"}, {"label" : "toGeneric", "tail" : "(o: PContains[S, T, A, B]): Optic[Context, S, T, A, B]", "member" : "tofu.optics.PContains.toGeneric", "link" : "tofu\/optics\/PContains$.html#toGeneric[S,T,A,B](o:tofu.optics.PContains[S,T,A,B]):tofu.optics.Optic[tofu.optics.PContains.Context,S,T,A,B]", "kind" : "def"}, {"label" : "Context", "tail" : "", "member" : "tofu.optics.PContains.Context", "link" : "tofu\/optics\/PContains$.html#ContextextendsPEquivalent.Context", "kind" : "trait"}, {"label" : "ByProject", "tail" : "", "member" : "tofu.optics.PContains.ByProject", "link" : "tofu\/optics\/PContains$.html#ByProject[S,T,A,B]extendsPContains[S,T,A,B]", "kind" : "trait"}, {"label" : "compose", "tail" : "(f: PContains[A, B, U, V], g: PContains[S, T, A, B]): PContains[S, T, U, V]", "member" : "tofu.optics.PContains.compose", "link" : "tofu\/optics\/PContains$.html#compose[S,T,A,B,U,V](f:tofu.optics.PContains[A,B,U,V],g:tofu.optics.PContains[S,T,A,B]):tofu.optics.PContains[S,T,U,V]", "kind" : "def"}, {"label" : "PContainsApplied", "tail" : "", "member" : "tofu.optics.PContains.PContainsApplied", "link" : "tofu\/optics\/PContains$.html#PContainsApplied[S,B]extendsAnyVal", "kind" : "final class"}, {"label" : "apply", "tail" : "(): PContainsApplied[S, B]", "member" : "tofu.optics.PContains.apply", "link" : "tofu\/optics\/PContains$.html#apply[S,B]:tofu.optics.PContains.PContainsApplied[S,B]", "kind" : "def"}, {"label" : "toMonoOpticOps", "tail" : "(o: PContains[S, S, A, A]): MonoOpticOps[PContains, S, A]", "member" : "tofu.optics.OpticCompanion.toMonoOpticOps", "link" : "tofu\/optics\/PContains$.html#toMonoOpticOps[S,A](o:O[S,S,A,A]):tofu.optics.MonoOpticOps[O,S,A]", "kind" : "implicit final def"}, {"label" : "toOpticComposeOps", "tail" : "(o: PContains[S, T, A, B]): OpticComposeOps[PContains, S, T, A, B]", "member" : "tofu.optics.OpticCompanion.toOpticComposeOps", "link" : "tofu\/optics\/PContains$.html#toOpticComposeOps[S,T,A,B](o:O[S,T,A,B]):tofu.optics.OpticComposeOps[O,S,T,A,B]", "kind" : "implicit final def"}, {"label" : "category2", "tail" : ": Category2[PContains]", "member" : "tofu.optics.OpticCompanion.category2", "link" : "tofu\/optics\/PContains$.html#category2:tofu.optics.classes.Category2[O]", "kind" : "implicit final val"}, {"label" : "category", "tail" : ": Category[Mono]", "member" : "tofu.optics.OpticCompanion.category", "link" : "tofu\/optics\/PContains$.html#category:cats.arrow.Category[OpticCompanion.this.Mono]", "kind" : "implicit final val"}, {"label" : "Mono", "tail" : "", "member" : "tofu.optics.OpticCompanion.Mono", "link" : "tofu\/optics\/PContains$.html#Mono[a,b]=O[a,a,b,b]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/PContains$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/PContains$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/PContains$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/PContains$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/PContains$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/PContains$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/PContains$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PContains$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PContains$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PContains$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/PContains$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/PContains$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/PContains$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/PContains$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/PContains$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/PContains$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/PContains$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/PContains$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/PContains$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/optics\/PContains.html", "kind" : "trait", "members_trait" : [{"label" : "downcast", "tail" : "(s: S): Option[A]", "member" : "tofu.optics.PContains.downcast", "link" : "tofu\/optics\/PContains.html#downcast(s:S):Option[A]", "kind" : "def"}, {"label" : "traverse", "tail" : "(s: S)(f: (A) => F[B])(F: Applicative[F]): F[T]", "member" : "tofu.optics.PContains.traverse", "link" : "tofu\/optics\/PContains.html#traverse[F[+_]](s:S)(f:A=>F[B])(implicitF:cats.Applicative[F]):F[T]", "kind" : "def"}, {"label" : "traverse1", "tail" : "(a: S)(f: (A) => F[B])(F: Apply[F]): F[T]", "member" : "tofu.optics.PContains.traverse1", "link" : "tofu\/optics\/PContains.html#traverse1[F[+_]](a:S)(f:A=>F[B])(implicitF:cats.Apply[F]):F[T]", "kind" : "def"}, {"label" : "reduceMap", "tail" : "(s: S)(f: (A) => X)(arg0: Semigroup[X]): X", "member" : "tofu.optics.PContains.reduceMap", "link" : "tofu\/optics\/PContains.html#reduceMap[X](s:S)(f:A=>X)(implicitevidence$1:cats.Semigroup[X]):X", "kind" : "def"}, {"label" : "project", "tail" : "(s: S)(fab: (A) => F[B])(F: Functor[F]): F[T]", "member" : "tofu.optics.PContains.project", "link" : "tofu\/optics\/PContains.html#project[F[+_]](s:S)(fab:A=>F[B])(implicitF:cats.Functor[F]):F[T]", "kind" : "def"}, {"label" : "update", "tail" : "(s: S, fab: (A) => B): T", "member" : "tofu.optics.PContains.update", "link" : "tofu\/optics\/PContains.html#update(s:S,fab:A=>B):T", "kind" : "def"}, {"label" : "narrow", "tail" : "(s: S): Either[T, A]", "member" : "tofu.optics.PContains.narrow", "link" : "tofu\/optics\/PContains.html#narrow(s:S):Either[T,A]", "kind" : "def"}, {"label" : "get", "tail" : "(s: S): A", "member" : "tofu.optics.PContains.get", "link" : "tofu\/optics\/PContains.html#get(s:S):A", "kind" : "def"}, {"label" : "foldMap", "tail" : "(a: S)(f: (A) => X)(arg0: Monoid[X]): X", "member" : "tofu.optics.PProperty.foldMap", "link" : "tofu\/optics\/PContains.html#foldMap[X](a:S)(f:A=>X)(implicitevidence$1:cats.Monoid[X]):X", "kind" : "def"}, {"label" : "traject", "tail" : "(s: S)(fab: (A) => F[B])(FP: Pure[F], F: Functor[F]): F[T]", "member" : "tofu.optics.PProperty.traject", "link" : "tofu\/optics\/PContains.html#traject[F[+_]](s:S)(fab:A=>F[B])(implicitFP:alleycats.Pure[F],implicitF:cats.Functor[F]):F[T]", "kind" : "def"}, {"label" : "put", "tail" : "(s: S, b: B): T", "member" : "tofu.optics.PUpdate.put", "link" : "tofu\/optics\/PContains.html#put(s:S,b:B):T", "kind" : "def"}, {"label" : "getAll1", "tail" : "(s: S): NonEmptyList[A]", "member" : "tofu.optics.PReduced.getAll1", "link" : "tofu\/optics\/PContains.html#getAll1(s:S):cats.data.NonEmptyList[A]", "kind" : "def"}, {"label" : "getOption", "tail" : "(s: S): Option[A]", "member" : "tofu.optics.PDowncast.getOption", "link" : "tofu\/optics\/PContains.html#getOption(s:S):Option[A]", "kind" : "def"}, {"label" : "as", "tail" : "(): PFolded[S, T1, A, B1]", "member" : "tofu.optics.PFolded.as", "link" : "tofu\/optics\/PContains.html#as[B1,T1]:tofu.optics.PFolded[S,T1,A,B1]", "kind" : "def"}, {"label" : "getAll", "tail" : "(s: S): List[A]", "member" : "tofu.optics.PFolded.getAll", "link" : "tofu\/optics\/PContains.html#getAll(s:S):List[A]", "kind" : "def"}, {"label" : "label", "tail" : "(): PContains.this.type with Label[label]", "member" : "tofu.optics.PBase.label", "link" : "tofu\/optics\/PContains.html#label[label]:PBase.this.typewithtofu.optics.Label[label]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/PContains.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/PContains.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/PContains.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/PContains.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/PContains.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/PContains.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/PContains.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PContains.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PContains.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PContains.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/PContains.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/PContains.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/PContains.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/PContains.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/PContains.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/PContains.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/PContains.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/PContains.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/PContains.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "extract", "tail" : "(s: S): A", "member" : "tofu.optics.PContains.extract", "link" : "tofu\/optics\/PContains.html#extract(s:S):A", "kind" : "abstract def"}, {"label" : "set", "tail" : "(s: S, b: B): T", "member" : "tofu.optics.PContains.set", "link" : "tofu\/optics\/PContains.html#set(s:S,b:B):T", "kind" : "abstract def"}], "shortDescription" : "aka LensS has exactly one A and can update it"}, {"name" : "tofu.optics.PDowncast", "object" : "tofu\/optics\/PDowncast$.html", "members_object" : [{"label" : "fromGeneric", "tail" : "(o: Optic[Context, S, T, A, B]): PDowncast[S, T, A, B]", "member" : "tofu.optics.PDowncast.fromGeneric", "link" : "tofu\/optics\/PDowncast$.html#fromGeneric[S,T,A,B](o:tofu.optics.Optic[tofu.optics.PDowncast.Context,S,T,A,B]):tofu.optics.PDowncast[S,T,A,B]", "kind" : "def"}, {"label" : "toGeneric", "tail" : "(o: PDowncast[S, T, A, B]): Optic[Context, S, T, A, B]", "member" : "tofu.optics.PDowncast.toGeneric", "link" : "tofu\/optics\/PDowncast$.html#toGeneric[S,T,A,B](o:tofu.optics.PDowncast[S,T,A,B]):tofu.optics.Optic[tofu.optics.PDowncast.Context,S,T,A,B]", "kind" : "def"}, {"label" : "Context", "tail" : "", "member" : "tofu.optics.PDowncast.Context", "link" : "tofu\/optics\/PDowncast$.html#ContextextendsPExtract.Context", "kind" : "trait"}, {"label" : "compose", "tail" : "(f: PDowncast[A, B, U, V], g: PDowncast[S, T, A, B]): PDowncast[S, T, U, V]", "member" : "tofu.optics.PDowncast.compose", "link" : "tofu\/optics\/PDowncast$.html#compose[S,T,A,B,U,V](f:tofu.optics.PDowncast[A,B,U,V],g:tofu.optics.PDowncast[S,T,A,B]):tofu.optics.PDowncast[S,T,U,V]", "kind" : "def"}, {"label" : "toMonoOpticOps", "tail" : "(o: PDowncast[S, S, A, A]): MonoOpticOps[PDowncast, S, A]", "member" : "tofu.optics.OpticCompanion.toMonoOpticOps", "link" : "tofu\/optics\/PDowncast$.html#toMonoOpticOps[S,A](o:O[S,S,A,A]):tofu.optics.MonoOpticOps[O,S,A]", "kind" : "implicit final def"}, {"label" : "toOpticComposeOps", "tail" : "(o: PDowncast[S, T, A, B]): OpticComposeOps[PDowncast, S, T, A, B]", "member" : "tofu.optics.OpticCompanion.toOpticComposeOps", "link" : "tofu\/optics\/PDowncast$.html#toOpticComposeOps[S,T,A,B](o:O[S,T,A,B]):tofu.optics.OpticComposeOps[O,S,T,A,B]", "kind" : "implicit final def"}, {"label" : "category2", "tail" : ": Category2[PDowncast]", "member" : "tofu.optics.OpticCompanion.category2", "link" : "tofu\/optics\/PDowncast$.html#category2:tofu.optics.classes.Category2[O]", "kind" : "implicit final val"}, {"label" : "category", "tail" : ": Category[Mono]", "member" : "tofu.optics.OpticCompanion.category", "link" : "tofu\/optics\/PDowncast$.html#category:cats.arrow.Category[OpticCompanion.this.Mono]", "kind" : "implicit final val"}, {"label" : "Mono", "tail" : "", "member" : "tofu.optics.OpticCompanion.Mono", "link" : "tofu\/optics\/PDowncast$.html#Mono[a,b]=O[a,a,b,b]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/PDowncast$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/PDowncast$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/PDowncast$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/PDowncast$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/PDowncast$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/PDowncast$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/PDowncast$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PDowncast$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PDowncast$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PDowncast$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/PDowncast$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/PDowncast$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/PDowncast$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/PDowncast$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/PDowncast$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/PDowncast$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/PDowncast$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/PDowncast$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/PDowncast$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/optics\/PDowncast.html", "kind" : "trait", "members_trait" : [{"label" : "foldMap", "tail" : "(s: S)(f: (A) => X)(arg0: Monoid[X]): X", "member" : "tofu.optics.PDowncast.foldMap", "link" : "tofu\/optics\/PDowncast.html#foldMap[X](s:S)(f:A=>X)(implicitevidence$1:cats.Monoid[X]):X", "kind" : "def"}, {"label" : "getOption", "tail" : "(s: S): Option[A]", "member" : "tofu.optics.PDowncast.getOption", "link" : "tofu\/optics\/PDowncast.html#getOption(s:S):Option[A]", "kind" : "def"}, {"label" : "as", "tail" : "(): PFolded[S, T1, A, B1]", "member" : "tofu.optics.PFolded.as", "link" : "tofu\/optics\/PDowncast.html#as[B1,T1]:tofu.optics.PFolded[S,T1,A,B1]", "kind" : "def"}, {"label" : "getAll", "tail" : "(s: S): List[A]", "member" : "tofu.optics.PFolded.getAll", "link" : "tofu\/optics\/PDowncast.html#getAll(s:S):List[A]", "kind" : "def"}, {"label" : "label", "tail" : "(): PDowncast.this.type with Label[label]", "member" : "tofu.optics.PBase.label", "link" : "tofu\/optics\/PDowncast.html#label[label]:PBase.this.typewithtofu.optics.Label[label]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/PDowncast.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/PDowncast.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/PDowncast.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/PDowncast.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/PDowncast.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/PDowncast.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/PDowncast.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PDowncast.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PDowncast.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PDowncast.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/PDowncast.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/PDowncast.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/PDowncast.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/PDowncast.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/PDowncast.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/PDowncast.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/PDowncast.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/PDowncast.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/PDowncast.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "downcast", "tail" : "(s: S): Option[A]", "member" : "tofu.optics.PDowncast.downcast", "link" : "tofu\/optics\/PDowncast.html#downcast(s:S):Option[A]", "kind" : "abstract def"}], "shortDescription" : "S could be T or notpartial function from S to Tand part of prism"}, {"name" : "tofu.optics.PEquivalent", "object" : "tofu\/optics\/PEquivalent$.html", "members_object" : [{"label" : "fromGeneric", "tail" : "(o: Optic[Context, S, T, A, B]): PEquivalent[S, T, A, B]", "member" : "tofu.optics.PEquivalent.fromGeneric", "link" : "tofu\/optics\/PEquivalent$.html#fromGeneric[S,T,A,B](o:tofu.optics.Optic[tofu.optics.PEquivalent.Context,S,T,A,B]):tofu.optics.PEquivalent[S,T,A,B]", "kind" : "def"}, {"label" : "toGeneric", "tail" : "(o: PEquivalent[S, T, A, B]): Optic[Context, S, T, A, B]", "member" : "tofu.optics.PEquivalent.toGeneric", "link" : "tofu\/optics\/PEquivalent$.html#toGeneric[S,T,A,B](o:tofu.optics.PEquivalent[S,T,A,B]):tofu.optics.Optic[tofu.optics.PEquivalent.Context,S,T,A,B]", "kind" : "def"}, {"label" : "Context", "tail" : "", "member" : "tofu.optics.PEquivalent.Context", "link" : "tofu\/optics\/PEquivalent$.html#ContextextendsOpticContext", "kind" : "trait"}, {"label" : "ByEmploy", "tail" : "", "member" : "tofu.optics.PEquivalent.ByEmploy", "link" : "tofu\/optics\/PEquivalent$.html#ByEmploy[S,T,A,B]extendsPEquivalent[S,T,A,B]", "kind" : "trait"}, {"label" : "compose", "tail" : "(f: PEquivalent[A, B, U, V], g: PEquivalent[S, T, A, B]): PEquivalent[S, T, U, V]", "member" : "tofu.optics.PEquivalent.compose", "link" : "tofu\/optics\/PEquivalent$.html#compose[S,T,A,B,U,V](f:tofu.optics.PEquivalent[A,B,U,V],g:tofu.optics.PEquivalent[S,T,A,B]):tofu.optics.PEquivalent[S,T,U,V]", "kind" : "def"}, {"label" : "PEquivalentApplied", "tail" : "", "member" : "tofu.optics.PEquivalent.PEquivalentApplied", "link" : "tofu\/optics\/PEquivalent$.html#PEquivalentApplied[S,B]extendsAnyVal", "kind" : "final class"}, {"label" : "apply", "tail" : "(): PEquivalentApplied[S, B]", "member" : "tofu.optics.PEquivalent.apply", "link" : "tofu\/optics\/PEquivalent$.html#apply[S,B]:tofu.optics.PEquivalent.PEquivalentApplied[S,B]", "kind" : "def"}, {"label" : "toMonoOpticOps", "tail" : "(o: PEquivalent[S, S, A, A]): MonoOpticOps[PEquivalent, S, A]", "member" : "tofu.optics.OpticCompanion.toMonoOpticOps", "link" : "tofu\/optics\/PEquivalent$.html#toMonoOpticOps[S,A](o:O[S,S,A,A]):tofu.optics.MonoOpticOps[O,S,A]", "kind" : "implicit final def"}, {"label" : "toOpticComposeOps", "tail" : "(o: PEquivalent[S, T, A, B]): OpticComposeOps[PEquivalent, S, T, A, B]", "member" : "tofu.optics.OpticCompanion.toOpticComposeOps", "link" : "tofu\/optics\/PEquivalent$.html#toOpticComposeOps[S,T,A,B](o:O[S,T,A,B]):tofu.optics.OpticComposeOps[O,S,T,A,B]", "kind" : "implicit final def"}, {"label" : "category2", "tail" : ": Category2[PEquivalent]", "member" : "tofu.optics.OpticCompanion.category2", "link" : "tofu\/optics\/PEquivalent$.html#category2:tofu.optics.classes.Category2[O]", "kind" : "implicit final val"}, {"label" : "category", "tail" : ": Category[Mono]", "member" : "tofu.optics.OpticCompanion.category", "link" : "tofu\/optics\/PEquivalent$.html#category:cats.arrow.Category[OpticCompanion.this.Mono]", "kind" : "implicit final val"}, {"label" : "Mono", "tail" : "", "member" : "tofu.optics.OpticCompanion.Mono", "link" : "tofu\/optics\/PEquivalent$.html#Mono[a,b]=O[a,a,b,b]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/PEquivalent$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/PEquivalent$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/PEquivalent$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/PEquivalent$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/PEquivalent$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/PEquivalent$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/PEquivalent$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PEquivalent$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PEquivalent$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PEquivalent$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/PEquivalent$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/PEquivalent$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/PEquivalent$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/PEquivalent$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/PEquivalent$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/PEquivalent$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/PEquivalent$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/PEquivalent$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/PEquivalent$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/optics\/PEquivalent.html", "kind" : "trait", "members_trait" : [{"label" : "inverse", "tail" : "(): PEquivalent[B, A, T, S]", "member" : "tofu.optics.PEquivalent.inverse", "link" : "tofu\/optics\/PEquivalent.html#inverse:tofu.optics.PEquivalent[B,A,T,S]", "kind" : "def"}, {"label" : "downcast", "tail" : "(s: S): Option[A]", "member" : "tofu.optics.PEquivalent.downcast", "link" : "tofu\/optics\/PEquivalent.html#downcast(s:S):Option[A]", "kind" : "def"}, {"label" : "employ", "tail" : "(pb: P[A, F[B]])(F: Functor[F], P: Profunctor[P]): P[S, F[T]]", "member" : "tofu.optics.PEquivalent.employ", "link" : "tofu\/optics\/PEquivalent.html#employ[F[+_],P[-_,+_]](pb:P[A,F[B]])(implicitF:cats.Functor[F],implicitP:cats.arrow.Profunctor[P]):P[S,F[T]]", "kind" : "def"}, {"label" : "traverse", "tail" : "(a: S)(f: (A) => F[B])(F: Applicative[F]): F[T]", "member" : "tofu.optics.PEquivalent.traverse", "link" : "tofu\/optics\/PEquivalent.html#traverse[F[+_]](a:S)(f:A=>F[B])(implicitF:cats.Applicative[F]):F[T]", "kind" : "def"}, {"label" : "inverse", "tail" : "(b: B): T", "member" : "tofu.optics.PEquivalent.inverse", "link" : "tofu\/optics\/PEquivalent.html#inverse(b:B):T", "kind" : "def"}, {"label" : "traverse1", "tail" : "(a: S)(f: (A) => F[B])(F: Apply[F]): F[T]", "member" : "tofu.optics.PContains.traverse1", "link" : "tofu\/optics\/PEquivalent.html#traverse1[F[+_]](a:S)(f:A=>F[B])(implicitF:cats.Apply[F]):F[T]", "kind" : "def"}, {"label" : "reduceMap", "tail" : "(s: S)(f: (A) => X)(arg0: Semigroup[X]): X", "member" : "tofu.optics.PContains.reduceMap", "link" : "tofu\/optics\/PEquivalent.html#reduceMap[X](s:S)(f:A=>X)(implicitevidence$1:cats.Semigroup[X]):X", "kind" : "def"}, {"label" : "project", "tail" : "(s: S)(fab: (A) => F[B])(F: Functor[F]): F[T]", "member" : "tofu.optics.PContains.project", "link" : "tofu\/optics\/PEquivalent.html#project[F[+_]](s:S)(fab:A=>F[B])(implicitF:cats.Functor[F]):F[T]", "kind" : "def"}, {"label" : "update", "tail" : "(s: S, fab: (A) => B): T", "member" : "tofu.optics.PContains.update", "link" : "tofu\/optics\/PEquivalent.html#update(s:S,fab:A=>B):T", "kind" : "def"}, {"label" : "narrow", "tail" : "(s: S): Either[T, A]", "member" : "tofu.optics.PContains.narrow", "link" : "tofu\/optics\/PEquivalent.html#narrow(s:S):Either[T,A]", "kind" : "def"}, {"label" : "get", "tail" : "(s: S): A", "member" : "tofu.optics.PContains.get", "link" : "tofu\/optics\/PEquivalent.html#get(s:S):A", "kind" : "def"}, {"label" : "foldMap", "tail" : "(s: S)(f: (A) => X)(arg0: Monoid[X]): X", "member" : "tofu.optics.PRepeated.foldMap", "link" : "tofu\/optics\/PEquivalent.html#foldMap[X](s:S)(f:A=>X)(implicitevidence$3:cats.Monoid[X]):X", "kind" : "def"}, {"label" : "getAll1", "tail" : "(s: S): NonEmptyList[A]", "member" : "tofu.optics.PReduced.getAll1", "link" : "tofu\/optics\/PEquivalent.html#getAll1(s:S):cats.data.NonEmptyList[A]", "kind" : "def"}, {"label" : "inject", "tail" : "(pb: P[A, F[B]])(FP: Pure[F], F: Functor[F], P: PChoice[P]): P[S, F[T]]", "member" : "tofu.optics.PSubset.inject", "link" : "tofu\/optics\/PEquivalent.html#inject[F[+_],P[-_,+_]](pb:P[A,F[B]])(implicitFP:alleycats.Pure[F],implicitF:cats.Functor[F],implicitP:tofu.optics.classes.PChoice[P]):P[S,F[T]]", "kind" : "def"}, {"label" : "set", "tail" : "(s: S, b: B): T", "member" : "tofu.optics.PSubset.set", "link" : "tofu\/optics\/PEquivalent.html#set(s:S,b:B):T", "kind" : "def"}, {"label" : "traject", "tail" : "(s: S)(fab: (A) => F[B])(FP: Pure[F], F: Functor[F]): F[T]", "member" : "tofu.optics.PProperty.traject", "link" : "tofu\/optics\/PEquivalent.html#traject[F[+_]](s:S)(fab:A=>F[B])(implicitFP:alleycats.Pure[F],implicitF:cats.Functor[F]):F[T]", "kind" : "def"}, {"label" : "put", "tail" : "(s: S, b: B): T", "member" : "tofu.optics.PUpdate.put", "link" : "tofu\/optics\/PEquivalent.html#put(s:S,b:B):T", "kind" : "def"}, {"label" : "getOption", "tail" : "(s: S): Option[A]", "member" : "tofu.optics.PDowncast.getOption", "link" : "tofu\/optics\/PEquivalent.html#getOption(s:S):Option[A]", "kind" : "def"}, {"label" : "as", "tail" : "(): PFolded[S, T1, A, B1]", "member" : "tofu.optics.PFolded.as", "link" : "tofu\/optics\/PEquivalent.html#as[B1,T1]:tofu.optics.PFolded[S,T1,A,B1]", "kind" : "def"}, {"label" : "getAll", "tail" : "(s: S): List[A]", "member" : "tofu.optics.PFolded.getAll", "link" : "tofu\/optics\/PEquivalent.html#getAll(s:S):List[A]", "kind" : "def"}, {"label" : "label", "tail" : "(): PEquivalent.this.type with Label[label]", "member" : "tofu.optics.PBase.label", "link" : "tofu\/optics\/PEquivalent.html#label[label]:PBase.this.typewithtofu.optics.Label[label]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/PEquivalent.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/PEquivalent.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/PEquivalent.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/PEquivalent.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/PEquivalent.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/PEquivalent.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/PEquivalent.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PEquivalent.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PEquivalent.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PEquivalent.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/PEquivalent.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/PEquivalent.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/PEquivalent.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/PEquivalent.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/PEquivalent.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/PEquivalent.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/PEquivalent.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/PEquivalent.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/PEquivalent.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "upcast", "tail" : "(b: B): T", "member" : "tofu.optics.PEquivalent.upcast", "link" : "tofu\/optics\/PEquivalent.html#upcast(b:B):T", "kind" : "abstract def"}, {"label" : "extract", "tail" : "(s: S): A", "member" : "tofu.optics.PEquivalent.extract", "link" : "tofu\/optics\/PEquivalent.html#extract(s:S):A", "kind" : "abstract def"}], "shortDescription" : "aka IsoS and B share same information"}, {"name" : "tofu.optics.PExtract", "object" : "tofu\/optics\/PExtract$.html", "members_object" : [{"label" : "fromGeneric", "tail" : "(o: Optic[Context, S, T, A, B]): PExtract[S, T, A, B]", "member" : "tofu.optics.PExtract.fromGeneric", "link" : "tofu\/optics\/PExtract$.html#fromGeneric[S,T,A,B](o:tofu.optics.Optic[tofu.optics.PExtract.Context,S,T,A,B]):tofu.optics.PExtract[S,T,A,B]", "kind" : "def"}, {"label" : "toGeneric", "tail" : "(o: PExtract[S, T, A, B]): Optic[Context, S, T, A, B]", "member" : "tofu.optics.PExtract.toGeneric", "link" : "tofu\/optics\/PExtract$.html#toGeneric[S,T,A,B](o:tofu.optics.PExtract[S,T,A,B]):tofu.optics.Optic[tofu.optics.PExtract.Context,S,T,A,B]", "kind" : "def"}, {"label" : "Context", "tail" : "", "member" : "tofu.optics.PExtract.Context", "link" : "tofu\/optics\/PExtract$.html#ContextextendsPContains.Context", "kind" : "trait"}, {"label" : "compose", "tail" : "(f: PExtract[A, B, U, V], g: PExtract[S, T, A, B]): PExtract[S, T, U, V]", "member" : "tofu.optics.PExtract.compose", "link" : "tofu\/optics\/PExtract$.html#compose[S,T,A,B,U,V](f:tofu.optics.PExtract[A,B,U,V],g:tofu.optics.PExtract[S,T,A,B]):tofu.optics.PExtract[S,T,U,V]", "kind" : "def"}, {"label" : "toMonoOpticOps", "tail" : "(o: PExtract[S, S, A, A]): MonoOpticOps[PExtract, S, A]", "member" : "tofu.optics.OpticCompanion.toMonoOpticOps", "link" : "tofu\/optics\/PExtract$.html#toMonoOpticOps[S,A](o:O[S,S,A,A]):tofu.optics.MonoOpticOps[O,S,A]", "kind" : "implicit final def"}, {"label" : "toOpticComposeOps", "tail" : "(o: PExtract[S, T, A, B]): OpticComposeOps[PExtract, S, T, A, B]", "member" : "tofu.optics.OpticCompanion.toOpticComposeOps", "link" : "tofu\/optics\/PExtract$.html#toOpticComposeOps[S,T,A,B](o:O[S,T,A,B]):tofu.optics.OpticComposeOps[O,S,T,A,B]", "kind" : "implicit final def"}, {"label" : "category2", "tail" : ": Category2[PExtract]", "member" : "tofu.optics.OpticCompanion.category2", "link" : "tofu\/optics\/PExtract$.html#category2:tofu.optics.classes.Category2[O]", "kind" : "implicit final val"}, {"label" : "category", "tail" : ": Category[Mono]", "member" : "tofu.optics.OpticCompanion.category", "link" : "tofu\/optics\/PExtract$.html#category:cats.arrow.Category[OpticCompanion.this.Mono]", "kind" : "implicit final val"}, {"label" : "Mono", "tail" : "", "member" : "tofu.optics.OpticCompanion.Mono", "link" : "tofu\/optics\/PExtract$.html#Mono[a,b]=O[a,a,b,b]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/PExtract$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/PExtract$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/PExtract$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/PExtract$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/PExtract$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/PExtract$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/PExtract$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PExtract$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PExtract$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PExtract$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/PExtract$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/PExtract$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/PExtract$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/PExtract$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/PExtract$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/PExtract$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/PExtract$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/PExtract$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/PExtract$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/optics\/PExtract.html", "kind" : "trait", "members_trait" : [{"label" : "foldMap", "tail" : "(s: S)(f: (A) => X)(arg0: Monoid[X]): X", "member" : "tofu.optics.PExtract.foldMap", "link" : "tofu\/optics\/PExtract.html#foldMap[X](s:S)(f:A=>X)(implicitevidence$2:cats.Monoid[X]):X", "kind" : "def"}, {"label" : "reduceMap", "tail" : "(s: S)(f: (A) => X)(arg0: Semigroup[X]): X", "member" : "tofu.optics.PExtract.reduceMap", "link" : "tofu\/optics\/PExtract.html#reduceMap[X](s:S)(f:A=>X)(implicitevidence$1:cats.Semigroup[X]):X", "kind" : "def"}, {"label" : "downcast", "tail" : "(s: S): Option[A]", "member" : "tofu.optics.PExtract.downcast", "link" : "tofu\/optics\/PExtract.html#downcast(s:S):Option[A]", "kind" : "def"}, {"label" : "getAll1", "tail" : "(s: S): NonEmptyList[A]", "member" : "tofu.optics.PReduced.getAll1", "link" : "tofu\/optics\/PExtract.html#getAll1(s:S):cats.data.NonEmptyList[A]", "kind" : "def"}, {"label" : "getOption", "tail" : "(s: S): Option[A]", "member" : "tofu.optics.PDowncast.getOption", "link" : "tofu\/optics\/PExtract.html#getOption(s:S):Option[A]", "kind" : "def"}, {"label" : "as", "tail" : "(): PFolded[S, T1, A, B1]", "member" : "tofu.optics.PFolded.as", "link" : "tofu\/optics\/PExtract.html#as[B1,T1]:tofu.optics.PFolded[S,T1,A,B1]", "kind" : "def"}, {"label" : "getAll", "tail" : "(s: S): List[A]", "member" : "tofu.optics.PFolded.getAll", "link" : "tofu\/optics\/PExtract.html#getAll(s:S):List[A]", "kind" : "def"}, {"label" : "label", "tail" : "(): PExtract.this.type with Label[label]", "member" : "tofu.optics.PBase.label", "link" : "tofu\/optics\/PExtract.html#label[label]:PBase.this.typewithtofu.optics.Label[label]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/PExtract.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/PExtract.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/PExtract.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/PExtract.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/PExtract.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/PExtract.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/PExtract.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PExtract.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PExtract.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PExtract.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/PExtract.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/PExtract.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/PExtract.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/PExtract.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/PExtract.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/PExtract.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/PExtract.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/PExtract.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/PExtract.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "extract", "tail" : "(s: S): A", "member" : "tofu.optics.PExtract.extract", "link" : "tofu\/optics\/PExtract.html#extract(s:S):A", "kind" : "abstract def"}], "shortDescription" : "aka GetterA has exactly one Bmere function from A to Band part of Lens"}, {"name" : "tofu.optics.PFolded", "object" : "tofu\/optics\/PFolded$.html", "members_object" : [{"label" : "fromGeneric", "tail" : "(o: Optic[Context, S, T, A, B]): PFolded[S, T, A, B]", "member" : "tofu.optics.PFolded.fromGeneric", "link" : "tofu\/optics\/PFolded$.html#fromGeneric[S,T,A,B](o:tofu.optics.Optic[tofu.optics.PFolded.Context,S,T,A,B]):tofu.optics.PFolded[S,T,A,B]", "kind" : "def"}, {"label" : "toGeneric", "tail" : "(o: PFolded[S, T, A, B]): Optic[Context, S, T, A, B]", "member" : "tofu.optics.PFolded.toGeneric", "link" : "tofu\/optics\/PFolded$.html#toGeneric[S,T,A,B](o:tofu.optics.PFolded[S,T,A,B]):tofu.optics.Optic[tofu.optics.PFolded.Context,S,T,A,B]", "kind" : "def"}, {"label" : "Context", "tail" : "", "member" : "tofu.optics.PFolded.Context", "link" : "tofu\/optics\/PFolded$.html#ContextextendsPReduced.ContextwithPItems.ContextwithPDowncast.Context", "kind" : "trait"}, {"label" : "byFoldable", "tail" : "(F: Foldable[F]): PFolded[F[A], T, A, B]", "member" : "tofu.optics.PFolded.byFoldable", "link" : "tofu\/optics\/PFolded$.html#byFoldable[F[_],A,T,B](implicitF:cats.Foldable[F]):tofu.optics.PFolded[F[A],T,A,B]", "kind" : "implicit final def"}, {"label" : "compose", "tail" : "(f: PFolded[A, B, U, V], g: PFolded[S, T, A, B]): PFolded[S, T, U, V]", "member" : "tofu.optics.PFolded.compose", "link" : "tofu\/optics\/PFolded$.html#compose[S,T,A,B,U,V](f:tofu.optics.PFolded[A,B,U,V],g:tofu.optics.PFolded[S,T,A,B]):tofu.optics.PFolded[S,T,U,V]", "kind" : "def"}, {"label" : "TofuFoldedOps", "tail" : "", "member" : "tofu.optics.PFolded.TofuFoldedOps", "link" : "tofu\/optics\/PFolded$.html#TofuFoldedOps[S,T,A,B]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "toMonoOpticOps", "tail" : "(o: PFolded[S, S, A, A]): MonoOpticOps[PFolded, S, A]", "member" : "tofu.optics.OpticCompanion.toMonoOpticOps", "link" : "tofu\/optics\/PFolded$.html#toMonoOpticOps[S,A](o:O[S,S,A,A]):tofu.optics.MonoOpticOps[O,S,A]", "kind" : "implicit final def"}, {"label" : "toOpticComposeOps", "tail" : "(o: PFolded[S, T, A, B]): OpticComposeOps[PFolded, S, T, A, B]", "member" : "tofu.optics.OpticCompanion.toOpticComposeOps", "link" : "tofu\/optics\/PFolded$.html#toOpticComposeOps[S,T,A,B](o:O[S,T,A,B]):tofu.optics.OpticComposeOps[O,S,T,A,B]", "kind" : "implicit final def"}, {"label" : "category2", "tail" : ": Category2[PFolded]", "member" : "tofu.optics.OpticCompanion.category2", "link" : "tofu\/optics\/PFolded$.html#category2:tofu.optics.classes.Category2[O]", "kind" : "implicit final val"}, {"label" : "category", "tail" : ": Category[Mono]", "member" : "tofu.optics.OpticCompanion.category", "link" : "tofu\/optics\/PFolded$.html#category:cats.arrow.Category[OpticCompanion.this.Mono]", "kind" : "implicit final val"}, {"label" : "Mono", "tail" : "", "member" : "tofu.optics.OpticCompanion.Mono", "link" : "tofu\/optics\/PFolded$.html#Mono[a,b]=O[a,a,b,b]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/PFolded$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/PFolded$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/PFolded$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/PFolded$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/PFolded$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/PFolded$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/PFolded$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PFolded$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PFolded$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PFolded$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/PFolded$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/PFolded$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/PFolded$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/PFolded$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/PFolded$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/PFolded$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/PFolded$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/PFolded$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/PFolded$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/optics\/PFolded.html", "kind" : "trait", "members_trait" : [{"label" : "as", "tail" : "(): PFolded[S, T1, A, B1]", "member" : "tofu.optics.PFolded.as", "link" : "tofu\/optics\/PFolded.html#as[B1,T1]:tofu.optics.PFolded[S,T1,A,B1]", "kind" : "def"}, {"label" : "getAll", "tail" : "(s: S): List[A]", "member" : "tofu.optics.PFolded.getAll", "link" : "tofu\/optics\/PFolded.html#getAll(s:S):List[A]", "kind" : "def"}, {"label" : "label", "tail" : "(): PFolded.this.type with Label[label]", "member" : "tofu.optics.PBase.label", "link" : "tofu\/optics\/PFolded.html#label[label]:PBase.this.typewithtofu.optics.Label[label]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/PFolded.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/PFolded.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/PFolded.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/PFolded.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/PFolded.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/PFolded.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/PFolded.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PFolded.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PFolded.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PFolded.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/PFolded.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/PFolded.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/PFolded.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/PFolded.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/PFolded.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/PFolded.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/PFolded.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/PFolded.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/PFolded.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "foldMap", "tail" : "(s: S)(f: (A) => X)(arg0: Monoid[X]): X", "member" : "tofu.optics.PFolded.foldMap", "link" : "tofu\/optics\/PFolded.html#foldMap[X](s:S)(f:A=>X)(implicitevidence$1:cats.Monoid[X]):X", "kind" : "abstract def"}], "shortDescription" : "S has some or none occurrences of Aand can collect them"}, {"name" : "tofu.optics.PItems", "object" : "tofu\/optics\/PItems$.html", "members_object" : [{"label" : "fromGeneric", "tail" : "(o: Optic[Context, S, T, A, B]): PItems[S, T, A, B]", "member" : "tofu.optics.PItems.fromGeneric", "link" : "tofu\/optics\/PItems$.html#fromGeneric[S,T,A,B](o:tofu.optics.Optic[tofu.optics.PItems.Context,S,T,A,B]):tofu.optics.PItems[S,T,A,B]", "kind" : "def"}, {"label" : "toGeneric", "tail" : "(o: PItems[S, T, A, B]): Optic[Context, S, T, A, B]", "member" : "tofu.optics.PItems.toGeneric", "link" : "tofu\/optics\/PItems$.html#toGeneric[S,T,A,B](o:tofu.optics.PItems[S,T,A,B]):tofu.optics.Optic[tofu.optics.PItems.Context,S,T,A,B]", "kind" : "def"}, {"label" : "Context", "tail" : "", "member" : "tofu.optics.PItems.Context", "link" : "tofu\/optics\/PItems$.html#ContextextendsPSubset.ContextwithPRepeated.Context", "kind" : "trait"}, {"label" : "fromTraverse", "tail" : "(F: Traverse[F]): PItems[F[A], F[B], A, B]", "member" : "tofu.optics.PItems.fromTraverse", "link" : "tofu\/optics\/PItems$.html#fromTraverse[F[+_],A,B](implicitF:cats.Traverse[F]):tofu.optics.PItems[F[A],F[B],A,B]", "kind" : "implicit final def"}, {"label" : "compose", "tail" : "(f: PItems[A, B, U, V], g: PItems[S, T, A, B]): PItems[S, T, U, V]", "member" : "tofu.optics.PItems.compose", "link" : "tofu\/optics\/PItems$.html#compose[S,T,A,B,U,V](f:tofu.optics.PItems[A,B,U,V],g:tofu.optics.PItems[S,T,A,B]):tofu.optics.PItems[S,T,U,V]", "kind" : "def"}, {"label" : "PItemsApply", "tail" : "", "member" : "tofu.optics.PItems.PItemsApply", "link" : "tofu\/optics\/PItems$.html#PItemsApply[S,A,B]extendsAnyRef", "kind" : "class"}, {"label" : "apply", "tail" : "(): PItemsApply[S, A, B]", "member" : "tofu.optics.PItems.apply", "link" : "tofu\/optics\/PItems$.html#apply[S,A,B]:tofu.optics.PItems.PItemsApply[S,A,B]", "kind" : "def"}, {"label" : "toMonoOpticOps", "tail" : "(o: PItems[S, S, A, A]): MonoOpticOps[PItems, S, A]", "member" : "tofu.optics.OpticCompanion.toMonoOpticOps", "link" : "tofu\/optics\/PItems$.html#toMonoOpticOps[S,A](o:O[S,S,A,A]):tofu.optics.MonoOpticOps[O,S,A]", "kind" : "implicit final def"}, {"label" : "toOpticComposeOps", "tail" : "(o: PItems[S, T, A, B]): OpticComposeOps[PItems, S, T, A, B]", "member" : "tofu.optics.OpticCompanion.toOpticComposeOps", "link" : "tofu\/optics\/PItems$.html#toOpticComposeOps[S,T,A,B](o:O[S,T,A,B]):tofu.optics.OpticComposeOps[O,S,T,A,B]", "kind" : "implicit final def"}, {"label" : "category2", "tail" : ": Category2[PItems]", "member" : "tofu.optics.OpticCompanion.category2", "link" : "tofu\/optics\/PItems$.html#category2:tofu.optics.classes.Category2[O]", "kind" : "implicit final val"}, {"label" : "category", "tail" : ": Category[Mono]", "member" : "tofu.optics.OpticCompanion.category", "link" : "tofu\/optics\/PItems$.html#category:cats.arrow.Category[OpticCompanion.this.Mono]", "kind" : "implicit final val"}, {"label" : "Mono", "tail" : "", "member" : "tofu.optics.OpticCompanion.Mono", "link" : "tofu\/optics\/PItems$.html#Mono[a,b]=O[a,a,b,b]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/PItems$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/PItems$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/PItems$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/PItems$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/PItems$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/PItems$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/PItems$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PItems$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PItems$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PItems$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/PItems$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/PItems$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/PItems$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/PItems$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/PItems$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/PItems$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/PItems$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/PItems$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/PItems$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/optics\/PItems.html", "kind" : "trait", "members_trait" : [{"label" : "foldMap", "tail" : "(a: S)(f: (A) => X)(arg0: Monoid[X]): X", "member" : "tofu.optics.PItems.foldMap", "link" : "tofu\/optics\/PItems.html#foldMap[X](a:S)(f:A=>X)(implicitevidence$2:cats.Monoid[X]):X", "kind" : "def"}, {"label" : "update", "tail" : "(a: S, fb: (A) => B): T", "member" : "tofu.optics.PItems.update", "link" : "tofu\/optics\/PItems.html#update(a:S,fb:A=>B):T", "kind" : "def"}, {"label" : "as", "tail" : "(): PFolded[S, T1, A, B1]", "member" : "tofu.optics.PFolded.as", "link" : "tofu\/optics\/PItems.html#as[B1,T1]:tofu.optics.PFolded[S,T1,A,B1]", "kind" : "def"}, {"label" : "getAll", "tail" : "(s: S): List[A]", "member" : "tofu.optics.PFolded.getAll", "link" : "tofu\/optics\/PItems.html#getAll(s:S):List[A]", "kind" : "def"}, {"label" : "put", "tail" : "(s: S, b: B): T", "member" : "tofu.optics.PUpdate.put", "link" : "tofu\/optics\/PItems.html#put(s:S,b:B):T", "kind" : "def"}, {"label" : "label", "tail" : "(): PItems.this.type with Label[label]", "member" : "tofu.optics.PBase.label", "link" : "tofu\/optics\/PItems.html#label[label]:PBase.this.typewithtofu.optics.Label[label]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/PItems.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/PItems.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/PItems.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/PItems.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/PItems.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/PItems.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/PItems.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PItems.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PItems.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PItems.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/PItems.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/PItems.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/PItems.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/PItems.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/PItems.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/PItems.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/PItems.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/PItems.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/PItems.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "traverse", "tail" : "(a: S)(f: (A) => F[B])(arg0: Applicative[F]): F[T]", "member" : "tofu.optics.PItems.traverse", "link" : "tofu\/optics\/PItems.html#traverse[F[+_]](a:S)(f:A=>F[B])(implicitevidence$1:cats.Applicative[F]):F[T]", "kind" : "abstract def"}], "shortDescription" : "aka TraversalS has some or none occurences of Aand can update them using some effect"}, {"name" : "tofu.optics.PProperty", "object" : "tofu\/optics\/PProperty$.html", "members_object" : [{"label" : "fromGeneric", "tail" : "(o: Optic[Context, S, T, A, B]): PProperty[S, T, A, B]", "member" : "tofu.optics.PProperty.fromGeneric", "link" : "tofu\/optics\/PProperty$.html#fromGeneric[S,T,A,B](o:tofu.optics.Optic[tofu.optics.PProperty.Context,S,T,A,B]):tofu.optics.PProperty[S,T,A,B]", "kind" : "def"}, {"label" : "toGeneric", "tail" : "(o: PProperty[S, T, A, B]): Optic[Context, S, T, A, B]", "member" : "tofu.optics.PProperty.toGeneric", "link" : "tofu\/optics\/PProperty$.html#toGeneric[S,T,A,B](o:tofu.optics.PProperty[S,T,A,B]):tofu.optics.Optic[tofu.optics.PProperty.Context,S,T,A,B]", "kind" : "def"}, {"label" : "ByTraject", "tail" : "", "member" : "tofu.optics.PProperty.ByTraject", "link" : "tofu\/optics\/PProperty$.html#ByTraject[S,T,A,B]extendsPProperty[S,T,A,B]", "kind" : "trait"}, {"label" : "compose", "tail" : "(f: PProperty[A, B, U, V], g: PProperty[S, T, A, B]): PProperty[S, T, U, V]", "member" : "tofu.optics.PProperty.compose", "link" : "tofu\/optics\/PProperty$.html#compose[S,T,A,B,U,V](f:tofu.optics.PProperty[A,B,U,V],g:tofu.optics.PProperty[S,T,A,B]):tofu.optics.PProperty[S,T,U,V]", "kind" : "def"}, {"label" : "Context", "tail" : "", "member" : "tofu.optics.PProperty.Context", "link" : "tofu\/optics\/PProperty$.html#ContextextendsPSubset.ContextwithPContains.Context", "kind" : "trait"}, {"label" : "PPropertyApplied", "tail" : "", "member" : "tofu.optics.PProperty.PPropertyApplied", "link" : "tofu\/optics\/PProperty$.html#PPropertyApplied[S,B]extendsAnyVal", "kind" : "final class"}, {"label" : "apply", "tail" : "(): PPropertyApplied[S, B]", "member" : "tofu.optics.PProperty.apply", "link" : "tofu\/optics\/PProperty$.html#apply[S,B]:tofu.optics.PProperty.PPropertyApplied[S,B]", "kind" : "def"}, {"label" : "toMonoOpticOps", "tail" : "(o: PProperty[S, S, A, A]): MonoOpticOps[PProperty, S, A]", "member" : "tofu.optics.OpticCompanion.toMonoOpticOps", "link" : "tofu\/optics\/PProperty$.html#toMonoOpticOps[S,A](o:O[S,S,A,A]):tofu.optics.MonoOpticOps[O,S,A]", "kind" : "implicit final def"}, {"label" : "toOpticComposeOps", "tail" : "(o: PProperty[S, T, A, B]): OpticComposeOps[PProperty, S, T, A, B]", "member" : "tofu.optics.OpticCompanion.toOpticComposeOps", "link" : "tofu\/optics\/PProperty$.html#toOpticComposeOps[S,T,A,B](o:O[S,T,A,B]):tofu.optics.OpticComposeOps[O,S,T,A,B]", "kind" : "implicit final def"}, {"label" : "category2", "tail" : ": Category2[PProperty]", "member" : "tofu.optics.OpticCompanion.category2", "link" : "tofu\/optics\/PProperty$.html#category2:tofu.optics.classes.Category2[O]", "kind" : "implicit final val"}, {"label" : "category", "tail" : ": Category[Mono]", "member" : "tofu.optics.OpticCompanion.category", "link" : "tofu\/optics\/PProperty$.html#category:cats.arrow.Category[OpticCompanion.this.Mono]", "kind" : "implicit final val"}, {"label" : "Mono", "tail" : "", "member" : "tofu.optics.OpticCompanion.Mono", "link" : "tofu\/optics\/PProperty$.html#Mono[a,b]=O[a,a,b,b]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/PProperty$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/PProperty$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/PProperty$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/PProperty$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/PProperty$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/PProperty$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/PProperty$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PProperty$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PProperty$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PProperty$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/PProperty$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/PProperty$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/PProperty$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/PProperty$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/PProperty$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/PProperty$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/PProperty$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/PProperty$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/PProperty$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/optics\/PProperty.html", "kind" : "trait", "members_trait" : [{"label" : "foldMap", "tail" : "(a: S)(f: (A) => X)(arg0: Monoid[X]): X", "member" : "tofu.optics.PProperty.foldMap", "link" : "tofu\/optics\/PProperty.html#foldMap[X](a:S)(f:A=>X)(implicitevidence$1:cats.Monoid[X]):X", "kind" : "def"}, {"label" : "downcast", "tail" : "(s: S): Option[A]", "member" : "tofu.optics.PProperty.downcast", "link" : "tofu\/optics\/PProperty.html#downcast(s:S):Option[A]", "kind" : "def"}, {"label" : "traject", "tail" : "(s: S)(fab: (A) => F[B])(FP: Pure[F], F: Functor[F]): F[T]", "member" : "tofu.optics.PProperty.traject", "link" : "tofu\/optics\/PProperty.html#traject[F[+_]](s:S)(fab:A=>F[B])(implicitFP:alleycats.Pure[F],implicitF:cats.Functor[F]):F[T]", "kind" : "def"}, {"label" : "traverse", "tail" : "(s: S)(f: (A) => F[B])(F: Applicative[F]): F[T]", "member" : "tofu.optics.PProperty.traverse", "link" : "tofu\/optics\/PProperty.html#traverse[F[+_]](s:S)(f:A=>F[B])(implicitF:cats.Applicative[F]):F[T]", "kind" : "def"}, {"label" : "getOption", "tail" : "(s: S): Option[A]", "member" : "tofu.optics.PDowncast.getOption", "link" : "tofu\/optics\/PProperty.html#getOption(s:S):Option[A]", "kind" : "def"}, {"label" : "update", "tail" : "(a: S, fb: (A) => B): T", "member" : "tofu.optics.PItems.update", "link" : "tofu\/optics\/PProperty.html#update(a:S,fb:A=>B):T", "kind" : "def"}, {"label" : "as", "tail" : "(): PFolded[S, T1, A, B1]", "member" : "tofu.optics.PFolded.as", "link" : "tofu\/optics\/PProperty.html#as[B1,T1]:tofu.optics.PFolded[S,T1,A,B1]", "kind" : "def"}, {"label" : "getAll", "tail" : "(s: S): List[A]", "member" : "tofu.optics.PFolded.getAll", "link" : "tofu\/optics\/PProperty.html#getAll(s:S):List[A]", "kind" : "def"}, {"label" : "put", "tail" : "(s: S, b: B): T", "member" : "tofu.optics.PUpdate.put", "link" : "tofu\/optics\/PProperty.html#put(s:S,b:B):T", "kind" : "def"}, {"label" : "label", "tail" : "(): PProperty.this.type with Label[label]", "member" : "tofu.optics.PBase.label", "link" : "tofu\/optics\/PProperty.html#label[label]:PBase.this.typewithtofu.optics.Label[label]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/PProperty.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/PProperty.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/PProperty.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/PProperty.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/PProperty.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/PProperty.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/PProperty.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PProperty.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PProperty.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PProperty.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/PProperty.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/PProperty.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/PProperty.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/PProperty.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/PProperty.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/PProperty.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/PProperty.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/PProperty.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/PProperty.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "narrow", "tail" : "(s: S): Either[T, A]", "member" : "tofu.optics.PProperty.narrow", "link" : "tofu\/optics\/PProperty.html#narrow(s:S):Either[T,A]", "kind" : "abstract def"}, {"label" : "set", "tail" : "(s: S, b: B): T", "member" : "tofu.optics.PProperty.set", "link" : "tofu\/optics\/PProperty.html#set(s:S,b:B):T", "kind" : "abstract def"}], "shortDescription" : "aka OptionalS may or may not contain single element of Awhich may be set to B and change whole type to T"}, {"name" : "tofu.optics.PReduced", "object" : "tofu\/optics\/PReduced$.html", "members_object" : [{"label" : "fromGeneric", "tail" : "(o: Optic[Context, S, T, A, B]): PReduced[S, T, A, B]", "member" : "tofu.optics.PReduced.fromGeneric", "link" : "tofu\/optics\/PReduced$.html#fromGeneric[S,T,A,B](o:tofu.optics.Optic[tofu.optics.PReduced.Context,S,T,A,B]):tofu.optics.PReduced[S,T,A,B]", "kind" : "def"}, {"label" : "toGeneric", "tail" : "(o: PReduced[S, T, A, B]): Optic[Context, S, T, A, B]", "member" : "tofu.optics.PReduced.toGeneric", "link" : "tofu\/optics\/PReduced$.html#toGeneric[S,T,A,B](o:tofu.optics.PReduced[S,T,A,B]):tofu.optics.Optic[tofu.optics.PReduced.Context,S,T,A,B]", "kind" : "def"}, {"label" : "Context", "tail" : "", "member" : "tofu.optics.PReduced.Context", "link" : "tofu\/optics\/PReduced$.html#ContextextendsPRepeated.ContextwithPExtract.Context", "kind" : "trait"}, {"label" : "byReducible", "tail" : "(F: Reducible[F]): PReduced[F[A], T, A, B]", "member" : "tofu.optics.PReduced.byReducible", "link" : "tofu\/optics\/PReduced$.html#byReducible[F[_],T,A,B](implicitF:cats.Reducible[F]):tofu.optics.PReduced[F[A],T,A,B]", "kind" : "implicit final def"}, {"label" : "compose", "tail" : "(f: PReduced[A, B, U, V], g: PReduced[S, T, A, B]): PReduced[S, T, U, V]", "member" : "tofu.optics.PReduced.compose", "link" : "tofu\/optics\/PReduced$.html#compose[S,T,A,B,U,V](f:tofu.optics.PReduced[A,B,U,V],g:tofu.optics.PReduced[S,T,A,B]):tofu.optics.PReduced[S,T,U,V]", "kind" : "def"}, {"label" : "toMonoOpticOps", "tail" : "(o: PReduced[S, S, A, A]): MonoOpticOps[PReduced, S, A]", "member" : "tofu.optics.OpticCompanion.toMonoOpticOps", "link" : "tofu\/optics\/PReduced$.html#toMonoOpticOps[S,A](o:O[S,S,A,A]):tofu.optics.MonoOpticOps[O,S,A]", "kind" : "implicit final def"}, {"label" : "toOpticComposeOps", "tail" : "(o: PReduced[S, T, A, B]): OpticComposeOps[PReduced, S, T, A, B]", "member" : "tofu.optics.OpticCompanion.toOpticComposeOps", "link" : "tofu\/optics\/PReduced$.html#toOpticComposeOps[S,T,A,B](o:O[S,T,A,B]):tofu.optics.OpticComposeOps[O,S,T,A,B]", "kind" : "implicit final def"}, {"label" : "category2", "tail" : ": Category2[PReduced]", "member" : "tofu.optics.OpticCompanion.category2", "link" : "tofu\/optics\/PReduced$.html#category2:tofu.optics.classes.Category2[O]", "kind" : "implicit final val"}, {"label" : "category", "tail" : ": Category[Mono]", "member" : "tofu.optics.OpticCompanion.category", "link" : "tofu\/optics\/PReduced$.html#category:cats.arrow.Category[OpticCompanion.this.Mono]", "kind" : "implicit final val"}, {"label" : "Mono", "tail" : "", "member" : "tofu.optics.OpticCompanion.Mono", "link" : "tofu\/optics\/PReduced$.html#Mono[a,b]=O[a,a,b,b]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/PReduced$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/PReduced$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/PReduced$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/PReduced$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/PReduced$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/PReduced$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/PReduced$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PReduced$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PReduced$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PReduced$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/PReduced$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/PReduced$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/PReduced$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/PReduced$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/PReduced$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/PReduced$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/PReduced$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/PReduced$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/PReduced$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/optics\/PReduced.html", "kind" : "trait", "members_trait" : [{"label" : "getAll1", "tail" : "(s: S): NonEmptyList[A]", "member" : "tofu.optics.PReduced.getAll1", "link" : "tofu\/optics\/PReduced.html#getAll1(s:S):cats.data.NonEmptyList[A]", "kind" : "def"}, {"label" : "foldMap", "tail" : "(s: S)(f: (A) => X)(arg0: Monoid[X]): X", "member" : "tofu.optics.PReduced.foldMap", "link" : "tofu\/optics\/PReduced.html#foldMap[X](s:S)(f:A=>X)(implicitevidence$2:cats.Monoid[X]):X", "kind" : "def"}, {"label" : "as", "tail" : "(): PFolded[S, T1, A, B1]", "member" : "tofu.optics.PFolded.as", "link" : "tofu\/optics\/PReduced.html#as[B1,T1]:tofu.optics.PFolded[S,T1,A,B1]", "kind" : "def"}, {"label" : "getAll", "tail" : "(s: S): List[A]", "member" : "tofu.optics.PFolded.getAll", "link" : "tofu\/optics\/PReduced.html#getAll(s:S):List[A]", "kind" : "def"}, {"label" : "label", "tail" : "(): PReduced.this.type with Label[label]", "member" : "tofu.optics.PBase.label", "link" : "tofu\/optics\/PReduced.html#label[label]:PBase.this.typewithtofu.optics.Label[label]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/PReduced.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/PReduced.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/PReduced.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/PReduced.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/PReduced.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/PReduced.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/PReduced.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PReduced.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PReduced.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PReduced.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/PReduced.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/PReduced.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/PReduced.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/PReduced.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/PReduced.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/PReduced.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/PReduced.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/PReduced.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/PReduced.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "reduceMap", "tail" : "(s: S)(f: (A) => X)(arg0: Semigroup[X]): X", "member" : "tofu.optics.PReduced.reduceMap", "link" : "tofu\/optics\/PReduced.html#reduceMap[X](s:S)(f:A=>X)(implicitevidence$1:cats.Semigroup[X]):X", "kind" : "abstract def"}], "shortDescription" : "aka NonEmptyFoldS has some occurences of Aand can collect then"}, {"name" : "tofu.optics.PRepeated", "object" : "tofu\/optics\/PRepeated$.html", "members_object" : [{"label" : "toMono", "tail" : "(o: PRepeated[A, A, B, B]): Repeated[A, B]", "member" : "tofu.optics.PRepeated.toMono", "link" : "tofu\/optics\/PRepeated$.html#toMono[A,B](o:tofu.optics.PRepeated[A,A,B,B]):tofu.optics.Repeated[A,B]", "kind" : "def"}, {"label" : "fromGeneric", "tail" : "(o: Optic[Context, S, T, A, B]): PRepeated[S, T, A, B]", "member" : "tofu.optics.PRepeated.fromGeneric", "link" : "tofu\/optics\/PRepeated$.html#fromGeneric[S,T,A,B](o:tofu.optics.Optic[tofu.optics.PRepeated.Context,S,T,A,B]):tofu.optics.PRepeated[S,T,A,B]", "kind" : "def"}, {"label" : "toGeneric", "tail" : "(o: PRepeated[S, T, A, B]): Optic[Context, S, T, A, B]", "member" : "tofu.optics.PRepeated.toGeneric", "link" : "tofu\/optics\/PRepeated$.html#toGeneric[S,T,A,B](o:tofu.optics.PRepeated[S,T,A,B]):tofu.optics.Optic[tofu.optics.PRepeated.Context,S,T,A,B]", "kind" : "def"}, {"label" : "Context", "tail" : "", "member" : "tofu.optics.PRepeated.Context", "link" : "tofu\/optics\/PRepeated$.html#ContextextendsPContains.Context", "kind" : "trait"}, {"label" : "fromNETraverse", "tail" : "(F: NonEmptyTraverse[F]): PRepeated[F[A], F[B], A, B]", "member" : "tofu.optics.PRepeated.fromNETraverse", "link" : "tofu\/optics\/PRepeated$.html#fromNETraverse[F[_],A,B](implicitF:cats.NonEmptyTraverse[F]):tofu.optics.PRepeated[F[A],F[B],A,B]", "kind" : "implicit final def"}, {"label" : "compose", "tail" : "(f: PRepeated[A, B, U, V], g: PRepeated[S, T, A, B]): PRepeated[S, T, U, V]", "member" : "tofu.optics.PRepeated.compose", "link" : "tofu\/optics\/PRepeated$.html#compose[S,T,A,B,U,V](f:tofu.optics.PRepeated[A,B,U,V],g:tofu.optics.PRepeated[S,T,A,B]):tofu.optics.PRepeated[S,T,U,V]", "kind" : "def"}, {"label" : "toMonoOpticOps", "tail" : "(o: PRepeated[S, S, A, A]): MonoOpticOps[PRepeated, S, A]", "member" : "tofu.optics.OpticCompanion.toMonoOpticOps", "link" : "tofu\/optics\/PRepeated$.html#toMonoOpticOps[S,A](o:O[S,S,A,A]):tofu.optics.MonoOpticOps[O,S,A]", "kind" : "implicit final def"}, {"label" : "toOpticComposeOps", "tail" : "(o: PRepeated[S, T, A, B]): OpticComposeOps[PRepeated, S, T, A, B]", "member" : "tofu.optics.OpticCompanion.toOpticComposeOps", "link" : "tofu\/optics\/PRepeated$.html#toOpticComposeOps[S,T,A,B](o:O[S,T,A,B]):tofu.optics.OpticComposeOps[O,S,T,A,B]", "kind" : "implicit final def"}, {"label" : "category2", "tail" : ": Category2[PRepeated]", "member" : "tofu.optics.OpticCompanion.category2", "link" : "tofu\/optics\/PRepeated$.html#category2:tofu.optics.classes.Category2[O]", "kind" : "implicit final val"}, {"label" : "category", "tail" : ": Category[Mono]", "member" : "tofu.optics.OpticCompanion.category", "link" : "tofu\/optics\/PRepeated$.html#category:cats.arrow.Category[OpticCompanion.this.Mono]", "kind" : "implicit final val"}, {"label" : "Mono", "tail" : "", "member" : "tofu.optics.OpticCompanion.Mono", "link" : "tofu\/optics\/PRepeated$.html#Mono[a,b]=O[a,a,b,b]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/PRepeated$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/PRepeated$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/PRepeated$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/PRepeated$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/PRepeated$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/PRepeated$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/PRepeated$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PRepeated$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PRepeated$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PRepeated$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/PRepeated$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/PRepeated$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/PRepeated$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/PRepeated$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/PRepeated$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/PRepeated$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/PRepeated$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/PRepeated$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/PRepeated$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/optics\/PRepeated.html", "kind" : "trait", "members_trait" : [{"label" : "reduceMap", "tail" : "(s: S)(f: (A) => X)(arg0: Semigroup[X]): X", "member" : "tofu.optics.PRepeated.reduceMap", "link" : "tofu\/optics\/PRepeated.html#reduceMap[X](s:S)(f:A=>X)(implicitevidence$4:cats.Semigroup[X]):X", "kind" : "def"}, {"label" : "foldMap", "tail" : "(s: S)(f: (A) => X)(arg0: Monoid[X]): X", "member" : "tofu.optics.PRepeated.foldMap", "link" : "tofu\/optics\/PRepeated.html#foldMap[X](s:S)(f:A=>X)(implicitevidence$3:cats.Monoid[X]):X", "kind" : "def"}, {"label" : "traverse", "tail" : "(s: S)(f: (A) => F[B])(arg0: Applicative[F]): F[T]", "member" : "tofu.optics.PRepeated.traverse", "link" : "tofu\/optics\/PRepeated.html#traverse[F[+_]](s:S)(f:A=>F[B])(implicitevidence$2:cats.Applicative[F]):F[T]", "kind" : "def"}, {"label" : "getAll1", "tail" : "(s: S): NonEmptyList[A]", "member" : "tofu.optics.PReduced.getAll1", "link" : "tofu\/optics\/PRepeated.html#getAll1(s:S):cats.data.NonEmptyList[A]", "kind" : "def"}, {"label" : "update", "tail" : "(a: S, fb: (A) => B): T", "member" : "tofu.optics.PItems.update", "link" : "tofu\/optics\/PRepeated.html#update(a:S,fb:A=>B):T", "kind" : "def"}, {"label" : "as", "tail" : "(): PFolded[S, T1, A, B1]", "member" : "tofu.optics.PFolded.as", "link" : "tofu\/optics\/PRepeated.html#as[B1,T1]:tofu.optics.PFolded[S,T1,A,B1]", "kind" : "def"}, {"label" : "getAll", "tail" : "(s: S): List[A]", "member" : "tofu.optics.PFolded.getAll", "link" : "tofu\/optics\/PRepeated.html#getAll(s:S):List[A]", "kind" : "def"}, {"label" : "put", "tail" : "(s: S, b: B): T", "member" : "tofu.optics.PUpdate.put", "link" : "tofu\/optics\/PRepeated.html#put(s:S,b:B):T", "kind" : "def"}, {"label" : "label", "tail" : "(): PRepeated.this.type with Label[label]", "member" : "tofu.optics.PBase.label", "link" : "tofu\/optics\/PRepeated.html#label[label]:PBase.this.typewithtofu.optics.Label[label]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/PRepeated.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/PRepeated.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/PRepeated.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/PRepeated.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/PRepeated.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/PRepeated.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/PRepeated.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PRepeated.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PRepeated.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PRepeated.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/PRepeated.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/PRepeated.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/PRepeated.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/PRepeated.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/PRepeated.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/PRepeated.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/PRepeated.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/PRepeated.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/PRepeated.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "traverse1", "tail" : "(s: S)(f: (A) => F[B])(arg0: Apply[F]): F[T]", "member" : "tofu.optics.PRepeated.traverse1", "link" : "tofu\/optics\/PRepeated.html#traverse1[F[+_]](s:S)(f:A=>F[B])(implicitevidence$1:cats.Apply[F]):F[T]", "kind" : "abstract def"}], "shortDescription" : "aka NonEmptyTraversalS has some occurrences of Aand can update them using some effect"}, {"name" : "tofu.optics.Property", "shortDescription" : "", "object" : "tofu\/optics\/Property$.html", "members_object" : [{"label" : "DownCasting", "tail" : "", "member" : "tofu.optics.Property.DownCasting", "link" : "tofu\/optics\/Property$.html#DownCasting[S,A]extendsProperty[S,A]", "kind" : "trait"}, {"label" : "PropertyApplied", "tail" : "", "member" : "tofu.optics.Property.PropertyApplied", "link" : "tofu\/optics\/Property$.html#PropertyApplied[A]extendsAnyVal", "kind" : "final class"}, {"label" : "apply", "tail" : "(): PropertyApplied[A]", "member" : "tofu.optics.Property.apply", "link" : "tofu\/optics\/Property$.html#apply[A]:tofu.optics.Property.PropertyApplied[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(f: O[B, C], g: O[A, B]): O[A, C]", "member" : "tofu.optics.MonoOpticCompanion.compose", "link" : "tofu\/optics\/Property$.html#compose[A,B,C](f:MonoOpticCompanion.this.O[B,C],g:MonoOpticCompanion.this.O[A,B]):MonoOpticCompanion.this.O[A,C]", "kind" : "def"}, {"label" : "apply", "tail" : "(o: O[A, B]): O[A, B]", "member" : "tofu.optics.MonoOpticCompanion.apply", "link" : "tofu\/optics\/Property$.html#apply[A,B](implicito:MonoOpticCompanion.this.O[A,B]):MonoOpticCompanion.this.O[A,B]", "kind" : "def"}, {"label" : "O", "tail" : "", "member" : "tofu.optics.MonoOpticCompanion.O", "link" : "tofu\/optics\/Property$.html#O[a,b]=PO[a,a,b,b]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/Property$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/Property$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/Property$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/Property$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/Property$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/Property$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/Property$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Property$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Property$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Property$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/Property$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/Property$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/Property$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/Property$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/Property$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/Property$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/Property$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/Property$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/Property$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.optics.PSame", "object" : "tofu\/optics\/PSame$.html", "members_object" : [{"label" : "SameOps", "tail" : "", "member" : "tofu.optics.PSame.SameOps", "link" : "tofu\/optics\/PSame$.html#SameOps[A,B]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "fromGeneric", "tail" : "(o: Optic[OpticContext, S, T, A, B]): PSame[S, T, A, B]", "member" : "tofu.optics.PSame.fromGeneric", "link" : "tofu\/optics\/PSame$.html#fromGeneric[S,T,A,B](o:tofu.optics.Optic[tofu.optics.OpticContext,S,T,A,B]):tofu.optics.PSame[S,T,A,B]", "kind" : "def"}, {"label" : "toGeneric", "tail" : "(o: PSame[S, T, A, B]): Optic[OpticContext, S, T, A, B]", "member" : "tofu.optics.PSame.toGeneric", "link" : "tofu\/optics\/PSame$.html#toGeneric[S,T,A,B](o:tofu.optics.PSame[S,T,A,B]):tofu.optics.Optic[tofu.optics.OpticContext,S,T,A,B]", "kind" : "def"}, {"label" : "compose", "tail" : "(f: PSame[A, B, U, V], g: PSame[S, T, A, B]): PSame[S, T, U, V]", "member" : "tofu.optics.PSame.compose", "link" : "tofu\/optics\/PSame$.html#compose[S,T,A,B,U,V](f:tofu.optics.PSame[A,B,U,V],g:tofu.optics.PSame[S,T,A,B]):tofu.optics.PSame[S,T,U,V]", "kind" : "def"}, {"label" : "id", "tail" : "(): PSame[A, B, A, B]", "member" : "tofu.optics.PSame.id", "link" : "tofu\/optics\/PSame$.html#id[A,B]:tofu.optics.PSame[A,B,A,B]", "kind" : "def"}, {"label" : "Mono", "tail" : "", "member" : "tofu.optics.PSame.Mono", "link" : "tofu\/optics\/PSame$.html#Mono[A,B]=tofu.optics.Same[A,B]", "kind" : "type"}, {"label" : "Context", "tail" : "", "member" : "tofu.optics.PSame.Context", "link" : "tofu\/optics\/PSame$.html#Context=tofu.optics.OpticContext", "kind" : "type"}, {"label" : "toMonoOpticOps", "tail" : "(o: PSame[S, S, A, A]): MonoOpticOps[PSame, S, A]", "member" : "tofu.optics.OpticCompanion.toMonoOpticOps", "link" : "tofu\/optics\/PSame$.html#toMonoOpticOps[S,A](o:O[S,S,A,A]):tofu.optics.MonoOpticOps[O,S,A]", "kind" : "implicit final def"}, {"label" : "toOpticComposeOps", "tail" : "(o: PSame[S, T, A, B]): OpticComposeOps[PSame, S, T, A, B]", "member" : "tofu.optics.OpticCompanion.toOpticComposeOps", "link" : "tofu\/optics\/PSame$.html#toOpticComposeOps[S,T,A,B](o:O[S,T,A,B]):tofu.optics.OpticComposeOps[O,S,T,A,B]", "kind" : "implicit final def"}, {"label" : "category2", "tail" : ": Category2[PSame]", "member" : "tofu.optics.OpticCompanion.category2", "link" : "tofu\/optics\/PSame$.html#category2:tofu.optics.classes.Category2[O]", "kind" : "implicit final val"}, {"label" : "category", "tail" : ": Category[PSame.Mono]", "member" : "tofu.optics.OpticCompanion.category", "link" : "tofu\/optics\/PSame$.html#category:cats.arrow.Category[OpticCompanion.this.Mono]", "kind" : "implicit final val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/PSame$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/PSame$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/PSame$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/PSame$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/PSame$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/PSame$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/PSame$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PSame$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PSame$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PSame$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/PSame$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/PSame$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/PSame$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/PSame$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/PSame$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/PSame$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/PSame$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/PSame$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/PSame$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/optics\/PSame.html", "kind" : "trait", "members_trait" : [{"label" : "inverse", "tail" : "(): PSame[B, A, T, S]", "member" : "tofu.optics.PSame.inverse", "link" : "tofu\/optics\/PSame.html#inverse:tofu.optics.PSame[B,A,T,S]", "kind" : "def"}, {"label" : "extract", "tail" : "(a: S): A", "member" : "tofu.optics.PSame.extract", "link" : "tofu\/optics\/PSame.html#extract(a:S):A", "kind" : "def"}, {"label" : "upcast", "tail" : "(b: B): T", "member" : "tofu.optics.PSame.upcast", "link" : "tofu\/optics\/PSame.html#upcast(b:B):T", "kind" : "def"}, {"label" : "downcast", "tail" : "(s: S): Option[A]", "member" : "tofu.optics.PEquivalent.downcast", "link" : "tofu\/optics\/PSame.html#downcast(s:S):Option[A]", "kind" : "def"}, {"label" : "employ", "tail" : "(pb: P[A, F[B]])(F: Functor[F], P: Profunctor[P]): P[S, F[T]]", "member" : "tofu.optics.PEquivalent.employ", "link" : "tofu\/optics\/PSame.html#employ[F[+_],P[-_,+_]](pb:P[A,F[B]])(implicitF:cats.Functor[F],implicitP:cats.arrow.Profunctor[P]):P[S,F[T]]", "kind" : "def"}, {"label" : "traverse", "tail" : "(a: S)(f: (A) => F[B])(F: Applicative[F]): F[T]", "member" : "tofu.optics.PEquivalent.traverse", "link" : "tofu\/optics\/PSame.html#traverse[F[+_]](a:S)(f:A=>F[B])(implicitF:cats.Applicative[F]):F[T]", "kind" : "def"}, {"label" : "inverse", "tail" : "(b: B): T", "member" : "tofu.optics.PEquivalent.inverse", "link" : "tofu\/optics\/PSame.html#inverse(b:B):T", "kind" : "def"}, {"label" : "traverse1", "tail" : "(a: S)(f: (A) => F[B])(F: Apply[F]): F[T]", "member" : "tofu.optics.PContains.traverse1", "link" : "tofu\/optics\/PSame.html#traverse1[F[+_]](a:S)(f:A=>F[B])(implicitF:cats.Apply[F]):F[T]", "kind" : "def"}, {"label" : "reduceMap", "tail" : "(s: S)(f: (A) => X)(arg0: Semigroup[X]): X", "member" : "tofu.optics.PContains.reduceMap", "link" : "tofu\/optics\/PSame.html#reduceMap[X](s:S)(f:A=>X)(implicitevidence$1:cats.Semigroup[X]):X", "kind" : "def"}, {"label" : "project", "tail" : "(s: S)(fab: (A) => F[B])(F: Functor[F]): F[T]", "member" : "tofu.optics.PContains.project", "link" : "tofu\/optics\/PSame.html#project[F[+_]](s:S)(fab:A=>F[B])(implicitF:cats.Functor[F]):F[T]", "kind" : "def"}, {"label" : "update", "tail" : "(s: S, fab: (A) => B): T", "member" : "tofu.optics.PContains.update", "link" : "tofu\/optics\/PSame.html#update(s:S,fab:A=>B):T", "kind" : "def"}, {"label" : "narrow", "tail" : "(s: S): Either[T, A]", "member" : "tofu.optics.PContains.narrow", "link" : "tofu\/optics\/PSame.html#narrow(s:S):Either[T,A]", "kind" : "def"}, {"label" : "get", "tail" : "(s: S): A", "member" : "tofu.optics.PContains.get", "link" : "tofu\/optics\/PSame.html#get(s:S):A", "kind" : "def"}, {"label" : "foldMap", "tail" : "(s: S)(f: (A) => X)(arg0: Monoid[X]): X", "member" : "tofu.optics.PRepeated.foldMap", "link" : "tofu\/optics\/PSame.html#foldMap[X](s:S)(f:A=>X)(implicitevidence$3:cats.Monoid[X]):X", "kind" : "def"}, {"label" : "getAll1", "tail" : "(s: S): NonEmptyList[A]", "member" : "tofu.optics.PReduced.getAll1", "link" : "tofu\/optics\/PSame.html#getAll1(s:S):cats.data.NonEmptyList[A]", "kind" : "def"}, {"label" : "inject", "tail" : "(pb: P[A, F[B]])(FP: Pure[F], F: Functor[F], P: PChoice[P]): P[S, F[T]]", "member" : "tofu.optics.PSubset.inject", "link" : "tofu\/optics\/PSame.html#inject[F[+_],P[-_,+_]](pb:P[A,F[B]])(implicitFP:alleycats.Pure[F],implicitF:cats.Functor[F],implicitP:tofu.optics.classes.PChoice[P]):P[S,F[T]]", "kind" : "def"}, {"label" : "set", "tail" : "(s: S, b: B): T", "member" : "tofu.optics.PSubset.set", "link" : "tofu\/optics\/PSame.html#set(s:S,b:B):T", "kind" : "def"}, {"label" : "traject", "tail" : "(s: S)(fab: (A) => F[B])(FP: Pure[F], F: Functor[F]): F[T]", "member" : "tofu.optics.PProperty.traject", "link" : "tofu\/optics\/PSame.html#traject[F[+_]](s:S)(fab:A=>F[B])(implicitFP:alleycats.Pure[F],implicitF:cats.Functor[F]):F[T]", "kind" : "def"}, {"label" : "put", "tail" : "(s: S, b: B): T", "member" : "tofu.optics.PUpdate.put", "link" : "tofu\/optics\/PSame.html#put(s:S,b:B):T", "kind" : "def"}, {"label" : "getOption", "tail" : "(s: S): Option[A]", "member" : "tofu.optics.PDowncast.getOption", "link" : "tofu\/optics\/PSame.html#getOption(s:S):Option[A]", "kind" : "def"}, {"label" : "as", "tail" : "(): PFolded[S, T1, A, B1]", "member" : "tofu.optics.PFolded.as", "link" : "tofu\/optics\/PSame.html#as[B1,T1]:tofu.optics.PFolded[S,T1,A,B1]", "kind" : "def"}, {"label" : "getAll", "tail" : "(s: S): List[A]", "member" : "tofu.optics.PFolded.getAll", "link" : "tofu\/optics\/PSame.html#getAll(s:S):List[A]", "kind" : "def"}, {"label" : "label", "tail" : "(): PSame.this.type with Label[label]", "member" : "tofu.optics.PBase.label", "link" : "tofu\/optics\/PSame.html#label[label]:PBase.this.typewithtofu.optics.Label[label]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/PSame.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/PSame.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/PSame.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/PSame.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/PSame.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/PSame.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/PSame.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PSame.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PSame.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PSame.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/PSame.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/PSame.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/PSame.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/PSame.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/PSame.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/PSame.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/PSame.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/PSame.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/PSame.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "rsubst", "tail" : "(r: R[A, B]): R[S, T]", "member" : "tofu.optics.PSame.rsubst", "link" : "tofu\/optics\/PSame.html#rsubst[R[-_,+_]](r:R[A,B]):R[S,T]", "kind" : "abstract def"}], "shortDescription" : "polymorphic equality: any relation for S and T equal to relation of A and B"}, {"name" : "tofu.optics.PSubset", "object" : "tofu\/optics\/PSubset$.html", "members_object" : [{"label" : "fromGeneric", "tail" : "(o: Optic[Context, S, T, A, B]): PSubset[S, T, A, B]", "member" : "tofu.optics.PSubset.fromGeneric", "link" : "tofu\/optics\/PSubset$.html#fromGeneric[S,T,A,B](o:tofu.optics.Optic[tofu.optics.PSubset.Context,S,T,A,B]):tofu.optics.PSubset[S,T,A,B]", "kind" : "def"}, {"label" : "toGeneric", "tail" : "(o: PSubset[S, T, A, B]): Optic[Context, S, T, A, B]", "member" : "tofu.optics.PSubset.toGeneric", "link" : "tofu\/optics\/PSubset$.html#toGeneric[S,T,A,B](o:tofu.optics.PSubset[S,T,A,B]):tofu.optics.Optic[tofu.optics.PSubset.Context,S,T,A,B]", "kind" : "def"}, {"label" : "Context", "tail" : "", "member" : "tofu.optics.PSubset.Context", "link" : "tofu\/optics\/PSubset$.html#ContextextendsPEquivalent.Context", "kind" : "trait"}, {"label" : "ByInject", "tail" : "", "member" : "tofu.optics.PSubset.ByInject", "link" : "tofu\/optics\/PSubset$.html#ByInject[S,T,A,B]extendsPSubset[S,T,A,B]", "kind" : "trait"}, {"label" : "compose", "tail" : "(f: PSubset[A, B, U, V], g: PSubset[S, T, A, B]): PSubset[S, T, U, V]", "member" : "tofu.optics.PSubset.compose", "link" : "tofu\/optics\/PSubset$.html#compose[S,T,A,B,U,V](f:tofu.optics.PSubset[A,B,U,V],g:tofu.optics.PSubset[S,T,A,B]):tofu.optics.PSubset[S,T,U,V]", "kind" : "def"}, {"label" : "SubsetApplied", "tail" : "", "member" : "tofu.optics.PSubset.SubsetApplied", "link" : "tofu\/optics\/PSubset$.html#SubsetApplied[S,B]extendsAnyVal", "kind" : "final class"}, {"label" : "apply", "tail" : "(): SubsetApplied[S, B]", "member" : "tofu.optics.PSubset.apply", "link" : "tofu\/optics\/PSubset$.html#apply[S,B]:tofu.optics.PSubset.SubsetApplied[S,B]", "kind" : "def"}, {"label" : "Mono", "tail" : "", "member" : "tofu.optics.PSubset.Mono", "link" : "tofu\/optics\/PSubset$.html#Mono[A,B]=tofu.optics.Subset[A,B]", "kind" : "type"}, {"label" : "toMonoOpticOps", "tail" : "(o: PSubset[S, S, A, A]): MonoOpticOps[PSubset, S, A]", "member" : "tofu.optics.OpticCompanion.toMonoOpticOps", "link" : "tofu\/optics\/PSubset$.html#toMonoOpticOps[S,A](o:O[S,S,A,A]):tofu.optics.MonoOpticOps[O,S,A]", "kind" : "implicit final def"}, {"label" : "toOpticComposeOps", "tail" : "(o: PSubset[S, T, A, B]): OpticComposeOps[PSubset, S, T, A, B]", "member" : "tofu.optics.OpticCompanion.toOpticComposeOps", "link" : "tofu\/optics\/PSubset$.html#toOpticComposeOps[S,T,A,B](o:O[S,T,A,B]):tofu.optics.OpticComposeOps[O,S,T,A,B]", "kind" : "implicit final def"}, {"label" : "category2", "tail" : ": Category2[PSubset]", "member" : "tofu.optics.OpticCompanion.category2", "link" : "tofu\/optics\/PSubset$.html#category2:tofu.optics.classes.Category2[O]", "kind" : "implicit final val"}, {"label" : "category", "tail" : ": Category[PSubset.Mono]", "member" : "tofu.optics.OpticCompanion.category", "link" : "tofu\/optics\/PSubset$.html#category:cats.arrow.Category[OpticCompanion.this.Mono]", "kind" : "implicit final val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/PSubset$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/PSubset$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/PSubset$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/PSubset$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/PSubset$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/PSubset$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/PSubset$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PSubset$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PSubset$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PSubset$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/PSubset$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/PSubset$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/PSubset$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/PSubset$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/PSubset$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/PSubset$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/PSubset$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/PSubset$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/PSubset$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/optics\/PSubset.html", "kind" : "trait", "members_trait" : [{"label" : "foldMap", "tail" : "(a: S)(f: (A) => X)(arg0: Monoid[X]): X", "member" : "tofu.optics.PSubset.foldMap", "link" : "tofu\/optics\/PSubset.html#foldMap[X](a:S)(f:A=>X)(implicitevidence$1:cats.Monoid[X]):X", "kind" : "def"}, {"label" : "inject", "tail" : "(pb: P[A, F[B]])(FP: Pure[F], F: Functor[F], P: PChoice[P]): P[S, F[T]]", "member" : "tofu.optics.PSubset.inject", "link" : "tofu\/optics\/PSubset.html#inject[F[+_],P[-_,+_]](pb:P[A,F[B]])(implicitFP:alleycats.Pure[F],implicitF:cats.Functor[F],implicitP:tofu.optics.classes.PChoice[P]):P[S,F[T]]", "kind" : "def"}, {"label" : "set", "tail" : "(s: S, b: B): T", "member" : "tofu.optics.PSubset.set", "link" : "tofu\/optics\/PSubset.html#set(s:S,b:B):T", "kind" : "def"}, {"label" : "downcast", "tail" : "(s: S): Option[A]", "member" : "tofu.optics.PProperty.downcast", "link" : "tofu\/optics\/PSubset.html#downcast(s:S):Option[A]", "kind" : "def"}, {"label" : "traject", "tail" : "(s: S)(fab: (A) => F[B])(FP: Pure[F], F: Functor[F]): F[T]", "member" : "tofu.optics.PProperty.traject", "link" : "tofu\/optics\/PSubset.html#traject[F[+_]](s:S)(fab:A=>F[B])(implicitFP:alleycats.Pure[F],implicitF:cats.Functor[F]):F[T]", "kind" : "def"}, {"label" : "traverse", "tail" : "(s: S)(f: (A) => F[B])(F: Applicative[F]): F[T]", "member" : "tofu.optics.PProperty.traverse", "link" : "tofu\/optics\/PSubset.html#traverse[F[+_]](s:S)(f:A=>F[B])(implicitF:cats.Applicative[F]):F[T]", "kind" : "def"}, {"label" : "update", "tail" : "(a: S, fb: (A) => B): T", "member" : "tofu.optics.PItems.update", "link" : "tofu\/optics\/PSubset.html#update(a:S,fb:A=>B):T", "kind" : "def"}, {"label" : "put", "tail" : "(s: S, b: B): T", "member" : "tofu.optics.PUpdate.put", "link" : "tofu\/optics\/PSubset.html#put(s:S,b:B):T", "kind" : "def"}, {"label" : "getOption", "tail" : "(s: S): Option[A]", "member" : "tofu.optics.PDowncast.getOption", "link" : "tofu\/optics\/PSubset.html#getOption(s:S):Option[A]", "kind" : "def"}, {"label" : "as", "tail" : "(): PFolded[S, T1, A, B1]", "member" : "tofu.optics.PFolded.as", "link" : "tofu\/optics\/PSubset.html#as[B1,T1]:tofu.optics.PFolded[S,T1,A,B1]", "kind" : "def"}, {"label" : "getAll", "tail" : "(s: S): List[A]", "member" : "tofu.optics.PFolded.getAll", "link" : "tofu\/optics\/PSubset.html#getAll(s:S):List[A]", "kind" : "def"}, {"label" : "label", "tail" : "(): PSubset.this.type with Label[label]", "member" : "tofu.optics.PBase.label", "link" : "tofu\/optics\/PSubset.html#label[label]:PBase.this.typewithtofu.optics.Label[label]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/PSubset.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/PSubset.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/PSubset.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/PSubset.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/PSubset.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/PSubset.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/PSubset.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PSubset.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PSubset.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PSubset.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/PSubset.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/PSubset.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/PSubset.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/PSubset.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/PSubset.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/PSubset.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/PSubset.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/PSubset.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/PSubset.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "narrow", "tail" : "(s: S): Either[T, A]", "member" : "tofu.optics.PSubset.narrow", "link" : "tofu\/optics\/PSubset.html#narrow(s:S):Either[T,A]", "kind" : "abstract def"}, {"label" : "upcast", "tail" : "(b: B): T", "member" : "tofu.optics.PUpcast.upcast", "link" : "tofu\/optics\/PSubset.html#upcast(b:B):T", "kind" : "abstract def"}], "shortDescription" : "aka Prismany of S could be equivalent to A"}, {"name" : "tofu.optics.PUpcast", "object" : "tofu\/optics\/PUpcast$.html", "members_object" : [{"label" : "fromGeneric", "tail" : "(o: Optic[Context, S, T, A, B]): PUpcast[S, T, A, B]", "member" : "tofu.optics.PUpcast.fromGeneric", "link" : "tofu\/optics\/PUpcast$.html#fromGeneric[S,T,A,B](o:tofu.optics.Optic[tofu.optics.PUpcast.Context,S,T,A,B]):tofu.optics.PUpcast[S,T,A,B]", "kind" : "def"}, {"label" : "toGeneric", "tail" : "(o: PUpcast[S, T, A, B]): Optic[Context, S, T, A, B]", "member" : "tofu.optics.PUpcast.toGeneric", "link" : "tofu\/optics\/PUpcast$.html#toGeneric[S,T,A,B](o:tofu.optics.PUpcast[S,T,A,B]):tofu.optics.Optic[tofu.optics.PUpcast.Context,S,T,A,B]", "kind" : "def"}, {"label" : "Context", "tail" : "", "member" : "tofu.optics.PUpcast.Context", "link" : "tofu\/optics\/PUpcast$.html#ContextextendsPSubset.Context", "kind" : "class"}, {"label" : "compose", "tail" : "(f: PUpcast[A, B, U, V], g: PUpcast[S, T, A, B]): PUpcast[S, T, U, V]", "member" : "tofu.optics.PUpcast.compose", "link" : "tofu\/optics\/PUpcast$.html#compose[S,T,A,B,U,V](f:tofu.optics.PUpcast[A,B,U,V],g:tofu.optics.PUpcast[S,T,A,B]):tofu.optics.PUpcast[S,T,U,V]", "kind" : "def"}, {"label" : "toMonoOpticOps", "tail" : "(o: PUpcast[S, S, A, A]): MonoOpticOps[PUpcast, S, A]", "member" : "tofu.optics.OpticCompanion.toMonoOpticOps", "link" : "tofu\/optics\/PUpcast$.html#toMonoOpticOps[S,A](o:O[S,S,A,A]):tofu.optics.MonoOpticOps[O,S,A]", "kind" : "implicit final def"}, {"label" : "toOpticComposeOps", "tail" : "(o: PUpcast[S, T, A, B]): OpticComposeOps[PUpcast, S, T, A, B]", "member" : "tofu.optics.OpticCompanion.toOpticComposeOps", "link" : "tofu\/optics\/PUpcast$.html#toOpticComposeOps[S,T,A,B](o:O[S,T,A,B]):tofu.optics.OpticComposeOps[O,S,T,A,B]", "kind" : "implicit final def"}, {"label" : "category2", "tail" : ": Category2[PUpcast]", "member" : "tofu.optics.OpticCompanion.category2", "link" : "tofu\/optics\/PUpcast$.html#category2:tofu.optics.classes.Category2[O]", "kind" : "implicit final val"}, {"label" : "category", "tail" : ": Category[Mono]", "member" : "tofu.optics.OpticCompanion.category", "link" : "tofu\/optics\/PUpcast$.html#category:cats.arrow.Category[OpticCompanion.this.Mono]", "kind" : "implicit final val"}, {"label" : "Mono", "tail" : "", "member" : "tofu.optics.OpticCompanion.Mono", "link" : "tofu\/optics\/PUpcast$.html#Mono[a,b]=O[a,a,b,b]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/PUpcast$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/PUpcast$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/PUpcast$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/PUpcast$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/PUpcast$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/PUpcast$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/PUpcast$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PUpcast$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PUpcast$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PUpcast$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/PUpcast$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/PUpcast$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/PUpcast$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/PUpcast$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/PUpcast$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/PUpcast$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/PUpcast$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/PUpcast$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/PUpcast$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/optics\/PUpcast.html", "kind" : "trait", "members_trait" : [{"label" : "label", "tail" : "(): PUpcast.this.type with Label[label]", "member" : "tofu.optics.PBase.label", "link" : "tofu\/optics\/PUpcast.html#label[label]:PBase.this.typewithtofu.optics.Label[label]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/PUpcast.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/PUpcast.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/PUpcast.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/PUpcast.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/PUpcast.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/PUpcast.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/PUpcast.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PUpcast.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PUpcast.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PUpcast.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/PUpcast.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/PUpcast.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/PUpcast.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/PUpcast.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/PUpcast.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/PUpcast.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/PUpcast.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/PUpcast.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/PUpcast.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "upcast", "tail" : "(b: B): T", "member" : "tofu.optics.PUpcast.upcast", "link" : "tofu\/optics\/PUpcast.html#upcast(b:B):T", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.optics.PUpdate", "object" : "tofu\/optics\/PUpdate$.html", "members_object" : [{"label" : "byFunctor", "tail" : "(F: Functor[F]): PUpdate[F[A], F[B], A, B]", "member" : "tofu.optics.PUpdate.byFunctor", "link" : "tofu\/optics\/PUpdate$.html#byFunctor[F[_],A,B](implicitF:cats.Functor[F]):tofu.optics.PUpdate[F[A],F[B],A,B]", "kind" : "implicit final def"}, {"label" : "fromGeneric", "tail" : "(o: Optic[Context, S, T, A, B]): PUpdate[S, T, A, B]", "member" : "tofu.optics.PUpdate.fromGeneric", "link" : "tofu\/optics\/PUpdate$.html#fromGeneric[S,T,A,B](o:tofu.optics.Optic[tofu.optics.PUpdate.Context,S,T,A,B]):tofu.optics.PUpdate[S,T,A,B]", "kind" : "def"}, {"label" : "toGeneric", "tail" : "(o: PUpdate[S, T, A, B]): Optic[Context, S, T, A, B]", "member" : "tofu.optics.PUpdate.toGeneric", "link" : "tofu\/optics\/PUpdate$.html#toGeneric[S,T,A,B](o:tofu.optics.PUpdate[S,T,A,B]):tofu.optics.Optic[tofu.optics.PUpdate.Context,S,T,A,B]", "kind" : "def"}, {"label" : "Context", "tail" : "", "member" : "tofu.optics.PUpdate.Context", "link" : "tofu\/optics\/PUpdate$.html#ContextextendsPItems.Context", "kind" : "class"}, {"label" : "compose", "tail" : "(f: PUpdate[A, B, U, V], g: PUpdate[S, T, A, B]): PUpdate[S, T, U, V]", "member" : "tofu.optics.PUpdate.compose", "link" : "tofu\/optics\/PUpdate$.html#compose[S,T,A,B,U,V](f:tofu.optics.PUpdate[A,B,U,V],g:tofu.optics.PUpdate[S,T,A,B]):tofu.optics.PUpdate[S,T,U,V]", "kind" : "def"}, {"label" : "toMonoOpticOps", "tail" : "(o: PUpdate[S, S, A, A]): MonoOpticOps[PUpdate, S, A]", "member" : "tofu.optics.OpticCompanion.toMonoOpticOps", "link" : "tofu\/optics\/PUpdate$.html#toMonoOpticOps[S,A](o:O[S,S,A,A]):tofu.optics.MonoOpticOps[O,S,A]", "kind" : "implicit final def"}, {"label" : "toOpticComposeOps", "tail" : "(o: PUpdate[S, T, A, B]): OpticComposeOps[PUpdate, S, T, A, B]", "member" : "tofu.optics.OpticCompanion.toOpticComposeOps", "link" : "tofu\/optics\/PUpdate$.html#toOpticComposeOps[S,T,A,B](o:O[S,T,A,B]):tofu.optics.OpticComposeOps[O,S,T,A,B]", "kind" : "implicit final def"}, {"label" : "category2", "tail" : ": Category2[PUpdate]", "member" : "tofu.optics.OpticCompanion.category2", "link" : "tofu\/optics\/PUpdate$.html#category2:tofu.optics.classes.Category2[O]", "kind" : "implicit final val"}, {"label" : "category", "tail" : ": Category[Mono]", "member" : "tofu.optics.OpticCompanion.category", "link" : "tofu\/optics\/PUpdate$.html#category:cats.arrow.Category[OpticCompanion.this.Mono]", "kind" : "implicit final val"}, {"label" : "Mono", "tail" : "", "member" : "tofu.optics.OpticCompanion.Mono", "link" : "tofu\/optics\/PUpdate$.html#Mono[a,b]=O[a,a,b,b]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/PUpdate$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/PUpdate$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/PUpdate$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/PUpdate$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/PUpdate$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/PUpdate$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/PUpdate$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PUpdate$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PUpdate$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PUpdate$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/PUpdate$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/PUpdate$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/PUpdate$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/PUpdate$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/PUpdate$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/PUpdate$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/PUpdate$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/PUpdate$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/PUpdate$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/optics\/PUpdate.html", "kind" : "trait", "members_trait" : [{"label" : "put", "tail" : "(s: S, b: B): T", "member" : "tofu.optics.PUpdate.put", "link" : "tofu\/optics\/PUpdate.html#put(s:S,b:B):T", "kind" : "def"}, {"label" : "label", "tail" : "(): PUpdate.this.type with Label[label]", "member" : "tofu.optics.PBase.label", "link" : "tofu\/optics\/PUpdate.html#label[label]:PBase.this.typewithtofu.optics.Label[label]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/PUpdate.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/PUpdate.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/PUpdate.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/PUpdate.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/PUpdate.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/PUpdate.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/PUpdate.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PUpdate.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PUpdate.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/PUpdate.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/PUpdate.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/PUpdate.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/PUpdate.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/PUpdate.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/PUpdate.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/PUpdate.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/PUpdate.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/PUpdate.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/PUpdate.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "update", "tail" : "(s: S, fb: (A) => B): T", "member" : "tofu.optics.PUpdate.update", "link" : "tofu\/optics\/PUpdate.html#update(s:S,fb:A=>B):T", "kind" : "abstract def"}], "shortDescription" : "aka Settercan update all occurrences of A in S"}, {"name" : "tofu.optics.Reduced", "shortDescription" : "", "object" : "tofu\/optics\/Reduced$.html", "members_object" : [{"label" : "ReducedApply", "tail" : "", "member" : "tofu.optics.Reduced.ReducedApply", "link" : "tofu\/optics\/Reduced$.html#ReducedApply[S]extendsAnyRef", "kind" : "class"}, {"label" : "apply", "tail" : "(): ReducedApply[S]", "member" : "tofu.optics.Reduced.apply", "link" : "tofu\/optics\/Reduced$.html#apply[S]:tofu.optics.Reduced.ReducedApply[S]", "kind" : "def"}, {"label" : "compose", "tail" : "(f: O[B, C], g: O[A, B]): O[A, C]", "member" : "tofu.optics.MonoOpticCompanion.compose", "link" : "tofu\/optics\/Reduced$.html#compose[A,B,C](f:MonoOpticCompanion.this.O[B,C],g:MonoOpticCompanion.this.O[A,B]):MonoOpticCompanion.this.O[A,C]", "kind" : "def"}, {"label" : "apply", "tail" : "(o: O[A, B]): O[A, B]", "member" : "tofu.optics.MonoOpticCompanion.apply", "link" : "tofu\/optics\/Reduced$.html#apply[A,B](implicito:MonoOpticCompanion.this.O[A,B]):MonoOpticCompanion.this.O[A,B]", "kind" : "def"}, {"label" : "O", "tail" : "", "member" : "tofu.optics.MonoOpticCompanion.O", "link" : "tofu\/optics\/Reduced$.html#O[a,b]=PO[a,a,b,b]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/Reduced$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/Reduced$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/Reduced$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/Reduced$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/Reduced$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/Reduced$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/Reduced$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Reduced$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Reduced$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Reduced$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/Reduced$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/Reduced$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/Reduced$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/Reduced$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/Reduced$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/Reduced$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/Reduced$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/Reduced$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/Reduced$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.optics.Repeated", "shortDescription" : "", "object" : "tofu\/optics\/Repeated$.html", "members_object" : [{"label" : "RepeatedApply", "tail" : "", "member" : "tofu.optics.Repeated.RepeatedApply", "link" : "tofu\/optics\/Repeated$.html#RepeatedApply[S]extendsAnyRef", "kind" : "class"}, {"label" : "apply", "tail" : "(): RepeatedApply[S]", "member" : "tofu.optics.Repeated.apply", "link" : "tofu\/optics\/Repeated$.html#apply[S]:tofu.optics.Repeated.RepeatedApply[S]", "kind" : "def"}, {"label" : "compose", "tail" : "(f: O[B, C], g: O[A, B]): O[A, C]", "member" : "tofu.optics.MonoOpticCompanion.compose", "link" : "tofu\/optics\/Repeated$.html#compose[A,B,C](f:MonoOpticCompanion.this.O[B,C],g:MonoOpticCompanion.this.O[A,B]):MonoOpticCompanion.this.O[A,C]", "kind" : "def"}, {"label" : "apply", "tail" : "(o: O[A, B]): O[A, B]", "member" : "tofu.optics.MonoOpticCompanion.apply", "link" : "tofu\/optics\/Repeated$.html#apply[A,B](implicito:MonoOpticCompanion.this.O[A,B]):MonoOpticCompanion.this.O[A,B]", "kind" : "def"}, {"label" : "O", "tail" : "", "member" : "tofu.optics.MonoOpticCompanion.O", "link" : "tofu\/optics\/Repeated$.html#O[a,b]=PO[a,a,b,b]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/Repeated$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/Repeated$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/Repeated$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/Repeated$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/Repeated$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/Repeated$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/Repeated$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Repeated$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Repeated$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Repeated$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/Repeated$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/Repeated$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/Repeated$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/Repeated$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/Repeated$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/Repeated$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/Repeated$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/Repeated$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/Repeated$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.optics.Same", "shortDescription" : "", "object" : "tofu\/optics\/Same$.html", "members_object" : [{"label" : "id", "tail" : "(): Same[A, A]", "member" : "tofu.optics.Same.id", "link" : "tofu\/optics\/Same$.html#id[A]:tofu.optics.Same[A,A]", "kind" : "def"}, {"label" : "compose", "tail" : "(f: O[B, C], g: O[A, B]): O[A, C]", "member" : "tofu.optics.MonoOpticCompanion.compose", "link" : "tofu\/optics\/Same$.html#compose[A,B,C](f:MonoOpticCompanion.this.O[B,C],g:MonoOpticCompanion.this.O[A,B]):MonoOpticCompanion.this.O[A,C]", "kind" : "def"}, {"label" : "apply", "tail" : "(o: O[A, B]): O[A, B]", "member" : "tofu.optics.MonoOpticCompanion.apply", "link" : "tofu\/optics\/Same$.html#apply[A,B](implicito:MonoOpticCompanion.this.O[A,B]):MonoOpticCompanion.this.O[A,B]", "kind" : "def"}, {"label" : "O", "tail" : "", "member" : "tofu.optics.MonoOpticCompanion.O", "link" : "tofu\/optics\/Same$.html#O[a,b]=PO[a,a,b,b]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/Same$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/Same$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/Same$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/Same$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/Same$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/Same$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/Same$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Same$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Same$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Same$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/Same$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/Same$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/Same$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/Same$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/Same$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/Same$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/Same$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/Same$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/Same$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.optics.Subset", "shortDescription" : "", "object" : "tofu\/optics\/Subset$.html", "members_object" : [{"label" : "ByDowncast", "tail" : "", "member" : "tofu.optics.Subset.ByDowncast", "link" : "tofu\/optics\/Subset$.html#ByDowncast[A,B]extendsSubset[A,B]", "kind" : "trait"}, {"label" : "subType", "tail" : "(arg0: ClassTag[B]): Subset[A, B]", "member" : "tofu.optics.Subset.subType", "link" : "tofu\/optics\/Subset$.html#subType[A,B<:A](implicitevidence$2:scala.reflect.ClassTag[B]):tofu.optics.Subset[A,B]", "kind" : "implicit def"}, {"label" : "SubsetApplied", "tail" : "", "member" : "tofu.optics.Subset.SubsetApplied", "link" : "tofu\/optics\/Subset$.html#SubsetApplied[A]extendsAnyVal", "kind" : "final class"}, {"label" : "apply", "tail" : "(): SubsetApplied[A]", "member" : "tofu.optics.Subset.apply", "link" : "tofu\/optics\/Subset$.html#apply[A]:tofu.optics.Subset.SubsetApplied[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(f: O[B, C], g: O[A, B]): O[A, C]", "member" : "tofu.optics.MonoOpticCompanion.compose", "link" : "tofu\/optics\/Subset$.html#compose[A,B,C](f:MonoOpticCompanion.this.O[B,C],g:MonoOpticCompanion.this.O[A,B]):MonoOpticCompanion.this.O[A,C]", "kind" : "def"}, {"label" : "apply", "tail" : "(o: O[A, B]): O[A, B]", "member" : "tofu.optics.MonoOpticCompanion.apply", "link" : "tofu\/optics\/Subset$.html#apply[A,B](implicito:MonoOpticCompanion.this.O[A,B]):MonoOpticCompanion.this.O[A,B]", "kind" : "def"}, {"label" : "O", "tail" : "", "member" : "tofu.optics.MonoOpticCompanion.O", "link" : "tofu\/optics\/Subset$.html#O[a,b]=PO[a,a,b,b]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/Subset$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/Subset$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/Subset$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/Subset$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/Subset$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/Subset$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/Subset$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Subset$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Subset$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Subset$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/Subset$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/Subset$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/Subset$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/Subset$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/Subset$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/Subset$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/Subset$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/Subset$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/Subset$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.optics.Upcast", "shortDescription" : "", "object" : "tofu\/optics\/Upcast$.html", "members_object" : [{"label" : "compose", "tail" : "(f: O[B, C], g: O[A, B]): O[A, C]", "member" : "tofu.optics.MonoOpticCompanion.compose", "link" : "tofu\/optics\/Upcast$.html#compose[A,B,C](f:MonoOpticCompanion.this.O[B,C],g:MonoOpticCompanion.this.O[A,B]):MonoOpticCompanion.this.O[A,C]", "kind" : "def"}, {"label" : "apply", "tail" : "(o: O[A, B]): O[A, B]", "member" : "tofu.optics.MonoOpticCompanion.apply", "link" : "tofu\/optics\/Upcast$.html#apply[A,B](implicito:MonoOpticCompanion.this.O[A,B]):MonoOpticCompanion.this.O[A,B]", "kind" : "def"}, {"label" : "O", "tail" : "", "member" : "tofu.optics.MonoOpticCompanion.O", "link" : "tofu\/optics\/Upcast$.html#O[a,b]=PO[a,a,b,b]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/Upcast$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/Upcast$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/Upcast$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/Upcast$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/Upcast$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/Upcast$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/Upcast$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Upcast$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Upcast$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Upcast$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/Upcast$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/Upcast$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/Upcast$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/Upcast$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/Upcast$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/Upcast$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/Upcast$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/Upcast$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/Upcast$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.optics.Update", "shortDescription" : "", "object" : "tofu\/optics\/Update$.html", "members_object" : [{"label" : "compose", "tail" : "(f: O[B, C], g: O[A, B]): O[A, C]", "member" : "tofu.optics.MonoOpticCompanion.compose", "link" : "tofu\/optics\/Update$.html#compose[A,B,C](f:MonoOpticCompanion.this.O[B,C],g:MonoOpticCompanion.this.O[A,B]):MonoOpticCompanion.this.O[A,C]", "kind" : "def"}, {"label" : "apply", "tail" : "(o: O[A, B]): O[A, B]", "member" : "tofu.optics.MonoOpticCompanion.apply", "link" : "tofu\/optics\/Update$.html#apply[A,B](implicito:MonoOpticCompanion.this.O[A,B]):MonoOpticCompanion.this.O[A,B]", "kind" : "def"}, {"label" : "O", "tail" : "", "member" : "tofu.optics.MonoOpticCompanion.O", "link" : "tofu\/optics\/Update$.html#O[a,b]=PO[a,a,b,b]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/Update$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/Update$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/Update$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/Update$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/Update$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/Update$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/Update$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Update$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Update$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/Update$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/Update$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/Update$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/Update$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/Update$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/Update$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/Update$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/Update$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/Update$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/Update$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "tofu.optics.macros" : [{"name" : "tofu.optics.macros.ClassyOptics", "shortDescription" : "", "members_class" : [{"label" : "macroTransform", "tail" : "(annottees: Any*): Any", "member" : "tofu.optics.macros.ClassyOptics.macroTransform", "link" : "tofu\/optics\/macros\/ClassyOptics.html#macroTransform(annottees:Any*):Any", "kind" : "macro def"}, {"member" : "tofu.optics.macros.ClassyOptics#<init>", "error" : "unsupported entity"}, {"label" : "prefix", "tail" : ": String", "member" : "tofu.optics.macros.ClassyOptics.prefix", "link" : "tofu\/optics\/macros\/ClassyOptics.html#prefix:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/macros\/ClassyOptics.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/macros\/ClassyOptics.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/macros\/ClassyOptics.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/macros\/ClassyOptics.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/macros\/ClassyOptics.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/macros\/ClassyOptics.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/macros\/ClassyOptics.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/macros\/ClassyOptics.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/macros\/ClassyOptics.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/macros\/ClassyOptics.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/macros\/ClassyOptics.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/macros\/ClassyOptics.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/macros\/ClassyOptics.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/macros\/ClassyOptics.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/macros\/ClassyOptics.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/macros\/ClassyOptics.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/macros\/ClassyOptics.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/macros\/ClassyOptics.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/macros\/ClassyOptics.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "tofu\/optics\/macros\/ClassyOptics.html", "kind" : "class"}, {"name" : "tofu.optics.macros.ClassyPOptics", "shortDescription" : "", "members_class" : [{"label" : "macroTransform", "tail" : "(annottees: Any*): Any", "member" : "tofu.optics.macros.ClassyPOptics.macroTransform", "link" : "tofu\/optics\/macros\/ClassyPOptics.html#macroTransform(annottees:Any*):Any", "kind" : "macro def"}, {"member" : "tofu.optics.macros.ClassyPOptics#<init>", "error" : "unsupported entity"}, {"label" : "prefix", "tail" : ": String", "member" : "tofu.optics.macros.ClassyPOptics.prefix", "link" : "tofu\/optics\/macros\/ClassyPOptics.html#prefix:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/macros\/ClassyPOptics.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/macros\/ClassyPOptics.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/macros\/ClassyPOptics.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/macros\/ClassyPOptics.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/macros\/ClassyPOptics.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/macros\/ClassyPOptics.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/macros\/ClassyPOptics.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/macros\/ClassyPOptics.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/macros\/ClassyPOptics.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/macros\/ClassyPOptics.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/macros\/ClassyPOptics.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/macros\/ClassyPOptics.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/macros\/ClassyPOptics.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/macros\/ClassyPOptics.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/macros\/ClassyPOptics.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/macros\/ClassyPOptics.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/macros\/ClassyPOptics.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/macros\/ClassyPOptics.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/macros\/ClassyPOptics.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "tofu\/optics\/macros\/ClassyPOptics.html", "kind" : "class"}, {"name" : "tofu.optics.macros.GenContains", "shortDescription" : "", "object" : "tofu\/optics\/macros\/GenContains$.html", "members_class" : [{"label" : "apply", "tail" : "(field: (A) => B): Contains[A, B]", "member" : "tofu.optics.macros.GenContains.apply", "link" : "tofu\/optics\/macros\/GenContains.html#apply[B](field:A=>B):tofu.optics.Contains[A,B]", "kind" : "macro def"}, {"member" : "tofu.optics.macros.GenContains#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/macros\/GenContains.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/macros\/GenContains.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/macros\/GenContains.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/macros\/GenContains.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/macros\/GenContains.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/macros\/GenContains.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/macros\/GenContains.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/macros\/GenContains.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/macros\/GenContains.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/macros\/GenContains.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/macros\/GenContains.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/macros\/GenContains.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/macros\/GenContains.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/macros\/GenContains.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/macros\/GenContains.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/macros\/GenContains.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/macros\/GenContains.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/macros\/GenContains.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/macros\/GenContains.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(): GenContains[A]", "member" : "tofu.optics.macros.GenContains.apply", "link" : "tofu\/optics\/macros\/GenContains$.html#apply[A]:tofu.optics.macros.GenContains[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/macros\/GenContains$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/macros\/GenContains$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/macros\/GenContains$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/macros\/GenContains$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/macros\/GenContains$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/macros\/GenContains$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/macros\/GenContains$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/macros\/GenContains$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/macros\/GenContains$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/macros\/GenContains$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/macros\/GenContains$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/macros\/GenContains$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/macros\/GenContains$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/macros\/GenContains$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/macros\/GenContains$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/macros\/GenContains$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/macros\/GenContains$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/macros\/GenContains$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/macros\/GenContains$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "tofu\/optics\/macros\/GenContains.html", "kind" : "class"}, {"name" : "tofu.optics.macros.GenEquivalent", "shortDescription" : "", "object" : "tofu\/optics\/macros\/GenEquivalent$.html", "members_object" : [{"label" : "fields", "tail" : "(): Equivalent[S, _]", "member" : "tofu.optics.macros.GenEquivalent.fields", "link" : "tofu\/optics\/macros\/GenEquivalent$.html#fields[S]:tofu.optics.Equivalent[S,_]", "kind" : "macro def"}, {"label" : "unit", "tail" : "(): Equivalent[S, Unit]", "member" : "tofu.optics.macros.GenEquivalent.unit", "link" : "tofu\/optics\/macros\/GenEquivalent$.html#unit[S]:tofu.optics.Equivalent[S,Unit]", "kind" : "macro def"}, {"label" : "apply", "tail" : "(): Equivalent[S, A]", "member" : "tofu.optics.macros.GenEquivalent.apply", "link" : "tofu\/optics\/macros\/GenEquivalent$.html#apply[S,A]:tofu.optics.Equivalent[S,A]", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/macros\/GenEquivalent$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/macros\/GenEquivalent$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/macros\/GenEquivalent$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/macros\/GenEquivalent$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/macros\/GenEquivalent$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/macros\/GenEquivalent$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/macros\/GenEquivalent$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/macros\/GenEquivalent$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/macros\/GenEquivalent$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/macros\/GenEquivalent$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/macros\/GenEquivalent$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/macros\/GenEquivalent$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/macros\/GenEquivalent$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/macros\/GenEquivalent$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/macros\/GenEquivalent$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/macros\/GenEquivalent$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/macros\/GenEquivalent$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/macros\/GenEquivalent$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/macros\/GenEquivalent$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.optics.macros.GenEquivalentImpl", "shortDescription" : "", "members_class" : [{"label" : "genEquiv_unit_impl", "tail" : "(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[S]): scala.reflect.macros.blackbox.Context.Expr[Equivalent[S, Unit]]", "member" : "tofu.optics.macros.GenEquivalentImpl.genEquiv_unit_impl", "link" : "tofu\/optics\/macros\/GenEquivalentImpl.html#genEquiv_unit_impl[S](implicitevidence$5:GenEquivalentImpl.this.c.WeakTypeTag[S]):GenEquivalentImpl.this.c.Expr[tofu.optics.Equivalent[S,Unit]]", "kind" : "def"}, {"label" : "genEquiv_impl", "tail" : "(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[S], arg1: scala.reflect.macros.blackbox.Context.WeakTypeTag[A]): scala.reflect.macros.blackbox.Context.Expr[Equivalent[S, A]]", "member" : "tofu.optics.macros.GenEquivalentImpl.genEquiv_impl", "link" : "tofu\/optics\/macros\/GenEquivalentImpl.html#genEquiv_impl[S,A](implicitevidence$3:GenEquivalentImpl.this.c.WeakTypeTag[S],implicitevidence$4:GenEquivalentImpl.this.c.WeakTypeTag[A]):GenEquivalentImpl.this.c.Expr[tofu.optics.Equivalent[S,A]]", "kind" : "def"}, {"member" : "tofu.optics.macros.GenEquivalentImpl#<init>", "error" : "unsupported entity"}, {"label" : "c", "tail" : ": scala.reflect.macros.blackbox.Context", "member" : "tofu.optics.macros.GenEquivalentImpl.c", "link" : "tofu\/optics\/macros\/GenEquivalentImpl.html#c:scala.reflect.macros.blackbox.Context", "kind" : "val"}, {"label" : "genEquiv_unit_tree", "tail" : "(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[S]): scala.reflect.macros.blackbox.Context.Tree", "member" : "tofu.optics.macros.GenEquivalentImplBase.genEquiv_unit_tree", "link" : "tofu\/optics\/macros\/GenEquivalentImpl.html#genEquiv_unit_tree[S](implicitevidence$2:GenEquivalentImplBase.this.c.WeakTypeTag[S]):GenEquivalentImplBase.this.c.Tree", "kind" : "final def"}, {"label" : "caseAccessorsOf", "tail" : "(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[S]): List[scala.reflect.macros.Universe.MethodSymbol]", "member" : "tofu.optics.macros.GenEquivalentImplBase.caseAccessorsOf", "link" : "tofu\/optics\/macros\/GenEquivalentImpl.html#caseAccessorsOf[S](implicitevidence$1:GenEquivalentImplBase.this.c.WeakTypeTag[S]):List[GenEquivalentImplBase.this.c.universe.MethodSymbol]", "kind" : "final def"}, {"label" : "fail", "tail" : "(msg: String): Nothing", "member" : "tofu.optics.macros.GenEquivalentImplBase.fail", "link" : "tofu\/optics\/macros\/GenEquivalentImpl.html#fail(msg:String):Nothing", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/macros\/GenEquivalentImpl.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/macros\/GenEquivalentImpl.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/macros\/GenEquivalentImpl.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/macros\/GenEquivalentImpl.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/macros\/GenEquivalentImpl.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/macros\/GenEquivalentImpl.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/macros\/GenEquivalentImpl.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/macros\/GenEquivalentImpl.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/macros\/GenEquivalentImpl.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/macros\/GenEquivalentImpl.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/macros\/GenEquivalentImpl.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/macros\/GenEquivalentImpl.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/macros\/GenEquivalentImpl.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/macros\/GenEquivalentImpl.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/macros\/GenEquivalentImpl.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/macros\/GenEquivalentImpl.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/macros\/GenEquivalentImpl.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/macros\/GenEquivalentImpl.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/macros\/GenEquivalentImpl.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "tofu\/optics\/macros\/GenEquivalentImpl.html", "kind" : "class"}, {"name" : "tofu.optics.macros.GenEquivalentImplBase", "shortDescription" : "", "members_class" : [{"label" : "genEquiv_unit_tree", "tail" : "(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[S]): scala.reflect.macros.blackbox.Context.Tree", "member" : "tofu.optics.macros.GenEquivalentImplBase.genEquiv_unit_tree", "link" : "tofu\/optics\/macros\/GenEquivalentImplBase.html#genEquiv_unit_tree[S](implicitevidence$2:GenEquivalentImplBase.this.c.WeakTypeTag[S]):GenEquivalentImplBase.this.c.Tree", "kind" : "final def"}, {"label" : "caseAccessorsOf", "tail" : "(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[S]): List[scala.reflect.macros.Universe.MethodSymbol]", "member" : "tofu.optics.macros.GenEquivalentImplBase.caseAccessorsOf", "link" : "tofu\/optics\/macros\/GenEquivalentImplBase.html#caseAccessorsOf[S](implicitevidence$1:GenEquivalentImplBase.this.c.WeakTypeTag[S]):List[GenEquivalentImplBase.this.c.universe.MethodSymbol]", "kind" : "final def"}, {"label" : "fail", "tail" : "(msg: String): Nothing", "member" : "tofu.optics.macros.GenEquivalentImplBase.fail", "link" : "tofu\/optics\/macros\/GenEquivalentImplBase.html#fail(msg:String):Nothing", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/macros\/GenEquivalentImplBase.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/macros\/GenEquivalentImplBase.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/macros\/GenEquivalentImplBase.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/macros\/GenEquivalentImplBase.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/macros\/GenEquivalentImplBase.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/macros\/GenEquivalentImplBase.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/macros\/GenEquivalentImplBase.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/macros\/GenEquivalentImplBase.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/macros\/GenEquivalentImplBase.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/macros\/GenEquivalentImplBase.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/macros\/GenEquivalentImplBase.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/macros\/GenEquivalentImplBase.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/macros\/GenEquivalentImplBase.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/macros\/GenEquivalentImplBase.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/macros\/GenEquivalentImplBase.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/macros\/GenEquivalentImplBase.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/macros\/GenEquivalentImplBase.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/macros\/GenEquivalentImplBase.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/macros\/GenEquivalentImplBase.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "c", "tail" : ": scala.reflect.macros.blackbox.Context", "member" : "tofu.optics.macros.GenEquivalentImplBase.c", "link" : "tofu\/optics\/macros\/GenEquivalentImplBase.html#c:scala.reflect.macros.blackbox.Context", "kind" : "abstract val"}], "class" : "tofu\/optics\/macros\/GenEquivalentImplBase.html", "kind" : "class"}, {"name" : "tofu.optics.macros.GenEquivalentImplW", "shortDescription" : "", "members_class" : [{"label" : "genEquiv_fields_impl", "tail" : "(arg0: scala.reflect.macros.whitebox.Context.WeakTypeTag[S]): scala.reflect.macros.Universe.Tree", "member" : "tofu.optics.macros.GenEquivalentImplW.genEquiv_fields_impl", "link" : "tofu\/optics\/macros\/GenEquivalentImplW.html#genEquiv_fields_impl[S](implicitevidence$6:GenEquivalentImplW.this.c.WeakTypeTag[S]):GenEquivalentImplW.this.c.universe.Tree", "kind" : "def"}, {"label" : "nameAndType", "tail" : "(T: scala.reflect.macros.Universe.Type, s: scala.reflect.macros.Universe.Symbol): (scala.reflect.macros.Universe.TermName, scala.reflect.macros.Universe.Type)", "member" : "tofu.optics.macros.GenEquivalentImplW.nameAndType", "link" : "tofu\/optics\/macros\/GenEquivalentImplW.html#nameAndType(T:GenEquivalentImplW.this.c.universe.Type,s:GenEquivalentImplW.this.c.universe.Symbol):(GenEquivalentImplW.this.c.universe.TermName,GenEquivalentImplW.this.c.universe.Type)", "kind" : "final def"}, {"member" : "tofu.optics.macros.GenEquivalentImplW#<init>", "error" : "unsupported entity"}, {"label" : "c", "tail" : ": scala.reflect.macros.whitebox.Context", "member" : "tofu.optics.macros.GenEquivalentImplW.c", "link" : "tofu\/optics\/macros\/GenEquivalentImplW.html#c:scala.reflect.macros.whitebox.Context", "kind" : "val"}, {"label" : "genEquiv_unit_tree", "tail" : "(arg0: scala.reflect.macros.whitebox.Context.WeakTypeTag[S]): scala.reflect.macros.whitebox.Context.Tree", "member" : "tofu.optics.macros.GenEquivalentImplBase.genEquiv_unit_tree", "link" : "tofu\/optics\/macros\/GenEquivalentImplW.html#genEquiv_unit_tree[S](implicitevidence$2:GenEquivalentImplBase.this.c.WeakTypeTag[S]):GenEquivalentImplBase.this.c.Tree", "kind" : "final def"}, {"label" : "caseAccessorsOf", "tail" : "(arg0: scala.reflect.macros.whitebox.Context.WeakTypeTag[S]): List[scala.reflect.macros.Universe.MethodSymbol]", "member" : "tofu.optics.macros.GenEquivalentImplBase.caseAccessorsOf", "link" : "tofu\/optics\/macros\/GenEquivalentImplW.html#caseAccessorsOf[S](implicitevidence$1:GenEquivalentImplBase.this.c.WeakTypeTag[S]):List[GenEquivalentImplBase.this.c.universe.MethodSymbol]", "kind" : "final def"}, {"label" : "fail", "tail" : "(msg: String): Nothing", "member" : "tofu.optics.macros.GenEquivalentImplBase.fail", "link" : "tofu\/optics\/macros\/GenEquivalentImplW.html#fail(msg:String):Nothing", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/macros\/GenEquivalentImplW.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/macros\/GenEquivalentImplW.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/macros\/GenEquivalentImplW.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/macros\/GenEquivalentImplW.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/macros\/GenEquivalentImplW.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/macros\/GenEquivalentImplW.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/macros\/GenEquivalentImplW.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/macros\/GenEquivalentImplW.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/macros\/GenEquivalentImplW.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/macros\/GenEquivalentImplW.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/macros\/GenEquivalentImplW.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/macros\/GenEquivalentImplW.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/macros\/GenEquivalentImplW.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/macros\/GenEquivalentImplW.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/macros\/GenEquivalentImplW.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/macros\/GenEquivalentImplW.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/macros\/GenEquivalentImplW.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/macros\/GenEquivalentImplW.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/macros\/GenEquivalentImplW.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "tofu\/optics\/macros\/GenEquivalentImplW.html", "kind" : "class"}, {"name" : "tofu.optics.macros.GenSubset", "shortDescription" : "", "object" : "tofu\/optics\/macros\/GenSubset$.html", "members_object" : [{"label" : "apply", "tail" : "(): Subset[S, A]", "member" : "tofu.optics.macros.GenSubset.apply", "link" : "tofu\/optics\/macros\/GenSubset$.html#apply[S,A<:S]:tofu.optics.Subset[S,A]", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/macros\/GenSubset$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/macros\/GenSubset$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/macros\/GenSubset$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/macros\/GenSubset$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/macros\/GenSubset$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/macros\/GenSubset$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/macros\/GenSubset$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/macros\/GenSubset$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/macros\/GenSubset$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/macros\/GenSubset$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/macros\/GenSubset$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/macros\/GenSubset$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/macros\/GenSubset$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/macros\/GenSubset$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/macros\/GenSubset$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/macros\/GenSubset$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/macros\/GenSubset$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/macros\/GenSubset$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/macros\/GenSubset$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.optics.macros.Optics", "shortDescription" : "", "members_class" : [{"label" : "macroTransform", "tail" : "(annottees: Any*): Any", "member" : "tofu.optics.macros.Optics.macroTransform", "link" : "tofu\/optics\/macros\/Optics.html#macroTransform(annottees:Any*):Any", "kind" : "macro def"}, {"member" : "tofu.optics.macros.Optics#<init>", "error" : "unsupported entity"}, {"label" : "prefix", "tail" : ": String", "member" : "tofu.optics.macros.Optics.prefix", "link" : "tofu\/optics\/macros\/Optics.html#prefix:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/macros\/Optics.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/macros\/Optics.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/macros\/Optics.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/macros\/Optics.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/macros\/Optics.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/macros\/Optics.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/macros\/Optics.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/macros\/Optics.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/macros\/Optics.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/macros\/Optics.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/macros\/Optics.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/macros\/Optics.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/macros\/Optics.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/macros\/Optics.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/macros\/Optics.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/macros\/Optics.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/macros\/Optics.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/macros\/Optics.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/macros\/Optics.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "tofu\/optics\/macros\/Optics.html", "kind" : "class"}, {"name" : "tofu.optics.macros.POptics", "shortDescription" : "", "members_class" : [{"label" : "macroTransform", "tail" : "(annottees: Any*): Any", "member" : "tofu.optics.macros.POptics.macroTransform", "link" : "tofu\/optics\/macros\/POptics.html#macroTransform(annottees:Any*):Any", "kind" : "macro def"}, {"member" : "tofu.optics.macros.POptics#<init>", "error" : "unsupported entity"}, {"label" : "prefix", "tail" : ": String", "member" : "tofu.optics.macros.POptics.prefix", "link" : "tofu\/optics\/macros\/POptics.html#prefix:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/macros\/POptics.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/macros\/POptics.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/macros\/POptics.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/macros\/POptics.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/macros\/POptics.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/macros\/POptics.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/macros\/POptics.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/macros\/POptics.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/macros\/POptics.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/macros\/POptics.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/macros\/POptics.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/macros\/POptics.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/macros\/POptics.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/macros\/POptics.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/macros\/POptics.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/macros\/POptics.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/macros\/POptics.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/macros\/POptics.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/macros\/POptics.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "tofu\/optics\/macros\/POptics.html", "kind" : "class"}], "tofu.optics.classes" : [{"name" : "tofu.optics.classes.Category2", "object" : "tofu\/optics\/classes\/Category2$.html", "members_object" : [{"label" : "compose", "tail" : "(f: O[A, B, U, V], g: O[S, T, A, B])(cat: Category2[O]): O[S, T, U, V]", "member" : "tofu.optics.classes.Category2.compose", "link" : "tofu\/optics\/classes\/Category2$.html#compose[O[_,_,_,_],S,T,A,B,U,V](f:O[A,B,U,V],g:O[S,T,A,B])(implicitcat:tofu.optics.classes.Category2[O]):O[S,T,U,V]", "kind" : "def"}, {"label" : "id", "tail" : "(cat: Category2[O]): O[A, B, A, B]", "member" : "tofu.optics.classes.Category2.id", "link" : "tofu\/optics\/classes\/Category2$.html#id[O[_,_,_,_],A,B](implicitcat:tofu.optics.classes.Category2[O]):O[A,B,A,B]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/classes\/Category2$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/classes\/Category2$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/classes\/Category2$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/classes\/Category2$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/classes\/Category2$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/classes\/Category2$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/classes\/Category2$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/classes\/Category2$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/classes\/Category2$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/classes\/Category2$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/classes\/Category2$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/classes\/Category2$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/classes\/Category2$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/classes\/Category2$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/classes\/Category2$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/classes\/Category2$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/classes\/Category2$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/classes\/Category2$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/classes\/Category2$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/optics\/classes\/Category2.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/classes\/Category2.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/classes\/Category2.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/classes\/Category2.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/classes\/Category2.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/classes\/Category2.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/classes\/Category2.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/classes\/Category2.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/classes\/Category2.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/classes\/Category2.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/classes\/Category2.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/classes\/Category2.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/classes\/Category2.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/classes\/Category2.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/classes\/Category2.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/classes\/Category2.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/classes\/Category2.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/classes\/Category2.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/classes\/Category2.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/classes\/Category2.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "compose", "tail" : "(f: O[A, B, U, V], g: O[S, T, A, B]): O[S, T, U, V]", "member" : "tofu.optics.classes.Category2.compose", "link" : "tofu\/optics\/classes\/Category2.html#compose[S,T,A,B,U,V](f:O[A,B,U,V],g:O[S,T,A,B]):O[S,T,U,V]", "kind" : "abstract def"}, {"label" : "id", "tail" : "(): O[A, B, A, B]", "member" : "tofu.optics.classes.Category2.id", "link" : "tofu\/optics\/classes\/Category2.html#id[A,B]:O[A,B,A,B]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.optics.classes.PChoice", "object" : "tofu\/optics\/classes\/PChoice$.html", "members_object" : [{"label" : "functionInstance", "tail" : ": PChoice[[-α$0$, +β$1$](α$0$) => β$1$]", "member" : "tofu.optics.classes.PChoice.functionInstance", "link" : "tofu\/optics\/classes\/PChoice$.html#functionInstance:tofu.optics.classes.PChoice[[-α$0$,+β$1$]α$0$=>β$1$]", "kind" : "implicit val"}, {"label" : "apply", "tail" : "(P: PChoice[P]): PChoice[P]", "member" : "tofu.optics.classes.PChoice.apply", "link" : "tofu\/optics\/classes\/PChoice$.html#apply[P[-_,+_]](implicitP:tofu.optics.classes.PChoice[P]):tofu.optics.classes.PChoice[P]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/classes\/PChoice$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/classes\/PChoice$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/classes\/PChoice$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/classes\/PChoice$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/classes\/PChoice$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/classes\/PChoice$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/classes\/PChoice$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/classes\/PChoice$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/classes\/PChoice$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/classes\/PChoice$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/classes\/PChoice$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/classes\/PChoice$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/classes\/PChoice$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/classes\/PChoice$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/classes\/PChoice$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/classes\/PChoice$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/classes\/PChoice$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/classes\/PChoice$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/classes\/PChoice$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/optics\/classes\/PChoice.html", "kind" : "trait", "members_trait" : [{"label" : "optional", "tail" : "(pab: P[A, B]): P[Option[A], Option[B]]", "member" : "tofu.optics.classes.PChoice.optional", "link" : "tofu\/optics\/classes\/PChoice.html#optional[A,B,C](pab:P[A,B]):P[Option[A],Option[B]]", "kind" : "def"}, {"label" : "rmap", "tail" : "(fab: P[A, B])(f: (B) => C): P[A, C]", "member" : "cats.arrow.Profunctor.rmap", "link" : "tofu\/optics\/classes\/PChoice.html#rmap[A,B,C](fab:F[A,B])(f:B=>C):F[A,C]", "kind" : "def"}, {"label" : "lmap", "tail" : "(fab: P[A, B])(f: (C) => A): P[C, B]", "member" : "cats.arrow.Profunctor.lmap", "link" : "tofu\/optics\/classes\/PChoice.html#lmap[A,B,C](fab:F[A,B])(f:C=>A):F[C,B]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/classes\/PChoice.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/classes\/PChoice.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/classes\/PChoice.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/classes\/PChoice.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/classes\/PChoice.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/classes\/PChoice.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/classes\/PChoice.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/classes\/PChoice.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/classes\/PChoice.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/classes\/PChoice.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/classes\/PChoice.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/classes\/PChoice.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/classes\/PChoice.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/classes\/PChoice.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/classes\/PChoice.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/classes\/PChoice.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/classes\/PChoice.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/classes\/PChoice.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/classes\/PChoice.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "right", "tail" : "(pab: P[A, B]): P[Either[C, A], Either[C, B]]", "member" : "tofu.optics.classes.PChoice.right", "link" : "tofu\/optics\/classes\/PChoice.html#right[A,B,C](pab:P[A,B]):P[Either[C,A],Either[C,B]]", "kind" : "abstract def"}, {"label" : "left", "tail" : "(pab: P[A, B]): P[Either[A, C], Either[B, C]]", "member" : "tofu.optics.classes.PChoice.left", "link" : "tofu\/optics\/classes\/PChoice.html#left[A,B,C](pab:P[A,B]):P[Either[A,C],Either[B,C]]", "kind" : "abstract def"}, {"label" : "dimap", "tail" : "(fab: P[A, B])(f: (C) => A)(g: (B) => D): P[C, D]", "member" : "cats.arrow.Profunctor.dimap", "link" : "tofu\/optics\/classes\/PChoice.html#dimap[A,B,C,D](fab:F[A,B])(f:C=>A)(g:B=>D):F[C,D]", "kind" : "abstract def"}], "shortDescription" : "non-category version of cats.arrow.choice"}, {"name" : "tofu.optics.classes.Transform", "object" : "tofu\/optics\/classes\/Transform$.html", "members_object" : [{"label" : "fromExtract", "tail" : "(extract: Extract[A, B]): Transform[A, B]", "member" : "tofu.optics.classes.Transform.fromExtract", "link" : "tofu\/optics\/classes\/Transform$.html#fromExtract[A,B](implicitextract:tofu.optics.Extract[A,B]):tofu.optics.classes.Transform[A,B]", "kind" : "implicit final def"}, {"label" : "fromUpcast", "tail" : "(upcast: Upcast[A, B]): Transform[B, A]", "member" : "tofu.optics.classes.TransformInstances.fromUpcast", "link" : "tofu\/optics\/classes\/Transform$.html#fromUpcast[A,B](implicitupcast:tofu.optics.Upcast[A,B]):tofu.optics.classes.Transform[B,A]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/classes\/Transform$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/classes\/Transform$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/classes\/Transform$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/classes\/Transform$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/classes\/Transform$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/classes\/Transform$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/classes\/Transform$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/classes\/Transform$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/classes\/Transform$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/classes\/Transform$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/classes\/Transform$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/classes\/Transform$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/classes\/Transform$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/classes\/Transform$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/classes\/Transform$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/classes\/Transform$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/classes\/Transform$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/classes\/Transform$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/classes\/Transform$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/optics\/classes\/Transform.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/classes\/Transform.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/classes\/Transform.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/classes\/Transform.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/classes\/Transform.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/classes\/Transform.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/classes\/Transform.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/classes\/Transform.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/classes\/Transform.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/classes\/Transform.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/classes\/Transform.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/classes\/Transform.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/classes\/Transform.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/classes\/Transform.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/classes\/Transform.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/classes\/Transform.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/classes\/Transform.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/classes\/Transform.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/classes\/Transform.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/classes\/Transform.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(a: A): B", "member" : "tofu.optics.classes.Transform.apply", "link" : "tofu\/optics\/classes\/Transform.html#apply(a:A):B", "kind" : "abstract def"}], "shortDescription" : "precisely implicit A => B deriveable from both Extract and Downcast"}, {"name" : "tofu.optics.classes.TransformInstances", "trait" : "tofu\/optics\/classes\/TransformInstances.html", "kind" : "trait", "members_trait" : [{"label" : "fromUpcast", "tail" : "(upcast: Upcast[A, B]): Transform[B, A]", "member" : "tofu.optics.classes.TransformInstances.fromUpcast", "link" : "tofu\/optics\/classes\/TransformInstances.html#fromUpcast[A,B](implicitupcast:tofu.optics.Upcast[A,B]):tofu.optics.classes.Transform[B,A]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/classes\/TransformInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/classes\/TransformInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/classes\/TransformInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/classes\/TransformInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/classes\/TransformInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/classes\/TransformInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/classes\/TransformInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/classes\/TransformInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/classes\/TransformInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/classes\/TransformInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/classes\/TransformInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/classes\/TransformInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/classes\/TransformInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/classes\/TransformInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/classes\/TransformInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/classes\/TransformInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/classes\/TransformInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/classes\/TransformInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/classes\/TransformInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}], "tofu.config" : [{"name" : "tofu.config.BaseGetters", "trait" : "tofu\/config\/BaseGetters.html", "kind" : "trait", "members_trait" : [{"label" : "option", "tail" : "(arg0: Configurable[A]): Configurable[Option[A]]", "member" : "tofu.config.BaseGetters.option", "link" : "tofu\/config\/BaseGetters.html#option[A](implicitevidence$15:tofu.config.Configurable[A]):tofu.config.Configurable[Option[A]]", "kind" : "implicit def"}, {"label" : "mapConfigurable", "tail" : "(arg0: Configurable[A]): Configurable[Map[String, A]]", "member" : "tofu.config.BaseGetters.mapConfigurable", "link" : "tofu\/config\/BaseGetters.html#mapConfigurable[A](implicitevidence$14:tofu.config.Configurable[A]):tofu.config.Configurable[Map[String,A]]", "kind" : "implicit def"}, {"label" : "chainConfigurable", "tail" : "(arg0: Configurable[A]): Configurable[Chain[A]]", "member" : "tofu.config.BaseGetters.chainConfigurable", "link" : "tofu\/config\/BaseGetters.html#chainConfigurable[A](implicitevidence$13:tofu.config.Configurable[A]):tofu.config.Configurable[cats.data.Chain[A]]", "kind" : "implicit def"}, {"label" : "listConfigurable", "tail" : "(arg0: Configurable[A]): Configurable[List[A]]", "member" : "tofu.config.BaseGetters.listConfigurable", "link" : "tofu\/config\/BaseGetters.html#listConfigurable[A](implicitevidence$12:tofu.config.Configurable[A]):tofu.config.Configurable[List[A]]", "kind" : "implicit def"}, {"label" : "vectorConfigurable", "tail" : "(arg0: Configurable[A]): Configurable[Vector[A]]", "member" : "tofu.config.BaseGetters.vectorConfigurable", "link" : "tofu\/config\/BaseGetters.html#vectorConfigurable[A](implicitevidence$11:tofu.config.Configurable[A]):tofu.config.Configurable[Vector[A]]", "kind" : "implicit def"}, {"label" : "seqConfigurable", "tail" : "(arg0: Configurable[A]): Configurable[Seq[A]]", "member" : "tofu.config.BaseGetters.seqConfigurable", "link" : "tofu\/config\/BaseGetters.html#seqConfigurable[A](implicitevidence$10:tofu.config.Configurable[A]):tofu.config.Configurable[Seq[A]]", "kind" : "implicit def"}, {"label" : "indexedSeqConfigurable", "tail" : "(arg0: Configurable[A]): Configurable[IndexedSeq[A]]", "member" : "tofu.config.BaseGetters.indexedSeqConfigurable", "link" : "tofu\/config\/BaseGetters.html#indexedSeqConfigurable[A](implicitevidence$9:tofu.config.Configurable[A]):tofu.config.Configurable[IndexedSeq[A]]", "kind" : "implicit def"}, {"label" : "uriConfigurable", "tail" : ": Configurable[URI]", "member" : "tofu.config.BaseGetters.uriConfigurable", "link" : "tofu\/config\/BaseGetters.html#uriConfigurable:tofu.config.Configurable[java.net.URI]", "kind" : "implicit val"}, {"label" : "urlConfigurable", "tail" : ": Configurable[URL]", "member" : "tofu.config.BaseGetters.urlConfigurable", "link" : "tofu\/config\/BaseGetters.html#urlConfigurable:tofu.config.Configurable[java.net.URL]", "kind" : "implicit val"}, {"label" : "finiteDirationConfigurable", "tail" : ": Configurable[FiniteDuration]", "member" : "tofu.config.BaseGetters.finiteDirationConfigurable", "link" : "tofu\/config\/BaseGetters.html#finiteDirationConfigurable:tofu.config.Configurable[scala.concurrent.duration.FiniteDuration]", "kind" : "implicit val"}, {"label" : "durationConfigurable", "tail" : ": Configurable[Duration]", "member" : "tofu.config.BaseGetters.durationConfigurable", "link" : "tofu\/config\/BaseGetters.html#durationConfigurable:tofu.config.Configurable[scala.concurrent.duration.Duration]", "kind" : "implicit val"}, {"label" : "stringConfigurable", "tail" : ": Configurable[String]", "member" : "tofu.config.BaseGetters.stringConfigurable", "link" : "tofu\/config\/BaseGetters.html#stringConfigurable:tofu.config.Configurable[String]", "kind" : "implicit val"}, {"label" : "booleanConfigurable", "tail" : ": Configurable[Boolean]", "member" : "tofu.config.BaseGetters.booleanConfigurable", "link" : "tofu\/config\/BaseGetters.html#booleanConfigurable:tofu.config.Configurable[Boolean]", "kind" : "implicit val"}, {"label" : "doubleConfigurable", "tail" : ": Configurable[Double]", "member" : "tofu.config.BaseGetters.doubleConfigurable", "link" : "tofu\/config\/BaseGetters.html#doubleConfigurable:tofu.config.Configurable[Double]", "kind" : "implicit val"}, {"label" : "floatConfigurable", "tail" : ": Configurable[Float]", "member" : "tofu.config.BaseGetters.floatConfigurable", "link" : "tofu\/config\/BaseGetters.html#floatConfigurable:tofu.config.Configurable[Float]", "kind" : "implicit val"}, {"label" : "longConfigurable", "tail" : ": Configurable[Long]", "member" : "tofu.config.BaseGetters.longConfigurable", "link" : "tofu\/config\/BaseGetters.html#longConfigurable:tofu.config.Configurable[Long]", "kind" : "implicit val"}, {"label" : "intConfigurable", "tail" : ": Configurable[Int]", "member" : "tofu.config.BaseGetters.intConfigurable", "link" : "tofu\/config\/BaseGetters.html#intConfigurable:tofu.config.Configurable[Int]", "kind" : "implicit val"}, {"label" : "shortConfigurable", "tail" : ": Configurable[Short]", "member" : "tofu.config.BaseGetters.shortConfigurable", "link" : "tofu\/config\/BaseGetters.html#shortConfigurable:tofu.config.Configurable[Short]", "kind" : "implicit val"}, {"label" : "byteConfigurable", "tail" : ": Configurable[Byte]", "member" : "tofu.config.BaseGetters.byteConfigurable", "link" : "tofu\/config\/BaseGetters.html#byteConfigurable:tofu.config.Configurable[Byte]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/config\/BaseGetters.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/config\/BaseGetters.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/config\/BaseGetters.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/config\/BaseGetters.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/config\/BaseGetters.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/config\/BaseGetters.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/config\/BaseGetters.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/BaseGetters.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/BaseGetters.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/BaseGetters.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/config\/BaseGetters.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/config\/BaseGetters.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/config\/BaseGetters.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/config\/BaseGetters.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/config\/BaseGetters.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/config\/BaseGetters.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/config\/BaseGetters.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/config\/BaseGetters.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/config\/BaseGetters.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "tofu.config.ConfigArr", "object" : "tofu\/config\/ConfigArr$.html", "members_object" : [{"label" : "Builder", "tail" : "", "member" : "tofu.config.ConfigArr.Builder", "link" : "tofu\/config\/ConfigArr$.html#Builder[U[_[_]],A,B]extendsAnyValwithProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/config\/ConfigArr$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/config\/ConfigArr$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/config\/ConfigArr$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/config\/ConfigArr$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/config\/ConfigArr$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/config\/ConfigArr$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/config\/ConfigArr$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigArr$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigArr$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigArr$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/config\/ConfigArr$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/config\/ConfigArr$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/config\/ConfigArr$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/config\/ConfigArr$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/config\/ConfigArr$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/config\/ConfigArr$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/config\/ConfigArr$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/config\/ConfigArr$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/config\/ConfigArr$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/config\/ConfigArr.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/config\/ConfigArr.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/config\/ConfigArr.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/config\/ConfigArr.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/config\/ConfigArr.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/config\/ConfigArr.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/config\/ConfigArr.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/config\/ConfigArr.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigArr.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigArr.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigArr.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/config\/ConfigArr.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/config\/ConfigArr.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/config\/ConfigArr.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/config\/ConfigArr.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/config\/ConfigArr.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/config\/ConfigArr.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/config\/ConfigArr.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/config\/ConfigArr.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/config\/ConfigArr.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(input: U[F])(arg0: ConfigMonad[F]): F[A]", "member" : "tofu.config.ConfigArr.apply", "link" : "tofu\/config\/ConfigArr.html#apply[F[_]](input:U[F])(implicitevidence$1:tofu.config.ConfigMonad[F]):F[A]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.config.ConfigError", "object" : "tofu\/config\/ConfigError$.html", "members_object" : [{"label" : "configErrorShow", "tail" : ": Show[ConfigError]", "member" : "tofu.config.ConfigError.configErrorShow", "link" : "tofu\/config\/ConfigError$.html#configErrorShow:cats.Show[tofu.config.ConfigError]", "kind" : "implicit val"}, {"label" : "MultipleVariants", "tail" : "", "member" : "tofu.config.ConfigError.MultipleVariants", "link" : "tofu\/config\/ConfigError$.html#MultipleVariantsextendsConfigErrorwithProductwithSerializable", "kind" : "final case class"}, {"label" : "Invalid", "tail" : "", "member" : "tofu.config.ConfigError.Invalid", "link" : "tofu\/config\/ConfigError$.html#InvalidextendsConfigErrorwithProductwithSerializable", "kind" : "final case class"}, {"label" : "BadString", "tail" : "", "member" : "tofu.config.ConfigError.BadString", "link" : "tofu\/config\/ConfigError$.html#BadStringextendsConfigErrorwithProductwithSerializable", "kind" : "final case class"}, {"label" : "BadNumber", "tail" : "", "member" : "tofu.config.ConfigError.BadNumber", "link" : "tofu\/config\/ConfigError$.html#BadNumberextendsConfigErrorwithProductwithSerializable", "kind" : "final case class"}, {"label" : "BadType", "tail" : "", "member" : "tofu.config.ConfigError.BadType", "link" : "tofu\/config\/ConfigError$.html#BadTypeextendsConfigErrorwithProductwithSerializable", "kind" : "final case class"}, {"label" : "NoVariantFound", "tail" : "", "member" : "tofu.config.ConfigError.NoVariantFound", "link" : "tofu\/config\/ConfigError$.html#NoVariantFound", "kind" : "object"}, {"label" : "NotFound", "tail" : "", "member" : "tofu.config.ConfigError.NotFound", "link" : "tofu\/config\/ConfigError$.html#NotFound", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/config\/ConfigError$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/config\/ConfigError$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/config\/ConfigError$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/config\/ConfigError$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/config\/ConfigError$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/config\/ConfigError$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/config\/ConfigError$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigError$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigError$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigError$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/config\/ConfigError$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/config\/ConfigError$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/config\/ConfigError$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/config\/ConfigError$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/config\/ConfigError$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/config\/ConfigError$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/config\/ConfigError$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/config\/ConfigError$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/config\/ConfigError$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/config\/ConfigError.html", "kind" : "trait", "members_trait" : [{"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "tofu\/config\/ConfigError.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "tofu\/config\/ConfigError.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "tofu\/config\/ConfigError.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "tofu\/config\/ConfigError.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/config\/ConfigError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/config\/ConfigError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/config\/ConfigError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/config\/ConfigError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/config\/ConfigError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/config\/ConfigError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/config\/ConfigError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/config\/ConfigError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/config\/ConfigError.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/config\/ConfigError.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/config\/ConfigError.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/config\/ConfigError.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/config\/ConfigError.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/config\/ConfigError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/config\/ConfigError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/config\/ConfigError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "tofu\/config\/ConfigError.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "tofu\/config\/ConfigError.html#productArity:Int", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "tofu\/config\/ConfigError.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.config.ConfigFunc", "object" : "tofu\/config\/ConfigFunc$.html", "members_object" : [{"label" : "apply", "tail" : "(): Builder[[f[_]]A, B, ConfigFunc[A, B]]", "member" : "tofu.config.ConfigFunc.apply", "link" : "tofu\/config\/ConfigFunc$.html#apply[A,B]:tofu.config.ConfigArr.Builder[[f[_]]A,B,tofu.config.ConfigFunc[A,B]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/config\/ConfigFunc$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/config\/ConfigFunc$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/config\/ConfigFunc$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/config\/ConfigFunc$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/config\/ConfigFunc$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/config\/ConfigFunc$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/config\/ConfigFunc$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigFunc$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigFunc$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigFunc$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/config\/ConfigFunc$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/config\/ConfigFunc$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/config\/ConfigFunc$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/config\/ConfigFunc$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/config\/ConfigFunc$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/config\/ConfigFunc$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/config\/ConfigFunc$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/config\/ConfigFunc$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/config\/ConfigFunc$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/config\/ConfigFunc.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/config\/ConfigFunc.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/config\/ConfigFunc.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/config\/ConfigFunc.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/config\/ConfigFunc.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/config\/ConfigFunc.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/config\/ConfigFunc.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/config\/ConfigFunc.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigFunc.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigFunc.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigFunc.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/config\/ConfigFunc.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/config\/ConfigFunc.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/config\/ConfigFunc.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/config\/ConfigFunc.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/config\/ConfigFunc.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/config\/ConfigFunc.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/config\/ConfigFunc.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/config\/ConfigFunc.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/config\/ConfigFunc.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(input: A)(arg0: ConfigMonad[F]): F[B]", "member" : "tofu.config.ConfigFunc.apply", "link" : "tofu\/config\/ConfigFunc.html#apply[F[_]](input:A)(implicitevidence$2:tofu.config.ConfigMonad[F]):F[B]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.config.ConfigItem", "object" : "tofu\/config\/ConfigItem$.html", "members_object" : [{"label" : "IdConfigItemOps", "tail" : "", "member" : "tofu.config.ConfigItem.IdConfigItemOps", "link" : "tofu\/config\/ConfigItem$.html#IdConfigItemOpsextendsAnyVal", "kind" : "implicit final class"}, {"label" : "SyncConfigItemOps", "tail" : "", "member" : "tofu.config.ConfigItem.SyncConfigItemOps", "link" : "tofu\/config\/ConfigItem$.html#SyncConfigItemOps[F[_]]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "dict", "tail" : "(dict: Map[String, ConfigItem[F]])(arg0: Applicative[F]): Dict[F]", "member" : "tofu.config.ConfigItem.dict", "link" : "tofu\/config\/ConfigItem$.html#dict[F[_]](dict:Map[String,tofu.config.ConfigItem[F]])(implicitevidence$7:cats.Applicative[F]):tofu.config.ConfigItem.Dict[F]", "kind" : "def"}, {"label" : "seq", "tail" : "(seq: IndexedSeq[ConfigItem[F]])(arg0: Applicative[F]): Array[F]", "member" : "tofu.config.ConfigItem.seq", "link" : "tofu\/config\/ConfigItem$.html#seq[F[_]](seq:IndexedSeq[tofu.config.ConfigItem[F]])(implicitevidence$6:cats.Applicative[F]):tofu.config.ConfigItem.Array[F]", "kind" : "def"}, {"label" : "Dict", "tail" : "", "member" : "tofu.config.ConfigItem.Dict", "link" : "tofu\/config\/ConfigItem$.html#Dict[F[_]]extendsConfigItem.IndexedValue[F,String]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Array", "tail" : "", "member" : "tofu.config.ConfigItem.Array", "link" : "tofu\/config\/ConfigItem$.html#Array[F[_]]extendsConfigItem.IndexedValue[F,Int]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Stream", "tail" : "", "member" : "tofu.config.ConfigItem.Stream", "link" : "tofu\/config\/ConfigItem$.html#Stream[F[_]]extendsConfigItem.Value[F,tofu.config.ConfigItem.StreamC]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Str", "tail" : "", "member" : "tofu.config.ConfigItem.Str", "link" : "tofu\/config\/ConfigItem$.html#StrextendsConfigItem.SimpleValue[String]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Num", "tail" : "", "member" : "tofu.config.ConfigItem.Num", "link" : "tofu\/config\/ConfigItem$.html#NumextendsConfigItem.SimpleValue[BigDecimal]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Bool", "tail" : "", "member" : "tofu.config.ConfigItem.Bool", "link" : "tofu\/config\/ConfigItem$.html#BoolextendsConfigItem.SimpleValue[Boolean]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Null", "tail" : "", "member" : "tofu.config.ConfigItem.Null", "link" : "tofu\/config\/ConfigItem$.html#Null", "kind" : "object"}, {"label" : "ValueType", "tail" : "", "member" : "tofu.config.ConfigItem.ValueType", "link" : "tofu\/config\/ConfigItem$.html#ValueType", "kind" : "object"}, {"label" : "ValueTypeStream", "tail" : "", "member" : "tofu.config.ConfigItem.ValueTypeStream", "link" : "tofu\/config\/ConfigItem$.html#ValueTypeStreamextendsConfigItem.ValueType[tofu.config.ConfigItem.StreamC]", "kind" : "sealed trait"}, {"label" : "ValueTypeIndexed", "tail" : "", "member" : "tofu.config.ConfigItem.ValueTypeIndexed", "link" : "tofu\/config\/ConfigItem$.html#ValueTypeIndexed[I]extendsConfigItem.ValueType[[α$3$[_$4]](I=>α$3$[tofu.config.ConfigItem[α$3$]],tofu.data.Flux.FluxRepr[α$3$,Option,I])]", "kind" : "sealed trait"}, {"label" : "ValueTypeSimple", "tail" : "", "member" : "tofu.config.ConfigItem.ValueTypeSimple", "link" : "tofu\/config\/ConfigItem$.html#ValueTypeSimple[A]extendsConfigItem.ValueType[[α$2$[_$3]]A]", "kind" : "sealed trait"}, {"label" : "SimpleC", "tail" : "", "member" : "tofu.config.ConfigItem.SimpleC", "link" : "tofu\/config\/ConfigItem$.html#SimpleC[f[_],A]=A", "kind" : "type"}, {"label" : "StreamC", "tail" : "", "member" : "tofu.config.ConfigItem.StreamC", "link" : "tofu\/config\/ConfigItem$.html#StreamC[f[_]]=tofu.data.Flux.Stream[f,tofu.config.ConfigItem[f]]", "kind" : "type"}, {"label" : "IndexedC", "tail" : "", "member" : "tofu.config.ConfigItem.IndexedC", "link" : "tofu\/config\/ConfigItem$.html#IndexedC[f[_],I]=(I=>f[tofu.config.ConfigItem[f]],tofu.data.Flux.Stream[f,I])", "kind" : "type"}, {"label" : "ValueType", "tail" : "", "member" : "tofu.config.ConfigItem.ValueType", "link" : "tofu\/config\/ConfigItem$.html#ValueType[T[_[_]]]extendsConfigItem.ValueTag", "kind" : "sealed trait"}, {"label" : "ValueTag", "tail" : "", "member" : "tofu.config.ConfigItem.ValueTag", "link" : "tofu\/config\/ConfigItem$.html#ValueTagextendsAnyRef", "kind" : "sealed trait"}, {"label" : "IndexedValue", "tail" : "", "member" : "tofu.config.ConfigItem.IndexedValue", "link" : "tofu\/config\/ConfigItem$.html#IndexedValue[F[_],I]extendsConfigItem.Value[F,[α$1$[_$2]](I=>α$1$[tofu.config.ConfigItem[α$1$]],tofu.data.Flux.FluxRepr[α$1$,Option,I])]", "kind" : "sealed trait"}, {"label" : "SimpleValue", "tail" : "", "member" : "tofu.config.ConfigItem.SimpleValue", "link" : "tofu\/config\/ConfigItem$.html#SimpleValue[A]extendsConfigItem.Value[Nothing,[α$0$[_$1]]A]", "kind" : "sealed trait"}, {"label" : "Value", "tail" : "", "member" : "tofu.config.ConfigItem.Value", "link" : "tofu\/config\/ConfigItem$.html#Value[+F[_],U[_[_]]]extendsConfigItem[F]", "kind" : "sealed trait"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/config\/ConfigItem$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/config\/ConfigItem$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/config\/ConfigItem$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/config\/ConfigItem$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/config\/ConfigItem$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/config\/ConfigItem$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/config\/ConfigItem$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigItem$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigItem$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigItem$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/config\/ConfigItem$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/config\/ConfigItem$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/config\/ConfigItem$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/config\/ConfigItem$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/config\/ConfigItem$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/config\/ConfigItem$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/config\/ConfigItem$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/config\/ConfigItem$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/config\/ConfigItem$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/config\/ConfigItem.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/config\/ConfigItem.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/config\/ConfigItem.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/config\/ConfigItem.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/config\/ConfigItem.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/config\/ConfigItem.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/config\/ConfigItem.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/config\/ConfigItem.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigItem.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigItem.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigItem.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/config\/ConfigItem.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/config\/ConfigItem.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/config\/ConfigItem.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/config\/ConfigItem.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/config\/ConfigItem.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/config\/ConfigItem.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/config\/ConfigItem.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/config\/ConfigItem.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/config\/ConfigItem.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "mapK", "tail" : "(fk: ~>[F, G])(arg0: Functor[G]): ConfigItem[G]", "member" : "tofu.config.ConfigItem.mapK", "link" : "tofu\/config\/ConfigItem.html#mapK[G[_]](fk:F@scala.annotation.unchecked.uncheckedVariance~>G)(implicitevidence$1:cats.Functor[G]):tofu.config.ConfigItem[G]", "kind" : "abstract def"}, {"label" : "value", "tail" : "(): T[F]", "member" : "tofu.config.ConfigItem.value", "link" : "tofu\/config\/ConfigItem.html#value:ConfigItem.this.T[F]", "kind" : "abstract def"}, {"label" : "valueType", "tail" : "(): ValueType[T]", "member" : "tofu.config.ConfigItem.valueType", "link" : "tofu\/config\/ConfigItem.html#valueType:tofu.config.ConfigItem.ValueType[ConfigItem.this.T]", "kind" : "abstract def"}, {"member" : "tofu.config.ConfigItem.T", "error" : "unsupported entity"}], "shortDescription" : ""}, {"name" : "tofu.config.ConfigMonad", "object" : "tofu\/config\/ConfigMonad$.html", "members_object" : [{"label" : "promote", "tail" : "", "member" : "tofu.config.ConfigMonad.promote", "link" : "tofu\/config\/ConfigMonad$.html#promote", "kind" : "object"}, {"label" : "fromParallelAndErrors", "tail" : "(FP: Parallel[F], FE: Errors[F, ConfigError], F: Monad[F], FL: HasLocal[F, Path]): ConfigMonad[F]", "member" : "tofu.config.ConfigMonad.fromParallelAndErrors", "link" : "tofu\/config\/ConfigMonad$.html#fromParallelAndErrors[F[_]](implicitFP:cats.Parallel[F],implicitFE:tofu.Errors[F,tofu.config.ConfigError],implicitF:cats.Monad[F],implicitFL:tofu.HasLocal[F,tofu.config.Path]):tofu.config.ConfigMonad[F]", "kind" : "def"}, {"label" : "fromMonadAndErrors", "tail" : "(F: Monad[F], FE: Raise[F, ConfigError], FR: Restore[F], FL: HasLocal[F, Path]): ConfigMonad[F]", "member" : "tofu.config.ConfigMonad.fromMonadAndErrors", "link" : "tofu\/config\/ConfigMonad$.html#fromMonadAndErrors[F[_]](implicitF:cats.Monad[F],implicitFE:tofu.Raise[F,tofu.config.ConfigError],implicitFR:tofu.Restore[F],implicitFL:tofu.HasLocal[F,tofu.config.Path]):tofu.config.ConfigMonad[F]", "kind" : "def"}, {"label" : "tryParse", "tail" : "(item: ConfigItem[F])(arg0: Monad[F], arg1: Refs[F], arg2: ParallelReader[F], arg3: Configurable[A], errors: Errors[F, Fail.type]): F[(Vector[ConfigParseMessage], Option[A])]", "member" : "tofu.config.ConfigMonad.tryParse", "link" : "tofu\/config\/ConfigMonad$.html#tryParse[F[_],A](item:tofu.config.ConfigItem[F])(implicitevidence$1:cats.Monad[F],implicitevidence$2:tofu.concurrent.Refs[F],implicitevidence$3:tofu.config.ParallelReader[F],implicitevidence$4:tofu.config.Configurable[A],impliciterrors:tofu.Errors[F,tofu.config.ConfigTContext.Fail.type]):F[(Vector[tofu.config.ConfigParseMessage],Option[A])]", "kind" : "def"}, {"label" : "apply", "tail" : "(F: ConfigMonad[F]): ConfigMonad[F]", "member" : "tofu.config.ConfigMonad.apply", "link" : "tofu\/config\/ConfigMonad$.html#apply[F[_]](implicitF:tofu.config.ConfigMonad[F]):tofu.config.ConfigMonad[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/config\/ConfigMonad$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/config\/ConfigMonad$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/config\/ConfigMonad$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/config\/ConfigMonad$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/config\/ConfigMonad$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/config\/ConfigMonad$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/config\/ConfigMonad$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigMonad$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigMonad$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigMonad$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/config\/ConfigMonad$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/config\/ConfigMonad$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/config\/ConfigMonad$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/config\/ConfigMonad$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/config\/ConfigMonad$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/config\/ConfigMonad$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/config\/ConfigMonad$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/config\/ConfigMonad$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/config\/ConfigMonad$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/config\/ConfigMonad.html", "kind" : "trait", "members_trait" : [{"label" : "pure", "tail" : "(a: A): F[A]", "member" : "tofu.config.ConfigMonad.pure", "link" : "tofu\/config\/ConfigMonad.html#pure[A](a:A):F[A]", "kind" : "def"}, {"label" : "error", "tail" : "(err: ConfigError): F[A]", "member" : "tofu.config.ConfigMonad.error", "link" : "tofu\/config\/ConfigMonad.html#error[A](err:tofu.config.ConfigError):F[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/config\/ConfigMonad.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/config\/ConfigMonad.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/config\/ConfigMonad.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/config\/ConfigMonad.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/config\/ConfigMonad.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/config\/ConfigMonad.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/config\/ConfigMonad.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigMonad.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigMonad.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigMonad.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/config\/ConfigMonad.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/config\/ConfigMonad.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/config\/ConfigMonad.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/config\/ConfigMonad.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/config\/ConfigMonad.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/config\/ConfigMonad.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/config\/ConfigMonad.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/config\/ConfigMonad.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/config\/ConfigMonad.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "restore", "tail" : "(): Restore[F]", "member" : "tofu.config.ConfigMonad.restore", "link" : "tofu\/config\/ConfigMonad.html#restore:tofu.Restore[F]", "kind" : "implicit abstract def"}, {"label" : "path", "tail" : "(): HasLocal[F, Path]", "member" : "tofu.config.ConfigMonad.path", "link" : "tofu\/config\/ConfigMonad.html#path:tofu.HasLocal[F,tofu.config.Path]", "kind" : "implicit abstract def"}, {"label" : "config", "tail" : "(): Raise[F, ConfigError]", "member" : "tofu.config.ConfigMonad.config", "link" : "tofu\/config\/ConfigMonad.html#config:tofu.Raise[F,tofu.config.ConfigError]", "kind" : "implicit abstract def"}, {"label" : "paralleled", "tail" : "(): Parallel[F]", "member" : "tofu.config.ConfigMonad.paralleled", "link" : "tofu\/config\/ConfigMonad.html#paralleled:cats.Parallel[F]", "kind" : "implicit abstract def"}, {"label" : "monad", "tail" : "(): Monad[F]", "member" : "tofu.config.ConfigMonad.monad", "link" : "tofu\/config\/ConfigMonad.html#monad:cats.Monad[F]", "kind" : "implicit abstract def"}], "shortDescription" : ""}, {"name" : "tofu.config.ConfigParseErrors", "shortDescription" : "", "members_case class" : [{"member" : "tofu.config.ConfigParseErrors#<init>", "error" : "unsupported entity"}, {"label" : "ms", "tail" : ": MessageList", "member" : "tofu.config.ConfigParseErrors.ms", "link" : "tofu\/config\/ConfigParseErrors.html#ms:tofu.config.MessageList", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "tofu\/config\/ConfigParseErrors.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "tofu\/config\/ConfigParseErrors.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "tofu\/config\/ConfigParseErrors.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "tofu\/config\/ConfigParseErrors.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "tofu\/config\/ConfigParseErrors.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "tofu\/config\/ConfigParseErrors.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "tofu\/config\/ConfigParseErrors.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "tofu\/config\/ConfigParseErrors.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "tofu\/config\/ConfigParseErrors.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "tofu\/config\/ConfigParseErrors.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "tofu\/config\/ConfigParseErrors.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "tofu\/config\/ConfigParseErrors.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "tofu\/config\/ConfigParseErrors.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "tofu\/config\/ConfigParseErrors.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/config\/ConfigParseErrors.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/config\/ConfigParseErrors.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/config\/ConfigParseErrors.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/config\/ConfigParseErrors.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/config\/ConfigParseErrors.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/config\/ConfigParseErrors.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/config\/ConfigParseErrors.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigParseErrors.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigParseErrors.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigParseErrors.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/config\/ConfigParseErrors.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/config\/ConfigParseErrors.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/config\/ConfigParseErrors.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/config\/ConfigParseErrors.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/config\/ConfigParseErrors.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/config\/ConfigParseErrors.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "tofu\/config\/ConfigParseErrors.html", "kind" : "case class"}, {"name" : "tofu.config.ConfigParseMessage", "shortDescription" : "", "object" : "tofu\/config\/ConfigParseMessage$.html", "members_object" : [{"label" : "messageShow", "tail" : ": Show[ConfigParseMessage]", "member" : "tofu.config.ConfigParseMessage.messageShow", "link" : "tofu\/config\/ConfigParseMessage$.html#messageShow:cats.Show[tofu.config.ConfigParseMessage]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/config\/ConfigParseMessage$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/config\/ConfigParseMessage$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/config\/ConfigParseMessage$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/config\/ConfigParseMessage$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/config\/ConfigParseMessage$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/config\/ConfigParseMessage$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/config\/ConfigParseMessage$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigParseMessage$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigParseMessage$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigParseMessage$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/config\/ConfigParseMessage$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/config\/ConfigParseMessage$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/config\/ConfigParseMessage$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/config\/ConfigParseMessage$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/config\/ConfigParseMessage$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/config\/ConfigParseMessage$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/config\/ConfigParseMessage$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/config\/ConfigParseMessage$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/config\/ConfigParseMessage$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "tofu.config.ConfigParseMessage#<init>", "error" : "unsupported entity"}, {"label" : "error", "tail" : ": ConfigError", "member" : "tofu.config.ConfigParseMessage.error", "link" : "tofu\/config\/ConfigParseMessage.html#error:tofu.config.ConfigError", "kind" : "val"}, {"label" : "path", "tail" : ": Path", "member" : "tofu.config.ConfigParseMessage.path", "link" : "tofu\/config\/ConfigParseMessage.html#path:tofu.config.Path", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "tofu\/config\/ConfigParseMessage.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/config\/ConfigParseMessage.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/config\/ConfigParseMessage.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/config\/ConfigParseMessage.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/config\/ConfigParseMessage.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/config\/ConfigParseMessage.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/config\/ConfigParseMessage.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/config\/ConfigParseMessage.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigParseMessage.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigParseMessage.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigParseMessage.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/config\/ConfigParseMessage.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/config\/ConfigParseMessage.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/config\/ConfigParseMessage.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/config\/ConfigParseMessage.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/config\/ConfigParseMessage.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/config\/ConfigParseMessage.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "tofu\/config\/ConfigParseMessage.html", "kind" : "case class"}, {"name" : "tofu.config.ConfigTContext", "shortDescription" : "", "object" : "tofu\/config\/ConfigTContext$.html", "members_object" : [{"label" : "Fail", "tail" : "", "member" : "tofu.config.ConfigTContext.Fail", "link" : "tofu\/config\/ConfigTContext$.html#Fail", "kind" : "object"}, {"label" : "ConfigTConfigMonad", "tail" : "", "member" : "tofu.config.ConfigTContext.ConfigTConfigMonad", "link" : "tofu\/config\/ConfigTContext$.html#ConfigTConfigMonad[F[_]]extendsConfigMonad[[β$3$]cats.data.Kleisli[F,tofu.config.ConfigTContext[F],β$3$]]", "kind" : "class"}, {"label" : "contextPath", "tail" : "(): Contains[ConfigTContext[F], Path]", "member" : "tofu.config.ConfigTContext.contextPath", "link" : "tofu\/config\/ConfigTContext$.html#contextPath[F[_]]:tofu.optics.Contains[tofu.config.ConfigTContext[F],tofu.config.Path]", "kind" : "def"}, {"label" : "configTParallelConfigMonad", "tail" : "(arg0: ParallelReader[F], F: Monad[F], FE: Errors[F, Fail.type]): ConfigMonad[[β$2$]Kleisli[F, ConfigTContext[F], β$2$]]", "member" : "tofu.config.ConfigTContext.configTParallelConfigMonad", "link" : "tofu\/config\/ConfigTContext$.html#configTParallelConfigMonad[F[_]](implicitevidence$5:tofu.config.ParallelReader[F],implicitF:cats.Monad[F],implicitFE:tofu.Errors[F,tofu.config.ConfigTContext.Fail.type]):tofu.config.ConfigMonad[[β$2$]cats.data.Kleisli[F,tofu.config.ConfigTContext[F],β$2$]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/config\/ConfigTContext$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/config\/ConfigTContext$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/config\/ConfigTContext$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/config\/ConfigTContext$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/config\/ConfigTContext$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/config\/ConfigTContext$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/config\/ConfigTContext$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigTContext$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigTContext$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigTContext$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/config\/ConfigTContext$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/config\/ConfigTContext$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/config\/ConfigTContext$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/config\/ConfigTContext$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/config\/ConfigTContext$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/config\/ConfigTContext$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/config\/ConfigTContext$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/config\/ConfigTContext$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/config\/ConfigTContext$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "tofu.config.ConfigTContext#<init>", "error" : "unsupported entity"}, {"label" : "ref", "tail" : ": Ref[F, MessageList]", "member" : "tofu.config.ConfigTContext.ref", "link" : "tofu\/config\/ConfigTContext.html#ref:cats.effect.concurrent.Ref[F,tofu.config.MessageList]", "kind" : "val"}, {"label" : "path", "tail" : ": Path", "member" : "tofu.config.ConfigTContext.path", "link" : "tofu\/config\/ConfigTContext.html#path:tofu.config.Path", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "tofu\/config\/ConfigTContext.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/config\/ConfigTContext.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/config\/ConfigTContext.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/config\/ConfigTContext.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/config\/ConfigTContext.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/config\/ConfigTContext.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/config\/ConfigTContext.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/config\/ConfigTContext.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigTContext.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigTContext.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ConfigTContext.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/config\/ConfigTContext.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/config\/ConfigTContext.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/config\/ConfigTContext.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/config\/ConfigTContext.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/config\/ConfigTContext.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/config\/ConfigTContext.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "tofu\/config\/ConfigTContext.html", "kind" : "case class"}, {"name" : "tofu.config.Configurable", "object" : "tofu\/config\/Configurable$.html", "members_object" : [{"label" : "requireOneOf", "tail" : "(vtypeA: ValueTypeSimple[A], vtypeB: ValueTypeSimple[B]): Configurable[Either[A, B]]", "member" : "tofu.config.Configurable.requireOneOf", "link" : "tofu\/config\/Configurable$.html#requireOneOf[A,B](vtypeA:tofu.config.ConfigItem.ValueTypeSimple[A],vtypeB:tofu.config.ConfigItem.ValueTypeSimple[B]):tofu.config.Configurable[Either[A,B]]", "kind" : "def"}, {"label" : "requireSimple", "tail" : "(vtype: ValueTypeSimple[A]): Configurable[A]", "member" : "tofu.config.Configurable.requireSimple", "link" : "tofu\/config\/Configurable$.html#requireSimple[A](vtype:tofu.config.ConfigItem.ValueTypeSimple[A]):tofu.config.Configurable[A]", "kind" : "def"}, {"label" : "make", "tail" : "(): Builder[ConfigItem, A, Configurable[A]]", "member" : "tofu.config.Configurable.make", "link" : "tofu\/config\/Configurable$.html#make[A]:tofu.config.ConfigArr.Builder[tofu.config.ConfigItem,A,tofu.config.Configurable[A]]", "kind" : "def"}, {"label" : "parse", "tail" : "(item: ConfigItem[F])(arg0: ConfigMonad[F], cfg: Configurable[A]): F[A]", "member" : "tofu.config.Configurable.parse", "link" : "tofu\/config\/Configurable$.html#parse[F[_],A](item:tofu.config.ConfigItem[F])(implicitevidence$5:tofu.config.ConfigMonad[F],implicitcfg:tofu.config.Configurable[A]):F[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(cfg: Configurable[A]): Configurable[A]", "member" : "tofu.config.Configurable.apply", "link" : "tofu\/config\/Configurable$.html#apply[A](implicitcfg:tofu.config.Configurable[A]):tofu.config.Configurable[A]", "kind" : "def"}, {"label" : "instance", "tail" : "(): Typeclass[T]", "member" : "tofu.config.MagnoliaDerivation.instance", "link" : "tofu\/config\/Configurable$.html#instance[T]:MagnoliaDerivation.this.Typeclass[T]", "kind" : "implicit final macro def"}, {"label" : "dispatch", "tail" : "(ctx: SealedTrait[Configurable, T]): Configurable[T]", "member" : "tofu.config.MagnoliaDerivation.dispatch", "link" : "tofu\/config\/Configurable$.html#dispatch[T](ctx:magnolia.SealedTrait[tofu.config.Configurable,T]):tofu.config.Configurable[T]", "kind" : "def"}, {"label" : "combine", "tail" : "(ctx: CaseClass[Configurable, T]): Configurable[T]", "member" : "tofu.config.MagnoliaDerivation.combine", "link" : "tofu\/config\/Configurable$.html#combine[T](ctx:magnolia.CaseClass[tofu.config.Configurable,T]):tofu.config.Configurable[T]", "kind" : "def"}, {"label" : "Typeclass", "tail" : "", "member" : "tofu.config.MagnoliaDerivation.Typeclass", "link" : "tofu\/config\/Configurable$.html#Typeclass[T]=tofu.config.Configurable[T]", "kind" : "type"}, {"label" : "option", "tail" : "(arg0: Configurable[A]): Configurable[Option[A]]", "member" : "tofu.config.BaseGetters.option", "link" : "tofu\/config\/Configurable$.html#option[A](implicitevidence$15:tofu.config.Configurable[A]):tofu.config.Configurable[Option[A]]", "kind" : "implicit def"}, {"label" : "mapConfigurable", "tail" : "(arg0: Configurable[A]): Configurable[Map[String, A]]", "member" : "tofu.config.BaseGetters.mapConfigurable", "link" : "tofu\/config\/Configurable$.html#mapConfigurable[A](implicitevidence$14:tofu.config.Configurable[A]):tofu.config.Configurable[Map[String,A]]", "kind" : "implicit def"}, {"label" : "chainConfigurable", "tail" : "(arg0: Configurable[A]): Configurable[Chain[A]]", "member" : "tofu.config.BaseGetters.chainConfigurable", "link" : "tofu\/config\/Configurable$.html#chainConfigurable[A](implicitevidence$13:tofu.config.Configurable[A]):tofu.config.Configurable[cats.data.Chain[A]]", "kind" : "implicit def"}, {"label" : "listConfigurable", "tail" : "(arg0: Configurable[A]): Configurable[List[A]]", "member" : "tofu.config.BaseGetters.listConfigurable", "link" : "tofu\/config\/Configurable$.html#listConfigurable[A](implicitevidence$12:tofu.config.Configurable[A]):tofu.config.Configurable[List[A]]", "kind" : "implicit def"}, {"label" : "vectorConfigurable", "tail" : "(arg0: Configurable[A]): Configurable[Vector[A]]", "member" : "tofu.config.BaseGetters.vectorConfigurable", "link" : "tofu\/config\/Configurable$.html#vectorConfigurable[A](implicitevidence$11:tofu.config.Configurable[A]):tofu.config.Configurable[Vector[A]]", "kind" : "implicit def"}, {"label" : "seqConfigurable", "tail" : "(arg0: Configurable[A]): Configurable[Seq[A]]", "member" : "tofu.config.BaseGetters.seqConfigurable", "link" : "tofu\/config\/Configurable$.html#seqConfigurable[A](implicitevidence$10:tofu.config.Configurable[A]):tofu.config.Configurable[Seq[A]]", "kind" : "implicit def"}, {"label" : "indexedSeqConfigurable", "tail" : "(arg0: Configurable[A]): Configurable[IndexedSeq[A]]", "member" : "tofu.config.BaseGetters.indexedSeqConfigurable", "link" : "tofu\/config\/Configurable$.html#indexedSeqConfigurable[A](implicitevidence$9:tofu.config.Configurable[A]):tofu.config.Configurable[IndexedSeq[A]]", "kind" : "implicit def"}, {"label" : "uriConfigurable", "tail" : ": Configurable[URI]", "member" : "tofu.config.BaseGetters.uriConfigurable", "link" : "tofu\/config\/Configurable$.html#uriConfigurable:tofu.config.Configurable[java.net.URI]", "kind" : "implicit val"}, {"label" : "urlConfigurable", "tail" : ": Configurable[URL]", "member" : "tofu.config.BaseGetters.urlConfigurable", "link" : "tofu\/config\/Configurable$.html#urlConfigurable:tofu.config.Configurable[java.net.URL]", "kind" : "implicit val"}, {"label" : "finiteDirationConfigurable", "tail" : ": Configurable[FiniteDuration]", "member" : "tofu.config.BaseGetters.finiteDirationConfigurable", "link" : "tofu\/config\/Configurable$.html#finiteDirationConfigurable:tofu.config.Configurable[scala.concurrent.duration.FiniteDuration]", "kind" : "implicit val"}, {"label" : "durationConfigurable", "tail" : ": Configurable[Duration]", "member" : "tofu.config.BaseGetters.durationConfigurable", "link" : "tofu\/config\/Configurable$.html#durationConfigurable:tofu.config.Configurable[scala.concurrent.duration.Duration]", "kind" : "implicit val"}, {"label" : "stringConfigurable", "tail" : ": Configurable[String]", "member" : "tofu.config.BaseGetters.stringConfigurable", "link" : "tofu\/config\/Configurable$.html#stringConfigurable:tofu.config.Configurable[String]", "kind" : "implicit val"}, {"label" : "booleanConfigurable", "tail" : ": Configurable[Boolean]", "member" : "tofu.config.BaseGetters.booleanConfigurable", "link" : "tofu\/config\/Configurable$.html#booleanConfigurable:tofu.config.Configurable[Boolean]", "kind" : "implicit val"}, {"label" : "doubleConfigurable", "tail" : ": Configurable[Double]", "member" : "tofu.config.BaseGetters.doubleConfigurable", "link" : "tofu\/config\/Configurable$.html#doubleConfigurable:tofu.config.Configurable[Double]", "kind" : "implicit val"}, {"label" : "floatConfigurable", "tail" : ": Configurable[Float]", "member" : "tofu.config.BaseGetters.floatConfigurable", "link" : "tofu\/config\/Configurable$.html#floatConfigurable:tofu.config.Configurable[Float]", "kind" : "implicit val"}, {"label" : "longConfigurable", "tail" : ": Configurable[Long]", "member" : "tofu.config.BaseGetters.longConfigurable", "link" : "tofu\/config\/Configurable$.html#longConfigurable:tofu.config.Configurable[Long]", "kind" : "implicit val"}, {"label" : "intConfigurable", "tail" : ": Configurable[Int]", "member" : "tofu.config.BaseGetters.intConfigurable", "link" : "tofu\/config\/Configurable$.html#intConfigurable:tofu.config.Configurable[Int]", "kind" : "implicit val"}, {"label" : "shortConfigurable", "tail" : ": Configurable[Short]", "member" : "tofu.config.BaseGetters.shortConfigurable", "link" : "tofu\/config\/Configurable$.html#shortConfigurable:tofu.config.Configurable[Short]", "kind" : "implicit val"}, {"label" : "byteConfigurable", "tail" : ": Configurable[Byte]", "member" : "tofu.config.BaseGetters.byteConfigurable", "link" : "tofu\/config\/Configurable$.html#byteConfigurable:tofu.config.Configurable[Byte]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/config\/Configurable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/config\/Configurable$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/config\/Configurable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/config\/Configurable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/config\/Configurable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/config\/Configurable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/config\/Configurable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/Configurable$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/Configurable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/Configurable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/config\/Configurable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/config\/Configurable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/config\/Configurable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/config\/Configurable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/config\/Configurable$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/config\/Configurable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/config\/Configurable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/config\/Configurable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/config\/Configurable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/config\/Configurable.html", "kind" : "trait", "members_trait" : [{"label" : "widen", "tail" : "(): Configurable[A1]", "member" : "tofu.config.Configurable.widen", "link" : "tofu\/config\/Configurable.html#widen[A1>:A]:tofu.config.Configurable[A1]", "kind" : "def"}, {"label" : "catchMake", "tail" : "(f: (A) => B): Builder[[f[_]](A, Throwable), B, Configurable[B]]", "member" : "tofu.config.Configurable.catchMake", "link" : "tofu\/config\/Configurable.html#catchMake[B](f:A=>B):tofu.config.ConfigArr.Builder[[f[_]](A,Throwable),B,tofu.config.Configurable[B]]", "kind" : "def"}, {"label" : "catching", "tail" : "(f: (A) => B)(message: ConfigFunc[(A, Throwable), B]): Configurable[B]", "member" : "tofu.config.Configurable.catching", "link" : "tofu\/config\/Configurable.html#catching[B](f:A=>B)(message:tofu.config.ConfigFunc[(A,Throwable),B]):tofu.config.Configurable[B]", "kind" : "def"}, {"label" : "flatMake", "tail" : "(): Builder[[f[_]]A, B, Configurable[B]]", "member" : "tofu.config.Configurable.flatMake", "link" : "tofu\/config\/Configurable.html#flatMake[B]:tofu.config.ConfigArr.Builder[[f[_]]A,B,tofu.config.Configurable[B]]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: ConfigFunc[A, B]): Configurable[B]", "member" : "tofu.config.Configurable.flatMap", "link" : "tofu\/config\/Configurable.html#flatMap[B](f:tofu.config.ConfigFunc[A,B]):tofu.config.Configurable[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) => B): Configurable[B]", "member" : "tofu.config.Configurable.map", "link" : "tofu\/config\/Configurable.html#map[B](f:A=>B):tofu.config.Configurable[B]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/config\/Configurable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/config\/Configurable.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/config\/Configurable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/config\/Configurable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/config\/Configurable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/config\/Configurable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/config\/Configurable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/Configurable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/Configurable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/Configurable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/config\/Configurable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/config\/Configurable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/config\/Configurable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/config\/Configurable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/config\/Configurable.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/config\/Configurable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/config\/Configurable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/config\/Configurable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/config\/Configurable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(cfg: ConfigItem[F])(arg0: ConfigMonad[F]): F[A]", "member" : "tofu.config.Configurable.apply", "link" : "tofu\/config\/Configurable.html#apply[F[_]](cfg:tofu.config.ConfigItem[F])(implicitevidence$1:tofu.config.ConfigMonad[F]):F[A]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.config.Key", "object" : "tofu\/config\/Key$.html", "members_object" : [{"label" : "order", "tail" : ": Order[Key]", "member" : "tofu.config.Key.order", "link" : "tofu\/config\/Key$.html#order:cats.Order[tofu.config.Key]", "kind" : "implicit val"}, {"label" : "show", "tail" : ": Show[Key]", "member" : "tofu.config.Key.show", "link" : "tofu\/config\/Key$.html#show:cats.Show[tofu.config.Key]", "kind" : "implicit val"}, {"label" : "Variant", "tail" : "", "member" : "tofu.config.Key.Variant", "link" : "tofu\/config\/Key$.html#VariantextendsKeywithProductwithSerializable", "kind" : "final case class"}, {"label" : "Prop", "tail" : "", "member" : "tofu.config.Key.Prop", "link" : "tofu\/config\/Key$.html#PropextendsKeywithProductwithSerializable", "kind" : "final case class"}, {"label" : "Index", "tail" : "", "member" : "tofu.config.Key.Index", "link" : "tofu\/config\/Key$.html#IndexextendsKeywithProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/config\/Key$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/config\/Key$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/config\/Key$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/config\/Key$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/config\/Key$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/config\/Key$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/config\/Key$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/Key$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/Key$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/Key$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/config\/Key$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/config\/Key$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/config\/Key$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/config\/Key$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/config\/Key$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/config\/Key$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/config\/Key$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/config\/Key$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/config\/Key$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/config\/Key.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/config\/Key.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/config\/Key.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/config\/Key.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/config\/Key.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/config\/Key.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/config\/Key.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/config\/Key.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/Key.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/Key.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/Key.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/config\/Key.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/config\/Key.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/config\/Key.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/config\/Key.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/config\/Key.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/config\/Key.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/config\/Key.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/config\/Key.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/config\/Key.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "tofu.config.LowPriorityParallelReader1", "trait" : "tofu\/config\/LowPriorityParallelReader1.html", "kind" : "trait", "members_trait" : [{"label" : "makeError", "tail" : "(F: MonadError[F, E]): ParallelReader[F]", "member" : "tofu.config.LowPriorityParallelReader1.makeError", "link" : "tofu\/config\/LowPriorityParallelReader1.html#makeError[F[_],E](implicitF:cats.MonadError[F,E]):tofu.config.ParallelReader[F]", "kind" : "implicit def"}, {"label" : "provideIdentity", "tail" : "(F: Monad[F]): ParallelReader[F]", "member" : "tofu.config.LowPriorityParallelReader2.provideIdentity", "link" : "tofu\/config\/LowPriorityParallelReader1.html#provideIdentity[F[_]](implicitF:cats.Monad[F]):tofu.config.ParallelReader[F]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/config\/LowPriorityParallelReader1.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/config\/LowPriorityParallelReader1.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/config\/LowPriorityParallelReader1.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/config\/LowPriorityParallelReader1.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/config\/LowPriorityParallelReader1.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/config\/LowPriorityParallelReader1.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/config\/LowPriorityParallelReader1.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/LowPriorityParallelReader1.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/LowPriorityParallelReader1.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/LowPriorityParallelReader1.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/config\/LowPriorityParallelReader1.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/config\/LowPriorityParallelReader1.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/config\/LowPriorityParallelReader1.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/config\/LowPriorityParallelReader1.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/config\/LowPriorityParallelReader1.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/config\/LowPriorityParallelReader1.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/config\/LowPriorityParallelReader1.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/config\/LowPriorityParallelReader1.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/config\/LowPriorityParallelReader1.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "tofu.config.LowPriorityParallelReader2", "trait" : "tofu\/config\/LowPriorityParallelReader2.html", "kind" : "trait", "members_trait" : [{"label" : "provideIdentity", "tail" : "(F: Monad[F]): ParallelReader[F]", "member" : "tofu.config.LowPriorityParallelReader2.provideIdentity", "link" : "tofu\/config\/LowPriorityParallelReader2.html#provideIdentity[F[_]](implicitF:cats.Monad[F]):tofu.config.ParallelReader[F]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/config\/LowPriorityParallelReader2.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/config\/LowPriorityParallelReader2.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/config\/LowPriorityParallelReader2.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/config\/LowPriorityParallelReader2.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/config\/LowPriorityParallelReader2.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/config\/LowPriorityParallelReader2.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/config\/LowPriorityParallelReader2.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/LowPriorityParallelReader2.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/LowPriorityParallelReader2.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/LowPriorityParallelReader2.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/config\/LowPriorityParallelReader2.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/config\/LowPriorityParallelReader2.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/config\/LowPriorityParallelReader2.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/config\/LowPriorityParallelReader2.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/config\/LowPriorityParallelReader2.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/config\/LowPriorityParallelReader2.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/config\/LowPriorityParallelReader2.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/config\/LowPriorityParallelReader2.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/config\/LowPriorityParallelReader2.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "tofu.config.MagnoliaDerivation", "object" : "tofu\/config\/MagnoliaDerivation$.html", "members_object" : [{"label" : "EnumConfigurable", "tail" : "", "member" : "tofu.config.MagnoliaDerivation.EnumConfigurable", "link" : "tofu\/config\/MagnoliaDerivation$.html#EnumConfigurable[A]extendsConfigurable[A]", "kind" : "class"}, {"label" : "SingletonConfigurable", "tail" : "", "member" : "tofu.config.MagnoliaDerivation.SingletonConfigurable", "link" : "tofu\/config\/MagnoliaDerivation$.html#SingletonConfigurable[A]extendsMagnoliaDerivation.EnumConfigurable[A]", "kind" : "class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/config\/MagnoliaDerivation$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/config\/MagnoliaDerivation$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/config\/MagnoliaDerivation$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/config\/MagnoliaDerivation$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/config\/MagnoliaDerivation$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/config\/MagnoliaDerivation$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/config\/MagnoliaDerivation$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/MagnoliaDerivation$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/MagnoliaDerivation$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/MagnoliaDerivation$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/config\/MagnoliaDerivation$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/config\/MagnoliaDerivation$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/config\/MagnoliaDerivation$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/config\/MagnoliaDerivation$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/config\/MagnoliaDerivation$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/config\/MagnoliaDerivation$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/config\/MagnoliaDerivation$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/config\/MagnoliaDerivation$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/config\/MagnoliaDerivation$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/config\/MagnoliaDerivation.html", "kind" : "trait", "members_trait" : [{"label" : "instance", "tail" : "(): Typeclass[T]", "member" : "tofu.config.MagnoliaDerivation.instance", "link" : "tofu\/config\/MagnoliaDerivation.html#instance[T]:MagnoliaDerivation.this.Typeclass[T]", "kind" : "implicit final macro def"}, {"label" : "dispatch", "tail" : "(ctx: SealedTrait[Configurable, T]): Configurable[T]", "member" : "tofu.config.MagnoliaDerivation.dispatch", "link" : "tofu\/config\/MagnoliaDerivation.html#dispatch[T](ctx:magnolia.SealedTrait[tofu.config.Configurable,T]):tofu.config.Configurable[T]", "kind" : "def"}, {"label" : "combine", "tail" : "(ctx: CaseClass[Configurable, T]): Configurable[T]", "member" : "tofu.config.MagnoliaDerivation.combine", "link" : "tofu\/config\/MagnoliaDerivation.html#combine[T](ctx:magnolia.CaseClass[tofu.config.Configurable,T]):tofu.config.Configurable[T]", "kind" : "def"}, {"label" : "Typeclass", "tail" : "", "member" : "tofu.config.MagnoliaDerivation.Typeclass", "link" : "tofu\/config\/MagnoliaDerivation.html#Typeclass[T]=tofu.config.Configurable[T]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/config\/MagnoliaDerivation.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/config\/MagnoliaDerivation.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/config\/MagnoliaDerivation.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/config\/MagnoliaDerivation.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/config\/MagnoliaDerivation.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/config\/MagnoliaDerivation.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/config\/MagnoliaDerivation.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/MagnoliaDerivation.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/MagnoliaDerivation.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/MagnoliaDerivation.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/config\/MagnoliaDerivation.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/config\/MagnoliaDerivation.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/config\/MagnoliaDerivation.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/config\/MagnoliaDerivation.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/config\/MagnoliaDerivation.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/config\/MagnoliaDerivation.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/config\/MagnoliaDerivation.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/config\/MagnoliaDerivation.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/config\/MagnoliaDerivation.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "tofu.config.ParallelReader", "shortDescription" : "", "object" : "tofu\/config\/ParallelReader$.html", "members_object" : [{"label" : "findParallel", "tail" : "(para: Parallel[F]): ParallelReader[F]", "member" : "tofu.config.ParallelReader.findParallel", "link" : "tofu\/config\/ParallelReader$.html#findParallel[F[_]](implicitpara:cats.Parallel[F]):tofu.config.ParallelReader[F]", "kind" : "implicit def"}, {"label" : "makeError", "tail" : "(F: MonadError[F, E]): ParallelReader[F]", "member" : "tofu.config.LowPriorityParallelReader1.makeError", "link" : "tofu\/config\/ParallelReader$.html#makeError[F[_],E](implicitF:cats.MonadError[F,E]):tofu.config.ParallelReader[F]", "kind" : "implicit def"}, {"label" : "provideIdentity", "tail" : "(F: Monad[F]): ParallelReader[F]", "member" : "tofu.config.LowPriorityParallelReader2.provideIdentity", "link" : "tofu\/config\/ParallelReader$.html#provideIdentity[F[_]](implicitF:cats.Monad[F]):tofu.config.ParallelReader[F]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/config\/ParallelReader$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/config\/ParallelReader$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/config\/ParallelReader$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/config\/ParallelReader$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/config\/ParallelReader$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/config\/ParallelReader$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/config\/ParallelReader$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ParallelReader$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ParallelReader$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/ParallelReader$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/config\/ParallelReader$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/config\/ParallelReader$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/config\/ParallelReader$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/config\/ParallelReader$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/config\/ParallelReader$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/config\/ParallelReader$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/config\/ParallelReader$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/config\/ParallelReader$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/config\/ParallelReader$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "tofu.config.ParallelReader#<init>", "error" : "unsupported entity"}, {"label" : "paralleled", "tail" : ": Parallel[[β$13$]Kleisli[F, ConfigTContext[F], β$13$]]", "member" : "tofu.config.ParallelReader.paralleled", "link" : "tofu\/config\/ParallelReader.html#paralleled:cats.Parallel[[β$13$]cats.data.Kleisli[F,tofu.config.ConfigTContext[F],β$13$]]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "tofu\/config\/ParallelReader.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "tofu\/config\/ParallelReader.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "tofu\/config\/ParallelReader.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/config\/ParallelReader.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/config\/ParallelReader.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "tofu\/config\/ParallelReader.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "tofu\/config\/ParallelReader.html#==(x$1:Any):Boolean", "kind" : "final def"}], "case class" : "tofu\/config\/ParallelReader.html", "kind" : "case class"}, {"name" : "tofu.config.typesafe", "shortDescription" : "", "object" : "tofu\/config\/typesafe$.html", "members_object" : [{"label" : "syncParseConfig", "tail" : "(cfg: Config)(arg0: Configurable[A]): Either[MessageList, A]", "member" : "tofu.config.typesafe.syncParseConfig", "link" : "tofu\/config\/typesafe$.html#syncParseConfig[A](cfg:com.typesafe.config.Config)(implicitevidence$10:tofu.config.Configurable[A]):Either[tofu.config.MessageList,A]", "kind" : "def"}, {"label" : "syncParseValue", "tail" : "(cfg: ConfigValue)(arg0: Configurable[A]): Either[MessageList, A]", "member" : "tofu.config.typesafe.syncParseValue", "link" : "tofu\/config\/typesafe$.html#syncParseValue[A](cfg:com.typesafe.config.ConfigValue)(implicitevidence$9:tofu.config.Configurable[A]):Either[tofu.config.MessageList,A]", "kind" : "def"}, {"label" : "parseCfg", "tail" : "(cfg: Config)(arg0: Refs[F], arg1: MonadThrow[F], arg2: ParallelReader[F], arg3: Configurable[A]): F[A]", "member" : "tofu.config.typesafe.parseCfg", "link" : "tofu\/config\/typesafe$.html#parseCfg[F[_],A](cfg:com.typesafe.config.Config)(implicitevidence$5:tofu.concurrent.Refs[F],implicitevidence$6:tofu.MonadThrow[F],implicitevidence$7:tofu.config.ParallelReader[F],implicitevidence$8:tofu.config.Configurable[A]):F[A]", "kind" : "def"}, {"label" : "parseValue", "tail" : "(cfg: ConfigValue)(arg0: Refs[F], arg1: MonadThrow[F], arg2: ParallelReader[F], arg3: Configurable[A]): F[A]", "member" : "tofu.config.typesafe.parseValue", "link" : "tofu\/config\/typesafe$.html#parseValue[F[_],A](cfg:com.typesafe.config.ConfigValue)(implicitevidence$1:tofu.concurrent.Refs[F],implicitevidence$2:tofu.MonadThrow[F],implicitevidence$3:tofu.config.ParallelReader[F],implicitevidence$4:tofu.config.Configurable[A]):F[A]", "kind" : "def"}, {"label" : "fromUnwrapped", "tail" : "(el: Any): ConfigItem[Id]", "member" : "tofu.config.typesafe.fromUnwrapped", "link" : "tofu\/config\/typesafe$.html#fromUnwrapped(el:Any):tofu.config.ConfigItem[cats.Id]", "kind" : "def"}, {"label" : "fromValue", "tail" : "(cfg: ConfigValue): ConfigItem[Id]", "member" : "tofu.config.typesafe.fromValue", "link" : "tofu\/config\/typesafe$.html#fromValue(cfg:com.typesafe.config.ConfigValue):tofu.config.ConfigItem[cats.Id]", "kind" : "def"}, {"label" : "fromConfig", "tail" : "(cfg: Config): ConfigItem[Id]", "member" : "tofu.config.typesafe.fromConfig", "link" : "tofu\/config\/typesafe$.html#fromConfig(cfg:com.typesafe.config.Config):tofu.config.ConfigItem[cats.Id]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/config\/typesafe$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/config\/typesafe$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/config\/typesafe$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/config\/typesafe$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/config\/typesafe$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/config\/typesafe$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/config\/typesafe$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/typesafe$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/typesafe$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/config\/typesafe$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/config\/typesafe$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/config\/typesafe$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/config\/typesafe$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/config\/typesafe$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/config\/typesafe$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/config\/typesafe$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/config\/typesafe$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/config\/typesafe$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/config\/typesafe$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "tofu.memo" : [{"name" : "tofu.memo.CacheControl", "shortDescription" : "", "object" : "tofu\/memo\/CacheControl$.html", "members_object" : [{"label" : "empty", "tail" : "(): CacheControl", "member" : "tofu.memo.CacheControl.empty", "link" : "tofu\/memo\/CacheControl$.html#empty:tofu.memo.CacheControl", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/memo\/CacheControl$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/memo\/CacheControl$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/memo\/CacheControl$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/memo\/CacheControl$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/memo\/CacheControl$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/memo\/CacheControl$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/memo\/CacheControl$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheControl$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheControl$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheControl$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/memo\/CacheControl$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/memo\/CacheControl$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/memo\/CacheControl$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/memo\/CacheControl$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/memo\/CacheControl$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/memo\/CacheControl$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/memo\/CacheControl$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/memo\/CacheControl$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/memo\/CacheControl$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "keyInvalidated", "tail" : "(key: Any): InvalidationTS", "member" : "tofu.memo.CacheControl.keyInvalidated", "link" : "tofu\/memo\/CacheControl.html#keyInvalidated(key:Any):tofu.memo.InvalidationTS", "kind" : "def"}, {"member" : "tofu.memo.CacheControl#<init>", "error" : "unsupported entity"}, {"label" : "invalidated", "tail" : ": InvalidationTS", "member" : "tofu.memo.CacheControl.invalidated", "link" : "tofu\/memo\/CacheControl.html#invalidated:tofu.memo.InvalidationTS", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "tofu\/memo\/CacheControl.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/memo\/CacheControl.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/memo\/CacheControl.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/memo\/CacheControl.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/memo\/CacheControl.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/memo\/CacheControl.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/memo\/CacheControl.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/memo\/CacheControl.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheControl.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheControl.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheControl.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/memo\/CacheControl.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/memo\/CacheControl.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/memo\/CacheControl.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/memo\/CacheControl.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/memo\/CacheControl.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/memo\/CacheControl.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "tofu\/memo\/CacheControl.html", "kind" : "case class"}, {"name" : "tofu.memo.Cached", "shortDescription" : "", "object" : "tofu\/memo\/Cached$.html", "members_object" : [{"label" : "CachedApply2", "tail" : "", "member" : "tofu.memo.Cached.CachedApply2", "link" : "tofu\/memo\/Cached$.html#CachedApply2[I[_],F[_],A]extendsAnyRef", "kind" : "class"}, {"label" : "CachedApply", "tail" : "", "member" : "tofu.memo.Cached.CachedApply", "link" : "tofu\/memo\/Cached$.html#CachedApply[I[_]]extendsAnyRef", "kind" : "class"}, {"label" : "apply", "tail" : "(): CachedApply[I]", "member" : "tofu.memo.Cached.apply", "link" : "tofu\/memo\/Cached$.html#apply[I[_]]:tofu.memo.Cached.CachedApply[I]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/memo\/Cached$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/memo\/Cached$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/memo\/Cached$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/memo\/Cached$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/memo\/Cached$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/memo\/Cached$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/memo\/Cached$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/Cached$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/Cached$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/Cached$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/memo\/Cached$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/memo\/Cached$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/memo\/Cached$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/memo\/Cached$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/memo\/Cached$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/memo\/Cached$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/memo\/Cached$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/memo\/Cached$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/memo\/Cached$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.memo.CachedFunc", "shortDescription" : "", "object" : "tofu\/memo\/CachedFunc$.html", "members_object" : [{"label" : "CacheApply3", "tail" : "", "member" : "tofu.memo.CachedFunc.CacheApply3", "link" : "tofu\/memo\/CachedFunc$.html#CacheApply3[I[_],F[_],A,B]extendsAnyRef", "kind" : "class"}, {"label" : "CacheApply2", "tail" : "", "member" : "tofu.memo.CachedFunc.CacheApply2", "link" : "tofu\/memo\/CachedFunc$.html#CacheApply2[I[_],F[_],A,B]extendsAnyRef", "kind" : "class"}, {"label" : "CachedApply", "tail" : "", "member" : "tofu.memo.CachedFunc.CachedApply", "link" : "tofu\/memo\/CachedFunc$.html#CachedApply[I[_]]extendsAnyRef", "kind" : "class"}, {"label" : "apply", "tail" : "(): CachedApply[I]", "member" : "tofu.memo.CachedFunc.apply", "link" : "tofu\/memo\/CachedFunc$.html#apply[I[_]]:tofu.memo.CachedFunc.CachedApply[I]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/memo\/CachedFunc$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/memo\/CachedFunc$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/memo\/CachedFunc$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/memo\/CachedFunc$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/memo\/CachedFunc$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/memo\/CachedFunc$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/memo\/CachedFunc$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CachedFunc$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CachedFunc$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CachedFunc$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/memo\/CachedFunc$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/memo\/CachedFunc$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/memo\/CachedFunc$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/memo\/CachedFunc$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/memo\/CachedFunc$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/memo\/CachedFunc$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/memo\/CachedFunc$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/memo\/CachedFunc$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/memo\/CachedFunc$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.memo.CacheKeyControl", "trait" : "tofu\/memo\/CacheKeyControl.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/memo\/CacheKeyControl.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/memo\/CacheKeyControl.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/memo\/CacheKeyControl.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/memo\/CacheKeyControl.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/memo\/CacheKeyControl.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/memo\/CacheKeyControl.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/memo\/CacheKeyControl.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheKeyControl.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheKeyControl.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheKeyControl.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/memo\/CacheKeyControl.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/memo\/CacheKeyControl.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/memo\/CacheKeyControl.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/memo\/CacheKeyControl.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/memo\/CacheKeyControl.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/memo\/CacheKeyControl.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/memo\/CacheKeyControl.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/memo\/CacheKeyControl.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/memo\/CacheKeyControl.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "keyInvalidated", "tail" : "(key: K): InvalidationTS", "member" : "tofu.memo.CacheKeyControl.keyInvalidated", "link" : "tofu\/memo\/CacheKeyControl.html#keyInvalidated(key:K):tofu.memo.InvalidationTS", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.memo.CacheKeyState", "object" : "tofu\/memo\/CacheKeyState$.html", "members_object" : [{"label" : "ref", "tail" : "(factory: (CacheVal[A]) => F[CacheState[F, A]])(arg0: Functor[I], arg1: Monad[F], refs: MakeRef[I, F]): I[CacheKeyState[F, K, A]]", "member" : "tofu.memo.CacheKeyState.ref", "link" : "tofu\/memo\/CacheKeyState$.html#ref[I[_],F[_],K,A](factory:tofu.memo.CacheVal[A]=>F[tofu.memo.CacheState[F,A]])(implicitevidence$13:cats.Functor[I],implicitevidence$14:cats.Monad[F],implicitrefs:tofu.concurrent.MakeRef[I,F]):I[tofu.memo.CacheKeyState[F,K,A]]", "kind" : "def"}, {"label" : "mvar", "tail" : "(factory: (CacheVal[A]) => F[CacheState[F, A]])(arg0: Functor[I], arg1: Monad[F], arg2: Guarantee[F], mvars: MakeMVar[I, F]): I[CacheKeyState[F, K, A]]", "member" : "tofu.memo.CacheKeyState.mvar", "link" : "tofu\/memo\/CacheKeyState$.html#mvar[I[_],F[_],K,A](factory:tofu.memo.CacheVal[A]=>F[tofu.memo.CacheState[F,A]])(implicitevidence$10:cats.Functor[I],implicitevidence$11:cats.Monad[F],implicitevidence$12:tofu.Guarantee[F],implicitmvars:tofu.concurrent.MakeMVar[I,F]):I[tofu.memo.CacheKeyState[F,K,A]]", "kind" : "def"}, {"label" : "apply", "tail" : "(keyMethod: CacheMethod)(factory: (CacheVal[A]) => F[CacheState[F, A]])(arg0: Functor[I], arg1: Monad[F], arg2: Guarantee[F], refs: MakeRef[I, F], mvars: MakeMVar[I, F]): I[CacheKeyState[F, K, A]]", "member" : "tofu.memo.CacheKeyState.apply", "link" : "tofu\/memo\/CacheKeyState$.html#apply[I[_],F[_],K,A](keyMethod:tofu.memo.CacheMethod)(factory:tofu.memo.CacheVal[A]=>F[tofu.memo.CacheState[F,A]])(implicitevidence$7:cats.Functor[I],implicitevidence$8:cats.Monad[F],implicitevidence$9:tofu.Guarantee[F],implicitrefs:tofu.concurrent.MakeRef[I,F],implicitmvars:tofu.concurrent.MakeMVar[I,F]):I[tofu.memo.CacheKeyState[F,K,A]]", "kind" : "def"}, {"label" : "apply", "tail" : "(keyMethod: CacheMethod, valueMethod: CacheMethod)(arg0: Functor[I], arg1: Monad[F], arg2: Guarantee[F], arg3: Refs[F], arg4: MVars[F], refs: MakeRef[I, F], mvars: MakeMVar[I, F]): I[CacheKeyState[F, K, A]]", "member" : "tofu.memo.CacheKeyState.apply", "link" : "tofu\/memo\/CacheKeyState$.html#apply[I[_],F[_],K,A](keyMethod:tofu.memo.CacheMethod,valueMethod:tofu.memo.CacheMethod)(implicitevidence$2:cats.Functor[I],implicitevidence$3:cats.Monad[F],implicitevidence$4:tofu.Guarantee[F],implicitevidence$5:tofu.concurrent.Refs[F],implicitevidence$6:tofu.concurrent.MVars[F],implicitrefs:tofu.concurrent.MakeRef[I,F],implicitmvars:tofu.concurrent.MakeMVar[I,F]):I[tofu.memo.CacheKeyState[F,K,A]]", "kind" : "def"}, {"label" : "CacheMap", "tail" : "", "member" : "tofu.memo.CacheKeyState.CacheMap", "link" : "tofu\/memo\/CacheKeyState$.html#CacheMap[F[_],K,A]=Map[K,tofu.memo.CacheState[F,A]]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/memo\/CacheKeyState$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/memo\/CacheKeyState$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/memo\/CacheKeyState$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/memo\/CacheKeyState$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/memo\/CacheKeyState$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/memo\/CacheKeyState$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/memo\/CacheKeyState$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheKeyState$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheKeyState$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheKeyState$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/memo\/CacheKeyState$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/memo\/CacheKeyState$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/memo\/CacheKeyState$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/memo\/CacheKeyState$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/memo\/CacheKeyState$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/memo\/CacheKeyState$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/memo\/CacheKeyState$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/memo\/CacheKeyState$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/memo\/CacheKeyState$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/memo\/CacheKeyState.html", "kind" : "trait", "members_trait" : [{"label" : "cleanUpSingle", "tail" : "(key: K, after: Long): F[Boolean]", "member" : "tofu.memo.CacheKeyState.cleanUpSingle", "link" : "tofu\/memo\/CacheKeyState.html#cleanUpSingle(key:K,after:Long):F[Boolean]", "kind" : "def"}, {"label" : "getOrElse", "tail" : "(process: F[A], key: K, now: Long, after: Long): F[A]", "member" : "tofu.memo.CacheKeyState.getOrElse", "link" : "tofu\/memo\/CacheKeyState.html#getOrElse(process:F[A],key:K,now:Long,after:Long):F[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/memo\/CacheKeyState.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/memo\/CacheKeyState.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/memo\/CacheKeyState.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/memo\/CacheKeyState.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/memo\/CacheKeyState.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/memo\/CacheKeyState.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/memo\/CacheKeyState.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheKeyState.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheKeyState.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheKeyState.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/memo\/CacheKeyState.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/memo\/CacheKeyState.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/memo\/CacheKeyState.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/memo\/CacheKeyState.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/memo\/CacheKeyState.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/memo\/CacheKeyState.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/memo\/CacheKeyState.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/memo\/CacheKeyState.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/memo\/CacheKeyState.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "value", "tail" : "(key: K): F[CacheVal[A]]", "member" : "tofu.memo.CacheKeyState.value", "link" : "tofu\/memo\/CacheKeyState.html#value(key:K):F[tofu.memo.CacheVal[A]]", "kind" : "abstract def"}, {"label" : "cleanUp", "tail" : "(after: Long): F[Long]", "member" : "tofu.memo.CacheKeyState.cleanUp", "link" : "tofu\/memo\/CacheKeyState.html#cleanUp(after:Long):F[Long]", "kind" : "abstract def"}, {"label" : "runOperation", "tail" : "(key: K, op: CacheOperation[F, A, B]): F[B]", "member" : "tofu.memo.CacheKeyState.runOperation", "link" : "tofu\/memo\/CacheKeyState.html#runOperation[B](key:K,op:tofu.memo.CacheOperation[F,A,B]):F[B]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.memo.CacheKeyStateMVar", "shortDescription" : "", "members_case class" : [{"label" : "cleanUp", "tail" : "(after: Long): F[Long]", "member" : "tofu.memo.CacheKeyStateMVar.cleanUp", "link" : "tofu\/memo\/CacheKeyStateMVar.html#cleanUp(after:Long):F[Long]", "kind" : "def"}, {"label" : "runOperation", "tail" : "(key: K, op: CacheOperation[F, A, B]): F[B]", "member" : "tofu.memo.CacheKeyStateMVar.runOperation", "link" : "tofu\/memo\/CacheKeyStateMVar.html#runOperation[B](key:K,op:tofu.memo.CacheOperation[F,A,B]):F[B]", "kind" : "def"}, {"label" : "value", "tail" : "(key: K): F[CacheVal[A]]", "member" : "tofu.memo.CacheKeyStateMVar.value", "link" : "tofu\/memo\/CacheKeyStateMVar.html#value(key:K):F[tofu.memo.CacheVal[A]]", "kind" : "def"}, {"member" : "tofu.memo.CacheKeyStateMVar#<init>", "error" : "unsupported entity"}, {"label" : "factory", "tail" : ": (CacheVal[A]) => F[CacheState[F, A]]", "member" : "tofu.memo.CacheKeyStateMVar.factory", "link" : "tofu\/memo\/CacheKeyStateMVar.html#factory:tofu.memo.CacheVal[A]=>F[tofu.memo.CacheState[F,A]]", "kind" : "val"}, {"label" : "state", "tail" : ": MVar[F, Map[K, CacheState[F, A]]]", "member" : "tofu.memo.CacheKeyStateMVar.state", "link" : "tofu\/memo\/CacheKeyStateMVar.html#state:cats.effect.concurrent.MVar[F,Map[K,tofu.memo.CacheState[F,A]]]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "tofu\/memo\/CacheKeyStateMVar.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "cleanUpSingle", "tail" : "(key: K, after: Long): F[Boolean]", "member" : "tofu.memo.CacheKeyState.cleanUpSingle", "link" : "tofu\/memo\/CacheKeyStateMVar.html#cleanUpSingle(key:K,after:Long):F[Boolean]", "kind" : "def"}, {"label" : "getOrElse", "tail" : "(process: F[A], key: K, now: Long, after: Long): F[A]", "member" : "tofu.memo.CacheKeyState.getOrElse", "link" : "tofu\/memo\/CacheKeyStateMVar.html#getOrElse(process:F[A],key:K,now:Long,after:Long):F[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/memo\/CacheKeyStateMVar.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/memo\/CacheKeyStateMVar.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/memo\/CacheKeyStateMVar.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/memo\/CacheKeyStateMVar.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/memo\/CacheKeyStateMVar.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/memo\/CacheKeyStateMVar.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/memo\/CacheKeyStateMVar.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheKeyStateMVar.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheKeyStateMVar.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheKeyStateMVar.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/memo\/CacheKeyStateMVar.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/memo\/CacheKeyStateMVar.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/memo\/CacheKeyStateMVar.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/memo\/CacheKeyStateMVar.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/memo\/CacheKeyStateMVar.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/memo\/CacheKeyStateMVar.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "tofu\/memo\/CacheKeyStateMVar.html", "kind" : "case class"}, {"name" : "tofu.memo.CacheKeyStateRef", "shortDescription" : "", "members_case class" : [{"label" : "cleanUp", "tail" : "(after: Long): F[Long]", "member" : "tofu.memo.CacheKeyStateRef.cleanUp", "link" : "tofu\/memo\/CacheKeyStateRef.html#cleanUp(after:Long):F[Long]", "kind" : "def"}, {"label" : "runOperation", "tail" : "(key: K, op: CacheOperation[F, A, B]): F[B]", "member" : "tofu.memo.CacheKeyStateRef.runOperation", "link" : "tofu\/memo\/CacheKeyStateRef.html#runOperation[B](key:K,op:tofu.memo.CacheOperation[F,A,B]):F[B]", "kind" : "def"}, {"label" : "value", "tail" : "(key: K): F[CacheVal[A]]", "member" : "tofu.memo.CacheKeyStateRef.value", "link" : "tofu\/memo\/CacheKeyStateRef.html#value(key:K):F[tofu.memo.CacheVal[A]]", "kind" : "def"}, {"member" : "tofu.memo.CacheKeyStateRef#<init>", "error" : "unsupported entity"}, {"label" : "factory", "tail" : ": (CacheVal[A]) => F[CacheState[F, A]]", "member" : "tofu.memo.CacheKeyStateRef.factory", "link" : "tofu\/memo\/CacheKeyStateRef.html#factory:tofu.memo.CacheVal[A]=>F[tofu.memo.CacheState[F,A]]", "kind" : "val"}, {"label" : "state", "tail" : ": Ref[F, Map[K, CacheState[F, A]]]", "member" : "tofu.memo.CacheKeyStateRef.state", "link" : "tofu\/memo\/CacheKeyStateRef.html#state:cats.effect.concurrent.Ref[F,Map[K,tofu.memo.CacheState[F,A]]]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "tofu\/memo\/CacheKeyStateRef.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "cleanUpSingle", "tail" : "(key: K, after: Long): F[Boolean]", "member" : "tofu.memo.CacheKeyState.cleanUpSingle", "link" : "tofu\/memo\/CacheKeyStateRef.html#cleanUpSingle(key:K,after:Long):F[Boolean]", "kind" : "def"}, {"label" : "getOrElse", "tail" : "(process: F[A], key: K, now: Long, after: Long): F[A]", "member" : "tofu.memo.CacheKeyState.getOrElse", "link" : "tofu\/memo\/CacheKeyStateRef.html#getOrElse(process:F[A],key:K,now:Long,after:Long):F[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/memo\/CacheKeyStateRef.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/memo\/CacheKeyStateRef.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/memo\/CacheKeyStateRef.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/memo\/CacheKeyStateRef.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/memo\/CacheKeyStateRef.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/memo\/CacheKeyStateRef.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/memo\/CacheKeyStateRef.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheKeyStateRef.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheKeyStateRef.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheKeyStateRef.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/memo\/CacheKeyStateRef.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/memo\/CacheKeyStateRef.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/memo\/CacheKeyStateRef.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/memo\/CacheKeyStateRef.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/memo\/CacheKeyStateRef.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/memo\/CacheKeyStateRef.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "tofu\/memo\/CacheKeyStateRef.html", "kind" : "case class"}, {"name" : "tofu.memo.CacheMethod", "object" : "tofu\/memo\/CacheMethod$.html", "members_object" : [{"label" : "Ref", "tail" : "", "member" : "tofu.memo.CacheMethod.Ref", "link" : "tofu\/memo\/CacheMethod$.html#Ref", "kind" : "object"}, {"label" : "MVar", "tail" : "", "member" : "tofu.memo.CacheMethod.MVar", "link" : "tofu\/memo\/CacheMethod$.html#MVar", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/memo\/CacheMethod$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/memo\/CacheMethod$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/memo\/CacheMethod$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/memo\/CacheMethod$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/memo\/CacheMethod$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/memo\/CacheMethod$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/memo\/CacheMethod$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheMethod$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheMethod$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheMethod$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/memo\/CacheMethod$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/memo\/CacheMethod$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/memo\/CacheMethod$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/memo\/CacheMethod$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/memo\/CacheMethod$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/memo\/CacheMethod$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/memo\/CacheMethod$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/memo\/CacheMethod$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/memo\/CacheMethod$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/memo\/CacheMethod.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/memo\/CacheMethod.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/memo\/CacheMethod.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/memo\/CacheMethod.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/memo\/CacheMethod.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/memo\/CacheMethod.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/memo\/CacheMethod.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/memo\/CacheMethod.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheMethod.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheMethod.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheMethod.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/memo\/CacheMethod.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/memo\/CacheMethod.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/memo\/CacheMethod.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/memo\/CacheMethod.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/memo\/CacheMethod.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/memo\/CacheMethod.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/memo\/CacheMethod.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/memo\/CacheMethod.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/memo\/CacheMethod.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "tofu.memo.CacheOperation", "object" : "tofu\/memo\/CacheOperation$.html", "members_object" : [{"label" : "functorK", "tail" : "(): FunctorK[[α$0$[_$1]]CacheOperation[α$0$, A, B]]", "member" : "tofu.memo.CacheOperation.functorK", "link" : "tofu\/memo\/CacheOperation$.html#functorK[A,B]:cats.tagless.FunctorK[[α$0$[_$1]]tofu.memo.CacheOperation[α$0$,A,B]]", "kind" : "implicit final def"}, {"label" : "CleanUp", "tail" : "", "member" : "tofu.memo.CacheOperation.CleanUp", "link" : "tofu\/memo\/CacheOperation$.html#CleanUp[F[_],A]extendsCacheOperation[F,A,Boolean]withProductwithSerializable", "kind" : "final case class"}, {"label" : "GetOrElse", "tail" : "", "member" : "tofu.memo.CacheOperation.GetOrElse", "link" : "tofu\/memo\/CacheOperation$.html#GetOrElse[F[_],A]extendsCacheOperation[F,A,A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/memo\/CacheOperation$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/memo\/CacheOperation$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/memo\/CacheOperation$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/memo\/CacheOperation$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/memo\/CacheOperation$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/memo\/CacheOperation$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/memo\/CacheOperation$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheOperation$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheOperation$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheOperation$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/memo\/CacheOperation$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/memo\/CacheOperation$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/memo\/CacheOperation$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/memo\/CacheOperation$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/memo\/CacheOperation$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/memo\/CacheOperation$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/memo\/CacheOperation$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/memo\/CacheOperation$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/memo\/CacheOperation$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/memo\/CacheOperation.html", "kind" : "trait", "members_trait" : [{"label" : "getPureOrElse", "tail" : "(cval: CacheVal[A])(orElse: => F[B])(F: Monad[F]): F[B]", "member" : "tofu.memo.CacheOperation.getPureOrElse", "link" : "tofu\/memo\/CacheOperation.html#getPureOrElse(cval:tofu.memo.CacheVal[A])(orElse:=>F[B])(implicitF:cats.Monad[F]):F[B]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/memo\/CacheOperation.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/memo\/CacheOperation.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/memo\/CacheOperation.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/memo\/CacheOperation.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/memo\/CacheOperation.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/memo\/CacheOperation.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/memo\/CacheOperation.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheOperation.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheOperation.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheOperation.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/memo\/CacheOperation.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/memo\/CacheOperation.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/memo\/CacheOperation.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/memo\/CacheOperation.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/memo\/CacheOperation.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/memo\/CacheOperation.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/memo\/CacheOperation.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/memo\/CacheOperation.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/memo\/CacheOperation.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "mapK", "tail" : "(f: ~>[F, G]): CacheOperation[G, A, B]", "member" : "tofu.memo.CacheOperation.mapK", "link" : "tofu\/memo\/CacheOperation.html#mapK[G[_]](f:F~>G):tofu.memo.CacheOperation[G,A,B]", "kind" : "abstract def"}, {"label" : "update", "tail" : "(cval: CacheVal[A])(F: Monad[F]): F[(CacheVal[A], B)]", "member" : "tofu.memo.CacheOperation.update", "link" : "tofu\/memo\/CacheOperation.html#update(cval:tofu.memo.CacheVal[A])(implicitF:cats.Monad[F]):F[(tofu.memo.CacheVal[A],B)]", "kind" : "abstract def"}, {"label" : "tryGet", "tail" : "(cval: CacheVal[A])(F: Monad[F]): Option[B]", "member" : "tofu.memo.CacheOperation.tryGet", "link" : "tofu\/memo\/CacheOperation.html#tryGet(cval:tofu.memo.CacheVal[A])(implicitF:cats.Monad[F]):Option[B]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.memo.CacheState", "shortDescription" : "", "object" : "tofu\/memo\/CacheState$.html", "members_class" : [{"label" : "cleanUp", "tail" : "(after: Long): F[Boolean]", "member" : "tofu.memo.CacheState.cleanUp", "link" : "tofu\/memo\/CacheState.html#cleanUp(after:Long):F[Boolean]", "kind" : "def"}, {"label" : "getOrElse", "tail" : "(process: F[A], now: Long, after: Long): F[A]", "member" : "tofu.memo.CacheState.getOrElse", "link" : "tofu\/memo\/CacheState.html#getOrElse(process:F[A],now:Long,after:Long):F[A]", "kind" : "def"}, {"member" : "tofu.memo.CacheState#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/memo\/CacheState.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/memo\/CacheState.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/memo\/CacheState.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/memo\/CacheState.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/memo\/CacheState.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/memo\/CacheState.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/memo\/CacheState.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheState.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheState.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheState.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/memo\/CacheState.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/memo\/CacheState.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/memo\/CacheState.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/memo\/CacheState.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/memo\/CacheState.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/memo\/CacheState.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/memo\/CacheState.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/memo\/CacheState.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/memo\/CacheState.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "value", "tail" : "(): F[CacheVal[A]]", "member" : "tofu.memo.CacheState.value", "link" : "tofu\/memo\/CacheState.html#value:F[tofu.memo.CacheVal[A]]", "kind" : "abstract def"}, {"label" : "runOperation", "tail" : "(op: CacheOperation[F, A, B]): F[B]", "member" : "tofu.memo.CacheState.runOperation", "link" : "tofu\/memo\/CacheState.html#runOperation[B](op:tofu.memo.CacheOperation[F,A,B]):F[B]", "kind" : "abstract def"}], "members_object" : [{"label" : "invariantK", "tail" : "(): InvariantK[[α$0$[_$1]]CacheState[α$0$, A]]", "member" : "tofu.memo.CacheState.invariantK", "link" : "tofu\/memo\/CacheState$.html#invariantK[A]:cats.tagless.InvariantK[[α$0$[_$1]]tofu.memo.CacheState[α$0$,A]]", "kind" : "implicit def"}, {"label" : "ref", "tail" : "(initial: CacheVal[A])(arg0: Monad[F], arg1: Refs[F]): F[CacheState[F, A]]", "member" : "tofu.memo.CacheState.ref", "link" : "tofu\/memo\/CacheState$.html#ref[F[_],A](initial:tofu.memo.CacheVal[A])(implicitevidence$16:cats.Monad[F],implicitevidence$17:tofu.concurrent.Refs[F]):F[tofu.memo.CacheState[F,A]]", "kind" : "def"}, {"label" : "mvar", "tail" : "(initial: CacheVal[A])(arg0: Monad[F], arg1: Guarantee[F], arg2: MVars[F]): F[CacheState[F, A]]", "member" : "tofu.memo.CacheState.mvar", "link" : "tofu\/memo\/CacheState$.html#mvar[F[_],A](initial:tofu.memo.CacheVal[A])(implicitevidence$13:cats.Monad[F],implicitevidence$14:tofu.Guarantee[F],implicitevidence$15:tofu.concurrent.MVars[F]):F[tofu.memo.CacheState[F,A]]", "kind" : "def"}, {"label" : "refIn", "tail" : "(initial: CacheVal[A])(arg0: Functor[I], arg1: Monad[F], refs: MakeRef[I, F]): I[CacheState[F, A]]", "member" : "tofu.memo.CacheState.refIn", "link" : "tofu\/memo\/CacheState$.html#refIn[I[_],F[_],A](initial:tofu.memo.CacheVal[A])(implicitevidence$11:cats.Functor[I],implicitevidence$12:cats.Monad[F],implicitrefs:tofu.concurrent.MakeRef[I,F]):I[tofu.memo.CacheState[F,A]]", "kind" : "def"}, {"label" : "mvarIn", "tail" : "(initial: CacheVal[A])(arg0: Functor[I], arg1: Monad[F], arg2: Guarantee[F], mvars: MakeMVar[I, F]): I[CacheState[F, A]]", "member" : "tofu.memo.CacheState.mvarIn", "link" : "tofu\/memo\/CacheState$.html#mvarIn[I[_],F[_],A](initial:tofu.memo.CacheVal[A])(implicitevidence$8:cats.Functor[I],implicitevidence$9:cats.Monad[F],implicitevidence$10:tofu.Guarantee[F],implicitmvars:tofu.concurrent.MakeMVar[I,F]):I[tofu.memo.CacheState[F,A]]", "kind" : "def"}, {"label" : "in", "tail" : "(method: CacheMethod, initial: CacheVal[A])(arg0: Functor[I], arg1: Monad[F], arg2: Guarantee[F], mvar: MakeMVar[I, F], refs: MakeRef[I, F]): I[CacheState[F, A]]", "member" : "tofu.memo.CacheState.in", "link" : "tofu\/memo\/CacheState$.html#in[I[_],F[_],A](method:tofu.memo.CacheMethod,initial:tofu.memo.CacheVal[A])(implicitevidence$5:cats.Functor[I],implicitevidence$6:cats.Monad[F],implicitevidence$7:tofu.Guarantee[F],implicitmvar:tofu.concurrent.MakeMVar[I,F],implicitrefs:tofu.concurrent.MakeRef[I,F]):I[tofu.memo.CacheState[F,A]]", "kind" : "def"}, {"label" : "apply", "tail" : "(method: CacheMethod, initial: CacheVal[A])(arg0: Monad[F], arg1: Guarantee[F], arg2: Refs[F], arg3: MVars[F]): F[CacheState[F, A]]", "member" : "tofu.memo.CacheState.apply", "link" : "tofu\/memo\/CacheState$.html#apply[F[_],A](method:tofu.memo.CacheMethod,initial:tofu.memo.CacheVal[A])(implicitevidence$1:cats.Monad[F],implicitevidence$2:tofu.Guarantee[F],implicitevidence$3:tofu.concurrent.Refs[F],implicitevidence$4:tofu.concurrent.MVars[F]):F[tofu.memo.CacheState[F,A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/memo\/CacheState$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/memo\/CacheState$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/memo\/CacheState$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/memo\/CacheState$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/memo\/CacheState$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/memo\/CacheState$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/memo\/CacheState$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheState$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheState$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheState$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/memo\/CacheState$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/memo\/CacheState$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/memo\/CacheState$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/memo\/CacheState$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/memo\/CacheState$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/memo\/CacheState$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/memo\/CacheState$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/memo\/CacheState$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/memo\/CacheState$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "tofu\/memo\/CacheState.html", "kind" : "class"}, {"name" : "tofu.memo.CacheStateMVar", "shortDescription" : "", "members_case class" : [{"label" : "runOperation", "tail" : "(op: CacheOperation[F, A, B]): F[B]", "member" : "tofu.memo.CacheStateMVar.runOperation", "link" : "tofu\/memo\/CacheStateMVar.html#runOperation[B](op:tofu.memo.CacheOperation[F,A,B]):F[B]", "kind" : "def"}, {"label" : "value", "tail" : "(): F[CacheVal[A]]", "member" : "tofu.memo.CacheStateMVar.value", "link" : "tofu\/memo\/CacheStateMVar.html#value:F[tofu.memo.CacheVal[A]]", "kind" : "def"}, {"member" : "tofu.memo.CacheStateMVar#<init>", "error" : "unsupported entity"}, {"label" : "state", "tail" : ": MVar[F, CacheVal[A]]", "member" : "tofu.memo.CacheStateMVar.state", "link" : "tofu\/memo\/CacheStateMVar.html#state:cats.effect.concurrent.MVar[F,tofu.memo.CacheVal[A]]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "tofu\/memo\/CacheStateMVar.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "cleanUp", "tail" : "(after: Long): F[Boolean]", "member" : "tofu.memo.CacheState.cleanUp", "link" : "tofu\/memo\/CacheStateMVar.html#cleanUp(after:Long):F[Boolean]", "kind" : "def"}, {"label" : "getOrElse", "tail" : "(process: F[A], now: Long, after: Long): F[A]", "member" : "tofu.memo.CacheState.getOrElse", "link" : "tofu\/memo\/CacheStateMVar.html#getOrElse(process:F[A],now:Long,after:Long):F[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/memo\/CacheStateMVar.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/memo\/CacheStateMVar.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/memo\/CacheStateMVar.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/memo\/CacheStateMVar.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/memo\/CacheStateMVar.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/memo\/CacheStateMVar.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/memo\/CacheStateMVar.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheStateMVar.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheStateMVar.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheStateMVar.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/memo\/CacheStateMVar.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/memo\/CacheStateMVar.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/memo\/CacheStateMVar.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/memo\/CacheStateMVar.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/memo\/CacheStateMVar.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/memo\/CacheStateMVar.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "tofu\/memo\/CacheStateMVar.html", "kind" : "case class"}, {"name" : "tofu.memo.CacheStateRef", "shortDescription" : "", "members_case class" : [{"label" : "runOperation", "tail" : "(op: CacheOperation[F, A, B]): F[B]", "member" : "tofu.memo.CacheStateRef.runOperation", "link" : "tofu\/memo\/CacheStateRef.html#runOperation[B](op:tofu.memo.CacheOperation[F,A,B]):F[B]", "kind" : "def"}, {"label" : "value", "tail" : "(): F[CacheVal[A]]", "member" : "tofu.memo.CacheStateRef.value", "link" : "tofu\/memo\/CacheStateRef.html#value:F[tofu.memo.CacheVal[A]]", "kind" : "def"}, {"member" : "tofu.memo.CacheStateRef#<init>", "error" : "unsupported entity"}, {"label" : "state", "tail" : ": Ref[F, CacheVal[A]]", "member" : "tofu.memo.CacheStateRef.state", "link" : "tofu\/memo\/CacheStateRef.html#state:cats.effect.concurrent.Ref[F,tofu.memo.CacheVal[A]]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "tofu\/memo\/CacheStateRef.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "cleanUp", "tail" : "(after: Long): F[Boolean]", "member" : "tofu.memo.CacheState.cleanUp", "link" : "tofu\/memo\/CacheStateRef.html#cleanUp(after:Long):F[Boolean]", "kind" : "def"}, {"label" : "getOrElse", "tail" : "(process: F[A], now: Long, after: Long): F[A]", "member" : "tofu.memo.CacheState.getOrElse", "link" : "tofu\/memo\/CacheStateRef.html#getOrElse(process:F[A],now:Long,after:Long):F[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/memo\/CacheStateRef.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/memo\/CacheStateRef.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/memo\/CacheStateRef.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/memo\/CacheStateRef.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/memo\/CacheStateRef.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/memo\/CacheStateRef.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/memo\/CacheStateRef.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheStateRef.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheStateRef.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheStateRef.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/memo\/CacheStateRef.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/memo\/CacheStateRef.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/memo\/CacheStateRef.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/memo\/CacheStateRef.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/memo\/CacheStateRef.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/memo\/CacheStateRef.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "tofu\/memo\/CacheStateRef.html", "kind" : "case class"}, {"name" : "tofu.memo.CacheVal", "object" : "tofu\/memo\/CacheVal$.html", "members_object" : [{"label" : "None", "tail" : "", "member" : "tofu.memo.CacheVal.None", "link" : "tofu\/memo\/CacheVal$.html#None", "kind" : "object"}, {"label" : "Some", "tail" : "", "member" : "tofu.memo.CacheVal.Some", "link" : "tofu\/memo\/CacheVal$.html#Some[+A]extendsCacheVal[A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "some", "tail" : "(ts: Long, x: A): CacheVal[A]", "member" : "tofu.memo.CacheVal.some", "link" : "tofu\/memo\/CacheVal$.html#some[A](ts:Long,x:A):tofu.memo.CacheVal[A]", "kind" : "def"}, {"label" : "none", "tail" : "(): CacheVal[A]", "member" : "tofu.memo.CacheVal.none", "link" : "tofu\/memo\/CacheVal$.html#none[A]:tofu.memo.CacheVal[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/memo\/CacheVal$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/memo\/CacheVal$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/memo\/CacheVal$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/memo\/CacheVal$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/memo\/CacheVal$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/memo\/CacheVal$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/memo\/CacheVal$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheVal$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheVal$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheVal$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/memo\/CacheVal$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/memo\/CacheVal$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/memo\/CacheVal$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/memo\/CacheVal$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/memo\/CacheVal$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/memo\/CacheVal$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/memo\/CacheVal$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/memo\/CacheVal$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/memo\/CacheVal$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/memo\/CacheVal.html", "kind" : "trait", "members_trait" : [{"label" : "filter", "tail" : "(after: Long): CacheVal[A]", "member" : "tofu.memo.CacheVal.filter", "link" : "tofu\/memo\/CacheVal.html#filter(after:Long):tofu.memo.CacheVal[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/memo\/CacheVal.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/memo\/CacheVal.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/memo\/CacheVal.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/memo\/CacheVal.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/memo\/CacheVal.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/memo\/CacheVal.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/memo\/CacheVal.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheVal.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheVal.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/CacheVal.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/memo\/CacheVal.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/memo\/CacheVal.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/memo\/CacheVal.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/memo\/CacheVal.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/memo\/CacheVal.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/memo\/CacheVal.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/memo\/CacheVal.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/memo\/CacheVal.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/memo\/CacheVal.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "fold", "tail" : "(empty: => B)(some: (Long, A) => B): B", "member" : "tofu.memo.CacheVal.fold", "link" : "tofu\/memo\/CacheVal.html#fold[B](empty:=>B)(some:(Long,A)=>B):B", "kind" : "abstract def"}, {"label" : "get", "tail" : "(): A", "member" : "tofu.memo.CacheVal.get", "link" : "tofu\/memo\/CacheVal.html#get:A", "kind" : "abstract def"}, {"label" : "getOption", "tail" : "(): Option[A]", "member" : "tofu.memo.CacheVal.getOption", "link" : "tofu\/memo\/CacheVal.html#getOption:Option[A]", "kind" : "abstract def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "tofu.memo.CacheVal.isEmpty", "link" : "tofu\/memo\/CacheVal.html#isEmpty:Boolean", "kind" : "abstract def"}, {"label" : "expired", "tail" : "(after: Long): Boolean", "member" : "tofu.memo.CacheVal.expired", "link" : "tofu\/memo\/CacheVal.html#expired(after:Long):Boolean", "kind" : "abstract def"}, {"label" : "valid", "tail" : "(after: Long): Boolean", "member" : "tofu.memo.CacheVal.valid", "link" : "tofu\/memo\/CacheVal.html#valid(after:Long):Boolean", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.memo.InvalidationTS", "shortDescription" : "", "object" : "tofu\/memo\/InvalidationTS$.html", "members_object" : [{"label" : "zero", "tail" : ": InvalidationTS", "member" : "tofu.memo.InvalidationTS.zero", "link" : "tofu\/memo\/InvalidationTS$.html#zero:tofu.memo.InvalidationTS", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/memo\/InvalidationTS$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/memo\/InvalidationTS$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/memo\/InvalidationTS$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/memo\/InvalidationTS$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/memo\/InvalidationTS$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/memo\/InvalidationTS$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/memo\/InvalidationTS$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/InvalidationTS$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/InvalidationTS$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/InvalidationTS$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/memo\/InvalidationTS$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/memo\/InvalidationTS$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/memo\/InvalidationTS$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/memo\/InvalidationTS$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/memo\/InvalidationTS$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/memo\/InvalidationTS$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/memo\/InvalidationTS$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/memo\/InvalidationTS$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/memo\/InvalidationTS$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "tofu.memo.InvalidationTS#<init>", "error" : "unsupported entity"}, {"label" : "millis", "tail" : ": Long", "member" : "tofu.memo.InvalidationTS.millis", "link" : "tofu\/memo\/InvalidationTS.html#millis:Long", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "tofu\/memo\/InvalidationTS.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "tofu\/memo\/InvalidationTS.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "tofu\/memo\/InvalidationTS.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/memo\/InvalidationTS.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/memo\/InvalidationTS.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "tofu\/memo\/InvalidationTS.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "tofu\/memo\/InvalidationTS.html#==(x$1:Any):Boolean", "kind" : "final def"}], "case class" : "tofu\/memo\/InvalidationTS.html", "kind" : "case class"}, {"name" : "tofu.memo.Memoize", "object" : "tofu\/memo\/Memoize$.html", "members_object" : [{"label" : "ops", "tail" : "", "member" : "tofu.memo.Memoize.ops", "link" : "tofu\/memo\/Memoize$.html#ops", "kind" : "object"}, {"label" : "AllOps", "tail" : "", "member" : "tofu.memo.Memoize.AllOps", "link" : "tofu\/memo\/Memoize$.html#AllOps[F[_],A]extendsMemoize.Ops[F,A]", "kind" : "trait"}, {"label" : "nonInheritedOps", "tail" : "", "member" : "tofu.memo.Memoize.nonInheritedOps", "link" : "tofu\/memo\/Memoize$.html#nonInheritedOps", "kind" : "object"}, {"label" : "ToMemoizeOps", "tail" : "", "member" : "tofu.memo.Memoize.ToMemoizeOps", "link" : "tofu\/memo\/Memoize$.html#ToMemoizeOpsextendsAnyRef", "kind" : "trait"}, {"label" : "Ops", "tail" : "", "member" : "tofu.memo.Memoize.Ops", "link" : "tofu\/memo\/Memoize$.html#Ops[F[_],A]extendsAnyRef", "kind" : "trait"}, {"label" : "apply", "tail" : "(instance: Memoize[F]): Memoize[F]", "member" : "tofu.memo.Memoize.apply", "link" : "tofu\/memo\/Memoize$.html#apply[F[_]](implicitinstance:tofu.memo.Memoize[F]):tofu.memo.Memoize[F]", "kind" : "def"}, {"label" : "concurrentMemoize", "tail" : "(F: Concurrent[F]): Memoize[F]", "member" : "tofu.memo.Memoize.concurrentMemoize", "link" : "tofu\/memo\/Memoize$.html#concurrentMemoize[F[_]](implicitF:cats.effect.Concurrent[F]):tofu.memo.Memoize[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/memo\/Memoize$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/memo\/Memoize$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/memo\/Memoize$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/memo\/Memoize$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/memo\/Memoize$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/memo\/Memoize$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/memo\/Memoize$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/Memoize$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/Memoize$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/memo\/Memoize$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/memo\/Memoize$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/memo\/Memoize$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/memo\/Memoize$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/memo\/Memoize$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/memo\/Memoize$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/memo\/Memoize$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/memo\/Memoize$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/memo\/Memoize$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/memo\/Memoize$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/memo\/Memoize.html", "kind" : "trait", "members_trait" : [{"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "tofu\/memo\/Memoize.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/memo\/Memoize.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/memo\/Memoize.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "tofu\/memo\/Memoize.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "tofu\/memo\/Memoize.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "tofu\/memo\/Memoize.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "tofu\/memo\/Memoize.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "tofu\/memo\/Memoize.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "memoizeOnSuccess", "tail" : "(fa: F[A]): F[F[A]]", "member" : "tofu.memo.Memoize.memoizeOnSuccess", "link" : "tofu\/memo\/Memoize.html#memoizeOnSuccess[A](fa:F[A]):F[F[A]]", "kind" : "abstract def"}, {"label" : "memoize", "tail" : "(fa: F[A]): F[F[A]]", "member" : "tofu.memo.Memoize.memoize", "link" : "tofu\/memo\/Memoize.html#memoize[A](fa:F[A]):F[F[A]]", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.Any.getClass", "link" : "tofu\/memo\/Memoize.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : "WARNING breaks referential transparency, use with great care"}], "tofu.common" : [{"name" : "tofu.common.Console", "object" : "tofu\/common\/Console$.html", "members_object" : [{"label" : "ops", "tail" : "", "member" : "tofu.common.Console.ops", "link" : "tofu\/common\/Console$.html#ops", "kind" : "object"}, {"label" : "AllOps", "tail" : "", "member" : "tofu.common.Console.AllOps", "link" : "tofu\/common\/Console$.html#AllOps[F[_],A]extendsConsole.Ops[F,A]", "kind" : "trait"}, {"label" : "nonInheritedOps", "tail" : "", "member" : "tofu.common.Console.nonInheritedOps", "link" : "tofu\/common\/Console$.html#nonInheritedOps", "kind" : "object"}, {"label" : "ToConsoleOps", "tail" : "", "member" : "tofu.common.Console.ToConsoleOps", "link" : "tofu\/common\/Console$.html#ToConsoleOpsextendsAnyRef", "kind" : "trait"}, {"label" : "Ops", "tail" : "", "member" : "tofu.common.Console.Ops", "link" : "tofu\/common\/Console$.html#Ops[F[_],A]extendsAnyRef", "kind" : "trait"}, {"label" : "apply", "tail" : "(instance: Console[F]): Console[F]", "member" : "tofu.common.Console.apply", "link" : "tofu\/common\/Console$.html#apply[F[_]](implicitinstance:tofu.common.Console[F]):tofu.common.Console[F]", "kind" : "def"}, {"label" : "instance", "tail" : "(in: BufferedReader, out: PrintStream, err: PrintStream)(arg0: Sync[F]): Console[F]", "member" : "tofu.common.Console.instance", "link" : "tofu\/common\/Console$.html#instance[F[_]](in:java.io.BufferedReader,out:java.io.PrintStream,err:java.io.PrintStream)(implicitevidence$7:cats.effect.Sync[F]):tofu.common.Console[F]", "kind" : "def"}, {"label" : "syncInstance", "tail" : "(arg0: Sync[F]): Console[F]", "member" : "tofu.common.Console.syncInstance", "link" : "tofu\/common\/Console$.html#syncInstance[F[_]](implicitevidence$6:cats.effect.Sync[F]):tofu.common.Console[F]", "kind" : "implicit def"}, {"label" : "representableKInstance", "tail" : ": RepresentableK[Console]", "member" : "tofu.common.Console.representableKInstance", "link" : "tofu\/common\/Console$.html#representableKInstance:tofu.higherKind.RepresentableK[tofu.common.Console]", "kind" : "implicit val"}, {"label" : "putErrLn", "tail" : "(e: String)(arg0: Console[F]): F[Unit]", "member" : "tofu.common.Console.putErrLn", "link" : "tofu\/common\/Console$.html#putErrLn[F[_]](e:String)(implicitevidence$5:tofu.common.Console[F]):F[Unit]", "kind" : "def"}, {"label" : "putErr", "tail" : "(e: String)(arg0: Console[F]): F[Unit]", "member" : "tofu.common.Console.putErr", "link" : "tofu\/common\/Console$.html#putErr[F[_]](e:String)(implicitevidence$4:tofu.common.Console[F]):F[Unit]", "kind" : "def"}, {"label" : "putStrLn", "tail" : "(s: String)(arg0: Console[F]): F[Unit]", "member" : "tofu.common.Console.putStrLn", "link" : "tofu\/common\/Console$.html#putStrLn[F[_]](s:String)(implicitevidence$3:tofu.common.Console[F]):F[Unit]", "kind" : "def"}, {"label" : "putStr", "tail" : "(s: String)(arg0: Console[F]): F[Unit]", "member" : "tofu.common.Console.putStr", "link" : "tofu\/common\/Console$.html#putStr[F[_]](s:String)(implicitevidence$2:tofu.common.Console[F]):F[Unit]", "kind" : "def"}, {"label" : "readStrLn", "tail" : "(arg0: Console[F]): F[String]", "member" : "tofu.common.Console.readStrLn", "link" : "tofu\/common\/Console$.html#readStrLn[F[_]](implicitevidence$1:tofu.common.Console[F]):F[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/common\/Console$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/common\/Console$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/common\/Console$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/common\/Console$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/common\/Console$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/common\/Console$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/common\/Console$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/common\/Console$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/common\/Console$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/common\/Console$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/common\/Console$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/common\/Console$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/common\/Console$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/common\/Console$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/common\/Console$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/common\/Console$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/common\/Console$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/common\/Console$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/common\/Console$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/common\/Console.html", "kind" : "trait", "members_trait" : [{"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "tofu\/common\/Console.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/common\/Console.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/common\/Console.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "tofu\/common\/Console.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "tofu\/common\/Console.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "tofu\/common\/Console.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "tofu\/common\/Console.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "tofu\/common\/Console.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "putErrLn", "tail" : "(err: String): F[Unit]", "member" : "tofu.common.Console.putErrLn", "link" : "tofu\/common\/Console.html#putErrLn(err:String):F[Unit]", "kind" : "abstract def"}, {"label" : "putErr", "tail" : "(err: String): F[Unit]", "member" : "tofu.common.Console.putErr", "link" : "tofu\/common\/Console.html#putErr(err:String):F[Unit]", "kind" : "abstract def"}, {"label" : "putStrLn", "tail" : "(s: String): F[Unit]", "member" : "tofu.common.Console.putStrLn", "link" : "tofu\/common\/Console.html#putStrLn(s:String):F[Unit]", "kind" : "abstract def"}, {"label" : "putStr", "tail" : "(s: String): F[Unit]", "member" : "tofu.common.Console.putStr", "link" : "tofu\/common\/Console.html#putStr(s:String):F[Unit]", "kind" : "abstract def"}, {"label" : "readStrLn", "tail" : "(): F[String]", "member" : "tofu.common.Console.readStrLn", "link" : "tofu\/common\/Console.html#readStrLn:F[String]", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.Any.getClass", "link" : "tofu\/common\/Console.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : ""}], "tofu.syntax" : [{"name" : "tofu.syntax.bracket", "shortDescription" : "", "object" : "tofu\/syntax\/bracket$.html", "members_object" : [{"label" : "TofuBracketEitherTOps", "tail" : "", "member" : "tofu.syntax.bracket.TofuBracketEitherTOps", "link" : "tofu\/syntax\/bracket$.html#TofuBracketEitherTOps[F[_],E,A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "TofuBracketMVarOps", "tail" : "", "member" : "tofu.syntax.bracket.TofuBracketMVarOps", "link" : "tofu\/syntax\/bracket$.html#TofuBracketMVarOps[F[_],A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "TofuBracketOps", "tail" : "", "member" : "tofu.syntax.bracket.TofuBracketOps", "link" : "tofu\/syntax\/bracket$.html#TofuBracketOps[F[_],A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/syntax\/bracket$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/syntax\/bracket$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/syntax\/bracket$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/syntax\/bracket$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/syntax\/bracket$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/syntax\/bracket$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/syntax\/bracket$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/bracket$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/bracket$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/bracket$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/syntax\/bracket$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/syntax\/bracket$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/syntax\/bracket$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/syntax\/bracket$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/syntax\/bracket$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/syntax\/bracket$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/syntax\/bracket$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/syntax\/bracket$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/syntax\/bracket$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.syntax.consume", "shortDescription" : "", "object" : "tofu\/syntax\/consume$.html", "members_object" : [{"label" : "toSemigroupKOps", "tail" : "(target: F[A])(tc: SemigroupK[F]): Ops[F, A] { type TypeClassType = cats.SemigroupK[F] }", "member" : "cats.SemigroupK.ToSemigroupKOps.toSemigroupKOps", "link" : "tofu\/syntax\/consume$.html#toSemigroupKOps[F[_],A](target:F[A])(implicittc:cats.SemigroupK[F]):cats.SemigroupK.Ops[F,A]{typeTypeClassType=cats.SemigroupK[F]}", "kind" : "implicit def"}, {"label" : "toMonoidKOps", "tail" : "(target: F[A])(tc: MonoidK[F]): Ops[F, A] { type TypeClassType = cats.MonoidK[F] }", "member" : "cats.MonoidK.ToMonoidKOps.toMonoidKOps", "link" : "tofu\/syntax\/consume$.html#toMonoidKOps[F[_<:<?>],A](target:F[A])(implicittc:cats.MonoidK[F]):cats.MonoidK.Ops[F,A]{typeTypeClassType=cats.MonoidK[F]}", "kind" : "implicit def"}, {"label" : "toSwitchOps", "tail" : "(target: F[A])(tc: Switch[F]): Ops[F, A] { type TypeClassType = tofu.control.Switch[F] }", "member" : "tofu.control.Switch.ToSwitchOps.toSwitchOps", "link" : "tofu\/syntax\/consume$.html#toSwitchOps[F[_],A](target:F[A])(implicittc:tofu.control.Switch[F]):tofu.control.Switch.Ops[F,A]{typeTypeClassType=tofu.control.Switch[F]}", "kind" : "implicit def"}, {"label" : "toPartialOps", "tail" : "(target: F[A])(tc: Partial[F]): Ops[F, A] { type TypeClassType = tofu.control.Partial[F] }", "member" : "tofu.control.Partial.ToPartialOps.toPartialOps", "link" : "tofu\/syntax\/consume$.html#toPartialOps[F[_],A](target:F[A])(implicittc:tofu.control.Partial[F]):tofu.control.Partial.Ops[F,A]{typeTypeClassType=tofu.control.Partial[F]}", "kind" : "implicit def"}, {"label" : "toConsumeOps", "tail" : "(target: F[A])(tc: Consume[F]): Ops[F, A] { type TypeClassType = tofu.control.Consume[F] }", "member" : "tofu.control.Consume.ToConsumeOps.toConsumeOps", "link" : "tofu\/syntax\/consume$.html#toConsumeOps[F[_],A](target:F[A])(implicittc:tofu.control.Consume[F]):tofu.control.Consume.Ops[F,A]{typeTypeClassType=tofu.control.Consume[F]}", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/syntax\/consume$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/syntax\/consume$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/syntax\/consume$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/syntax\/consume$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/syntax\/consume$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/syntax\/consume$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/syntax\/consume$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/consume$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/consume$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/consume$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/syntax\/consume$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/syntax\/consume$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/syntax\/consume$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/syntax\/consume$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/syntax\/consume$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/syntax\/consume$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/syntax\/consume$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/syntax\/consume$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/syntax\/consume$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.syntax.context", "shortDescription" : "", "object" : "tofu\/syntax\/context$.html", "members_object" : [{"label" : "ContextFOps", "tail" : "", "member" : "tofu.syntax.context.ContextFOps", "link" : "tofu\/syntax\/context$.html#ContextFOps[F[_],A,C]extendsAnyRef", "kind" : "implicit final class"}, {"label" : "RunContextPA", "tail" : "", "member" : "tofu.syntax.context.RunContextPA", "link" : "tofu\/syntax\/context$.html#RunContextPA[F[_]]extendsAnyRef", "kind" : "class"}, {"label" : "runContext", "tail" : "(): RunContextPA[F]", "member" : "tofu.syntax.context.runContext", "link" : "tofu\/syntax\/context$.html#runContext[F[_]]:tofu.syntax.context.RunContextPA[F]", "kind" : "def"}, {"label" : "AskFPA", "tail" : "", "member" : "tofu.syntax.context.AskFPA", "link" : "tofu\/syntax\/context$.html#AskFPA[F[_]]extendsAnyVal", "kind" : "final class"}, {"label" : "askF", "tail" : "(): AskFPA[F]", "member" : "tofu.syntax.context.askF", "link" : "tofu\/syntax\/context$.html#askF[F[_]]:tofu.syntax.context.AskFPA[F]", "kind" : "def"}, {"label" : "AskPA", "tail" : "", "member" : "tofu.syntax.context.AskPA", "link" : "tofu\/syntax\/context$.html#AskPA[F[_]]extendsAnyVal", "kind" : "final class"}, {"label" : "ask", "tail" : "(): AskPA[F]", "member" : "tofu.syntax.context.ask", "link" : "tofu\/syntax\/context$.html#ask[F[_]]:tofu.syntax.context.AskPA[F]", "kind" : "def"}, {"label" : "hasContext", "tail" : "(ctx: HasContext[F, C]): F[C]", "member" : "tofu.syntax.context.hasContext", "link" : "tofu\/syntax\/context$.html#hasContext[F[_],C](implicitctx:tofu.HasContext[F,C]):F[C]", "kind" : "def"}, {"label" : "context", "tail" : "(ctx: Context[F]): F[Ctx]", "member" : "tofu.syntax.context.context", "link" : "tofu\/syntax\/context$.html#context[F[_]](implicitctx:tofu.Context[F]):F[ctx.Ctx]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/syntax\/context$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/syntax\/context$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/syntax\/context$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/syntax\/context$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/syntax\/context$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/syntax\/context$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/syntax\/context$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/context$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/context$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/context$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/syntax\/context$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/syntax\/context$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/syntax\/context$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/syntax\/context$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/syntax\/context$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/syntax\/context$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/syntax\/context$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/syntax\/context$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/syntax\/context$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.syntax.either", "shortDescription" : "", "object" : "tofu\/syntax\/either$.html", "members_object" : [{"label" : "TofuEitherAssocROps", "tail" : "", "member" : "tofu.syntax.either.TofuEitherAssocROps", "link" : "tofu\/syntax\/either$.html#TofuEitherAssocROps[A,B,C]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "TofuEitherAssocLOps", "tail" : "", "member" : "tofu.syntax.either.TofuEitherAssocLOps", "link" : "tofu\/syntax\/either$.html#TofuEitherAssocLOps[A,B,C]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "TofuRightOps", "tail" : "", "member" : "tofu.syntax.either.TofuRightOps", "link" : "tofu\/syntax\/either$.html#TofuRightOps[A,B]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "TofuLeftOps", "tail" : "", "member" : "tofu.syntax.either.TofuLeftOps", "link" : "tofu\/syntax\/either$.html#TofuLeftOps[A,B]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/syntax\/either$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/syntax\/either$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/syntax\/either$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/syntax\/either$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/syntax\/either$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/syntax\/either$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/syntax\/either$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/either$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/either$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/either$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/syntax\/either$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/syntax\/either$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/syntax\/either$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/syntax\/either$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/syntax\/either$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/syntax\/either$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/syntax\/either$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/syntax\/either$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/syntax\/either$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.syntax.embed", "shortDescription" : "", "object" : "tofu\/syntax\/embed$.html", "members_object" : [{"label" : "FPutilsEmbedOps", "tail" : "", "member" : "tofu.syntax.embed.FPutilsEmbedOps", "link" : "tofu\/syntax\/embed$.html#FPutilsEmbedOps[F[_],T[_[_]]]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/syntax\/embed$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/syntax\/embed$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/syntax\/embed$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/syntax\/embed$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/syntax\/embed$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/syntax\/embed$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/syntax\/embed$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/embed$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/embed$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/embed$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/syntax\/embed$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/syntax\/embed$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/syntax\/embed$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/syntax\/embed$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/syntax\/embed$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/syntax\/embed$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/syntax\/embed$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/syntax\/embed$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/syntax\/embed$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.syntax.fire", "shortDescription" : "", "object" : "tofu\/syntax\/fire$.html", "members_object" : [{"label" : "toFireOps", "tail" : "(target: F[A])(tc: Fire[F]): Ops[F, A] { type TypeClassType = tofu.Fire[F] }", "member" : "tofu.Fire.ToFireOps.toFireOps", "link" : "tofu\/syntax\/fire$.html#toFireOps[F[_],A](target:F[A])(implicittc:tofu.Fire[F]):tofu.Fire.Ops[F,A]{typeTypeClassType=tofu.Fire[F]}", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/syntax\/fire$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/syntax\/fire$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/syntax\/fire$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/syntax\/fire$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/syntax\/fire$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/syntax\/fire$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/syntax\/fire$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/fire$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/fire$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/fire$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/syntax\/fire$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/syntax\/fire$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/syntax\/fire$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/syntax\/fire$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/syntax\/fire$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/syntax\/fire$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/syntax\/fire$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/syntax\/fire$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/syntax\/fire$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.syntax.functionK", "shortDescription" : "", "object" : "tofu\/syntax\/functionK$.html", "members_object" : [{"label" : "MakeFunctionK", "tail" : "", "member" : "tofu.syntax.functionK.MakeFunctionK", "link" : "tofu\/syntax\/functionK$.html#MakeFunctionK[F[_],G[_]]extendsF~>G", "kind" : "abstract class"}, {"label" : "funK", "tail" : "(maker: MakeFunctionK[F, G]): ~>[F, G]", "member" : "tofu.syntax.functionK.funK", "link" : "tofu\/syntax\/functionK$.html#funK[F[_],G[_]](maker:tofu.syntax.functionK.MakeFunctionK[F,G]):F~>G", "kind" : "def"}, {"label" : "makeFunctionK", "tail" : "(maker: MakeFunctionK[F, G]): ~>[F, G]", "member" : "tofu.syntax.functionK.makeFunctionK", "link" : "tofu\/syntax\/functionK$.html#makeFunctionK[F[_],G[_]](maker:tofu.syntax.functionK.MakeFunctionK[F,G]):F~>G", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/syntax\/functionK$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/syntax\/functionK$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/syntax\/functionK$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/syntax\/functionK$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/syntax\/functionK$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/syntax\/functionK$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/syntax\/functionK$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/functionK$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/functionK$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/functionK$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/syntax\/functionK$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/syntax\/functionK$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/syntax\/functionK$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/syntax\/functionK$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/syntax\/functionK$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/syntax\/functionK$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/syntax\/functionK$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/syntax\/functionK$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/syntax\/functionK$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"member" : "tofu.syntax.functionK.Arbitrary", "error" : "unsupported entity"}], "kind" : "object"}, {"name" : "tofu.syntax.handle", "shortDescription" : "", "object" : "tofu\/syntax\/handle$.html", "members_object" : [{"label" : "HandleOps", "tail" : "", "member" : "tofu.syntax.handle.HandleOps", "link" : "tofu\/syntax\/handle$.html#HandleOps[F[_],A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/syntax\/handle$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/syntax\/handle$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/syntax\/handle$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/syntax\/handle$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/syntax\/handle$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/syntax\/handle$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/syntax\/handle$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/handle$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/handle$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/handle$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/syntax\/handle$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/syntax\/handle$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/syntax\/handle$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/syntax\/handle$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/syntax\/handle$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/syntax\/handle$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/syntax\/handle$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/syntax\/handle$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/syntax\/handle$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.syntax.lift", "shortDescription" : "", "object" : "tofu\/syntax\/lift$.html", "members_object" : [{"label" : "CatsTagless2LiftSyntax", "tail" : "", "member" : "tofu.syntax.lift.CatsTagless2LiftSyntax", "link" : "tofu\/syntax\/lift$.html#CatsTagless2LiftSyntax[T[_[_],_,_],F[_],A,B]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "CatsTagless1LiftSyntax", "tail" : "", "member" : "tofu.syntax.lift.CatsTagless1LiftSyntax", "link" : "tofu\/syntax\/lift$.html#CatsTagless1LiftSyntax[T[_[_],_],F[_],A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "CatsTaglessLiftSyntax", "tail" : "", "member" : "tofu.syntax.lift.CatsTaglessLiftSyntax", "link" : "tofu\/syntax\/lift$.html#CatsTaglessLiftSyntax[T[_[_]],F[_]]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "SemaphoreLiftSyntax", "tail" : "", "member" : "tofu.syntax.lift.SemaphoreLiftSyntax", "link" : "tofu\/syntax\/lift$.html#SemaphoreLiftSyntax[F[_]]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "DeferredLiftSyntax", "tail" : "", "member" : "tofu.syntax.lift.DeferredLiftSyntax", "link" : "tofu\/syntax\/lift$.html#DeferredLiftSyntax[F[_],A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "RefLiftSyntax", "tail" : "", "member" : "tofu.syntax.lift.RefLiftSyntax", "link" : "tofu\/syntax\/lift$.html#RefLiftSyntax[F[_],A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "MVarLiftSyntax", "tail" : "", "member" : "tofu.syntax.lift.MVarLiftSyntax", "link" : "tofu\/syntax\/lift$.html#MVarLiftSyntax[F[_],A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/syntax\/lift$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/syntax\/lift$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/syntax\/lift$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/syntax\/lift$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/syntax\/lift$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/syntax\/lift$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/syntax\/lift$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/lift$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/lift$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/lift$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/syntax\/lift$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/syntax\/lift$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/syntax\/lift$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/syntax\/lift$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/syntax\/lift$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/syntax\/lift$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/syntax\/lift$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/syntax\/lift$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/syntax\/lift$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.syntax.monadError", "shortDescription" : "", "object" : "tofu\/syntax\/monadError$.html", "members_object" : [{"label" : "MonadErrorEitherTOps", "tail" : "", "member" : "tofu.syntax.monadError.MonadErrorEitherTOps", "link" : "tofu\/syntax\/monadError$.html#MonadErrorEitherTOps[F[_],E,A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "MonadErrorFOps", "tail" : "", "member" : "tofu.syntax.monadError.MonadErrorFOps", "link" : "tofu\/syntax\/monadError$.html#MonadErrorFOps[F[_],A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/syntax\/monadError$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/syntax\/monadError$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/syntax\/monadError$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/syntax\/monadError$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/syntax\/monadError$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/syntax\/monadError$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/syntax\/monadError$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/monadError$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/monadError$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/monadError$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/syntax\/monadError$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/syntax\/monadError$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/syntax\/monadError$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/syntax\/monadError$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/syntax\/monadError$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/syntax\/monadError$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/syntax\/monadError$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/syntax\/monadError$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/syntax\/monadError$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.syntax.monadic", "shortDescription" : "", "object" : "tofu\/syntax\/monadic$.html", "members_object" : [{"label" : "tofuSyntaxFlatMapOps", "tail" : "(fa: F[A])(arg0: FlatMap[F]): FlatMapOps[F, A]", "member" : "tofu.syntax.monadic.tofuSyntaxFlatMapOps", "link" : "tofu\/syntax\/monadic$.html#tofuSyntaxFlatMapOps[F[_],A](fa:F[A])(implicitevidence$3:cats.FlatMap[F]):cats.syntax.FlatMapOps[F,A]", "kind" : "implicit final def"}, {"label" : "tofuSyntaxFlatMapIdOps", "tail" : "(a: A): FlatMapIdOps[A]", "member" : "tofu.syntax.monadic.tofuSyntaxFlatMapIdOps", "link" : "tofu\/syntax\/monadic$.html#tofuSyntaxFlatMapIdOps[A](a:A):cats.syntax.FlatMapIdOps[A]", "kind" : "implicit final def"}, {"label" : "tofuSyntaxIfM", "tail" : "(fa: F[Boolean])(arg0: FlatMap[F]): IfMOps[F]", "member" : "tofu.syntax.monadic.tofuSyntaxIfM", "link" : "tofu\/syntax\/monadic$.html#tofuSyntaxIfM[F[_]](fa:F[Boolean])(implicitevidence$2:cats.FlatMap[F]):cats.syntax.IfMOps[F]", "kind" : "implicit final def"}, {"label" : "tofuSyntaxFlatten", "tail" : "(ffa: F[F[A]])(arg0: FlatMap[F]): FlattenOps[F, A]", "member" : "tofu.syntax.monadic.tofuSyntaxFlatten", "link" : "tofu\/syntax\/monadic$.html#tofuSyntaxFlatten[F[_],A](ffa:F[F[A]])(implicitevidence$1:cats.FlatMap[F]):cats.syntax.FlattenOps[F,A]", "kind" : "implicit final def"}, {"label" : "tofuSyntaxApplyOps", "tail" : "(fa: F[A]): ApplyOps[F, A]", "member" : "tofu.syntax.monadic.tofuSyntaxApplyOps", "link" : "tofu\/syntax\/monadic$.html#tofuSyntaxApplyOps[F[_],A](fa:F[A]):cats.syntax.ApplyOps[F,A]", "kind" : "implicit final def"}, {"label" : "TofuFlatMapOps", "tail" : "", "member" : "tofu.syntax.monadic.TofuFlatMapOps", "link" : "tofu\/syntax\/monadic$.html#TofuFlatMapOps[F[_],C]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "TofuApplyOps", "tail" : "", "member" : "tofu.syntax.monadic.TofuApplyOps", "link" : "tofu\/syntax\/monadic$.html#TofuApplyOps[F[_],C]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "TofuApplyFunc2Ops", "tail" : "", "member" : "tofu.syntax.monadic.TofuApplyFunc2Ops", "link" : "tofu\/syntax\/monadic$.html#TofuApplyFunc2Ops[F[_],A,B,C]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "TofuApplicativeOps", "tail" : "", "member" : "tofu.syntax.monadic.TofuApplicativeOps", "link" : "tofu\/syntax\/monadic$.html#TofuApplicativeOpsextendsAnyVal", "kind" : "implicit final class"}, {"label" : "TofuApplyFuncOps", "tail" : "", "member" : "tofu.syntax.monadic.TofuApplyFuncOps", "link" : "tofu\/syntax\/monadic$.html#TofuApplyFuncOps[F[_],A,B]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "TofuSemigroupalOps", "tail" : "", "member" : "tofu.syntax.monadic.TofuSemigroupalOps", "link" : "tofu\/syntax\/monadic$.html#TofuSemigroupalOps[F[_],A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "TofuFunctorOps", "tail" : "", "member" : "tofu.syntax.monadic.TofuFunctorOps", "link" : "tofu\/syntax\/monadic$.html#TofuFunctorOps[F[_],A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "unit", "tail" : "(F: Applicative[F]): F[Unit]", "member" : "tofu.syntax.monadic.unit", "link" : "tofu\/syntax\/monadic$.html#unit[F[_]](implicitF:cats.Applicative[F]):F[Unit]", "kind" : "def"}, {"label" : "catsSyntaxMonadIdOps", "tail" : "(a: A): MonadIdOps[A]", "member" : "cats.syntax.MonadSyntax.catsSyntaxMonadIdOps", "link" : "tofu\/syntax\/monadic$.html#catsSyntaxMonadIdOps[A](a:A):cats.syntax.MonadIdOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxMonad", "tail" : "(fa: F[A]): MonadOps[F, A]", "member" : "cats.syntax.MonadSyntax.catsSyntaxMonad", "link" : "tofu\/syntax\/monadic$.html#catsSyntaxMonad[F[_],A](fa:F[A]):cats.syntax.MonadOps[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxApplicative", "tail" : "(fa: F[A]): ApplicativeOps[F, A]", "member" : "cats.syntax.ApplicativeSyntax.catsSyntaxApplicative", "link" : "tofu\/syntax\/monadic$.html#catsSyntaxApplicative[F[_],A](fa:F[A]):cats.syntax.ApplicativeOps[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxApplicativeId", "tail" : "(a: A): ApplicativeIdOps[A]", "member" : "cats.syntax.ApplicativeSyntax.catsSyntaxApplicativeId", "link" : "tofu\/syntax\/monadic$.html#catsSyntaxApplicativeId[A](a:A):cats.syntax.ApplicativeIdOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxTuple22Semigroupal", "tail" : "(t22: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14], F[A15], F[A16], F[A17], F[A18], F[A19], F[A20], F[A21])): Tuple22SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple22Semigroupal", "link" : "tofu\/syntax\/monadic$.html#catsSyntaxTuple22Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](t22:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14],F[A15],F[A16],F[A17],F[A18],F[A19],F[A20],F[A21])):cats.syntax.Tuple22SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple21Semigroupal", "tail" : "(t21: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14], F[A15], F[A16], F[A17], F[A18], F[A19], F[A20])): Tuple21SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple21Semigroupal", "link" : "tofu\/syntax\/monadic$.html#catsSyntaxTuple21Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](t21:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14],F[A15],F[A16],F[A17],F[A18],F[A19],F[A20])):cats.syntax.Tuple21SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple20Semigroupal", "tail" : "(t20: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14], F[A15], F[A16], F[A17], F[A18], F[A19])): Tuple20SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple20Semigroupal", "link" : "tofu\/syntax\/monadic$.html#catsSyntaxTuple20Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](t20:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14],F[A15],F[A16],F[A17],F[A18],F[A19])):cats.syntax.Tuple20SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple19Semigroupal", "tail" : "(t19: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14], F[A15], F[A16], F[A17], F[A18])): Tuple19SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple19Semigroupal", "link" : "tofu\/syntax\/monadic$.html#catsSyntaxTuple19Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](t19:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14],F[A15],F[A16],F[A17],F[A18])):cats.syntax.Tuple19SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple18Semigroupal", "tail" : "(t18: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14], F[A15], F[A16], F[A17])): Tuple18SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple18Semigroupal", "link" : "tofu\/syntax\/monadic$.html#catsSyntaxTuple18Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](t18:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14],F[A15],F[A16],F[A17])):cats.syntax.Tuple18SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple17Semigroupal", "tail" : "(t17: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14], F[A15], F[A16])): Tuple17SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple17Semigroupal", "link" : "tofu\/syntax\/monadic$.html#catsSyntaxTuple17Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](t17:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14],F[A15],F[A16])):cats.syntax.Tuple17SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple16Semigroupal", "tail" : "(t16: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14], F[A15])): Tuple16SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple16Semigroupal", "link" : "tofu\/syntax\/monadic$.html#catsSyntaxTuple16Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](t16:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14],F[A15])):cats.syntax.Tuple16SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple15Semigroupal", "tail" : "(t15: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14])): Tuple15SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple15Semigroupal", "link" : "tofu\/syntax\/monadic$.html#catsSyntaxTuple15Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](t15:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14])):cats.syntax.Tuple15SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple14Semigroupal", "tail" : "(t14: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13])): Tuple14SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple14Semigroupal", "link" : "tofu\/syntax\/monadic$.html#catsSyntaxTuple14Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](t14:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13])):cats.syntax.Tuple14SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple13Semigroupal", "tail" : "(t13: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12])): Tuple13SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple13Semigroupal", "link" : "tofu\/syntax\/monadic$.html#catsSyntaxTuple13Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](t13:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12])):cats.syntax.Tuple13SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple12Semigroupal", "tail" : "(t12: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11])): Tuple12SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple12Semigroupal", "link" : "tofu\/syntax\/monadic$.html#catsSyntaxTuple12Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](t12:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11])):cats.syntax.Tuple12SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple11Semigroupal", "tail" : "(t11: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10])): Tuple11SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple11Semigroupal", "link" : "tofu\/syntax\/monadic$.html#catsSyntaxTuple11Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](t11:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10])):cats.syntax.Tuple11SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple10Semigroupal", "tail" : "(t10: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9])): Tuple10SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple10Semigroupal", "link" : "tofu\/syntax\/monadic$.html#catsSyntaxTuple10Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](t10:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9])):cats.syntax.Tuple10SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple9Semigroupal", "tail" : "(t9: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8])): Tuple9SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple9Semigroupal", "link" : "tofu\/syntax\/monadic$.html#catsSyntaxTuple9Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8](t9:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8])):cats.syntax.Tuple9SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple8Semigroupal", "tail" : "(t8: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7])): Tuple8SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple8Semigroupal", "link" : "tofu\/syntax\/monadic$.html#catsSyntaxTuple8Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7](t8:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7])):cats.syntax.Tuple8SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple7Semigroupal", "tail" : "(t7: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6])): Tuple7SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple7Semigroupal", "link" : "tofu\/syntax\/monadic$.html#catsSyntaxTuple7Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6](t7:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6])):cats.syntax.Tuple7SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple6Semigroupal", "tail" : "(t6: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5])): Tuple6SemigroupalOps[F, A0, A1, A2, A3, A4, A5]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple6Semigroupal", "link" : "tofu\/syntax\/monadic$.html#catsSyntaxTuple6Semigroupal[F[_],A0,A1,A2,A3,A4,A5](t6:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5])):cats.syntax.Tuple6SemigroupalOps[F,A0,A1,A2,A3,A4,A5]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple5Semigroupal", "tail" : "(t5: (F[A0], F[A1], F[A2], F[A3], F[A4])): Tuple5SemigroupalOps[F, A0, A1, A2, A3, A4]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple5Semigroupal", "link" : "tofu\/syntax\/monadic$.html#catsSyntaxTuple5Semigroupal[F[_],A0,A1,A2,A3,A4](t5:(F[A0],F[A1],F[A2],F[A3],F[A4])):cats.syntax.Tuple5SemigroupalOps[F,A0,A1,A2,A3,A4]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple4Semigroupal", "tail" : "(t4: (F[A0], F[A1], F[A2], F[A3])): Tuple4SemigroupalOps[F, A0, A1, A2, A3]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple4Semigroupal", "link" : "tofu\/syntax\/monadic$.html#catsSyntaxTuple4Semigroupal[F[_],A0,A1,A2,A3](t4:(F[A0],F[A1],F[A2],F[A3])):cats.syntax.Tuple4SemigroupalOps[F,A0,A1,A2,A3]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple3Semigroupal", "tail" : "(t3: (F[A0], F[A1], F[A2])): Tuple3SemigroupalOps[F, A0, A1, A2]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple3Semigroupal", "link" : "tofu\/syntax\/monadic$.html#catsSyntaxTuple3Semigroupal[F[_],A0,A1,A2](t3:(F[A0],F[A1],F[A2])):cats.syntax.Tuple3SemigroupalOps[F,A0,A1,A2]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple2Semigroupal", "tail" : "(t2: (F[A0], F[A1])): Tuple2SemigroupalOps[F, A0, A1]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple2Semigroupal", "link" : "tofu\/syntax\/monadic$.html#catsSyntaxTuple2Semigroupal[F[_],A0,A1](t2:(F[A0],F[A1])):cats.syntax.Tuple2SemigroupalOps[F,A0,A1]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple1Semigroupal", "tail" : "(t1: (F[A0])): Tuple1SemigroupalOps[F, A0]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple1Semigroupal", "link" : "tofu\/syntax\/monadic$.html#catsSyntaxTuple1Semigroupal[F[_],A0](t1:(F[A0],)):cats.syntax.Tuple1SemigroupalOps[F,A0]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/syntax\/monadic$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/syntax\/monadic$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/syntax\/monadic$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/syntax\/monadic$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/syntax\/monadic$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/syntax\/monadic$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/syntax\/monadic$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/monadic$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/monadic$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/monadic$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/syntax\/monadic$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/syntax\/monadic$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/syntax\/monadic$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/syntax\/monadic$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/syntax\/monadic$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/syntax\/monadic$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/syntax\/monadic$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/syntax\/monadic$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/syntax\/monadic$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.syntax.monoid", "shortDescription" : "", "object" : "tofu\/syntax\/monoid$.html", "members_object" : [{"label" : "TofuSemigroupOps", "tail" : "", "member" : "tofu.syntax.monoid.TofuSemigroupOps", "link" : "tofu\/syntax\/monoid$.html#TofuSemigroupOps[A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "empty", "tail" : "(A: Monoid[A]): A", "member" : "tofu.syntax.monoid.empty", "link" : "tofu\/syntax\/monoid$.html#empty[A](implicitA:cats.Monoid[A]):A", "kind" : "def"}, {"label" : "catsSyntaxSemigroup", "tail" : "(a: A)(arg0: Semigroup[A]): SemigroupOps[A]", "member" : "cats.syntax.SemigroupSyntax.catsSyntaxSemigroup", "link" : "tofu\/syntax\/monoid$.html#catsSyntaxSemigroup[A](a:A)(implicitevidence$1:cats.Semigroup[A]):cats.syntax.SemigroupOps[A]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/syntax\/monoid$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/syntax\/monoid$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/syntax\/monoid$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/syntax\/monoid$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/syntax\/monoid$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/syntax\/monoid$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/syntax\/monoid$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/monoid$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/monoid$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/monoid$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/syntax\/monoid$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/syntax\/monoid$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/syntax\/monoid$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/syntax\/monoid$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/syntax\/monoid$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/syntax\/monoid$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/syntax\/monoid$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/syntax\/monoid$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/syntax\/monoid$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.syntax.monoidalK", "shortDescription" : "", "object" : "tofu\/syntax\/monoidalK$.html", "members_object" : [{"label" : "TofuMonoidalZipWithKTo", "tail" : "", "member" : "tofu.syntax.monoidalK.TofuMonoidalZipWithKTo", "link" : "tofu\/syntax\/monoidalK$.html#TofuMonoidalZipWithKTo[U[_[_]],F[_],H[_]]extendsAnyVal", "kind" : "final class"}, {"label" : "TofuMonoidalFOps", "tail" : "", "member" : "tofu.syntax.monoidalK.TofuMonoidalFOps", "link" : "tofu\/syntax\/monoidalK$.html#TofuMonoidalFOps[U[_[_]],F[_]]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "TofuPointKOps", "tail" : "", "member" : "tofu.syntax.monoidalK.TofuPointKOps", "link" : "tofu\/syntax\/monoidalK$.html#TofuPointKOps[F[_]]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/syntax\/monoidalK$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/syntax\/monoidalK$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/syntax\/monoidalK$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/syntax\/monoidalK$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/syntax\/monoidalK$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/syntax\/monoidalK$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/syntax\/monoidalK$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/monoidalK$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/monoidalK$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/monoidalK$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/syntax\/monoidalK$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/syntax\/monoidalK$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/syntax\/monoidalK$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/syntax\/monoidalK$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/syntax\/monoidalK$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/syntax\/monoidalK$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/syntax\/monoidalK$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/syntax\/monoidalK$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/syntax\/monoidalK$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.syntax.optics", "shortDescription" : "", "object" : "tofu\/syntax\/optics$.html", "members_object" : [{"label" : "OpticOps", "tail" : "", "member" : "tofu.syntax.optics.OpticOps", "link" : "tofu\/syntax\/optics$.html#OpticOps[T[_,_],A,B]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/syntax\/optics$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/syntax\/optics$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/syntax\/optics$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/syntax\/optics$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/syntax\/optics$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/syntax\/optics$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/syntax\/optics$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/optics$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/optics$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/optics$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/syntax\/optics$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/syntax\/optics$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/syntax\/optics$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/syntax\/optics$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/syntax\/optics$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/syntax\/optics$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/syntax\/optics$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/syntax\/optics$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/syntax\/optics$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.syntax.race", "shortDescription" : "", "object" : "tofu\/syntax\/race$.html", "members_object" : [{"label" : "toRaceOps", "tail" : "(target: F[A])(tc: Race[F]): Ops[F, A] { type TypeClassType = tofu.Race[F] }", "member" : "tofu.Race.ToRaceOps.toRaceOps", "link" : "tofu\/syntax\/race$.html#toRaceOps[F[_],A](target:F[A])(implicittc:tofu.Race[F]):tofu.Race.Ops[F,A]{typeTypeClassType=tofu.Race[F]}", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/syntax\/race$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/syntax\/race$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/syntax\/race$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/syntax\/race$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/syntax\/race$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/syntax\/race$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/syntax\/race$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/race$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/race$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/race$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/syntax\/race$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/syntax\/race$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/syntax\/race$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/syntax\/race$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/syntax\/race$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/syntax\/race$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/syntax\/race$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/syntax\/race$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/syntax\/race$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.syntax.raise", "shortDescription" : "", "object" : "tofu\/syntax\/raise$.html", "members_object" : [{"label" : "RaiseOptionApplied", "tail" : "", "member" : "tofu.syntax.raise.RaiseOptionApplied", "link" : "tofu\/syntax\/raise$.html#RaiseOptionApplied[F[_],A]extendsAnyVal", "kind" : "final class"}, {"label" : "RaiseEitherOps", "tail" : "", "member" : "tofu.syntax.raise.RaiseEitherOps", "link" : "tofu\/syntax\/raise$.html#RaiseEitherOps[E,A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "RaiseOptionOps", "tail" : "", "member" : "tofu.syntax.raise.RaiseOptionOps", "link" : "tofu\/syntax\/raise$.html#RaiseOptionOps[A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "RaiseMonadOps", "tail" : "", "member" : "tofu.syntax.raise.RaiseMonadOps", "link" : "tofu\/syntax\/raise$.html#RaiseMonadOps[F[_],A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "RaiseOps", "tail" : "", "member" : "tofu.syntax.raise.RaiseOps", "link" : "tofu\/syntax\/raise$.html#RaiseOps[E]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/syntax\/raise$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/syntax\/raise$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/syntax\/raise$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/syntax\/raise$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/syntax\/raise$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/syntax\/raise$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/syntax\/raise$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/raise$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/raise$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/raise$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/syntax\/raise$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/syntax\/raise$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/syntax\/raise$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/syntax\/raise$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/syntax\/raise$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/syntax\/raise$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/syntax\/raise$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/syntax\/raise$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/syntax\/raise$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.syntax.selective", "shortDescription" : "", "object" : "tofu\/syntax\/selective$.html", "members_object" : [{"label" : "EitherSelectOps", "tail" : "", "member" : "tofu.syntax.selective.EitherSelectOps", "link" : "tofu\/syntax\/selective$.html#EitherSelectOps[F[_],A,B]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "OptionSelectOps", "tail" : "", "member" : "tofu.syntax.selective.OptionSelectOps", "link" : "tofu\/syntax\/selective$.html#OptionSelectOps[F[_],A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "toSelectiveOps", "tail" : "(target: F[A])(tc: Selective[F]): Ops[F, A] { type TypeClassType = tofu.control.Selective[F] }", "member" : "tofu.control.Selective.ToSelectiveOps.toSelectiveOps", "link" : "tofu\/syntax\/selective$.html#toSelectiveOps[F[_],A](target:F[A])(implicittc:tofu.control.Selective[F]):tofu.control.Selective.Ops[F,A]{typeTypeClassType=tofu.control.Selective[F]}", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/syntax\/selective$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/syntax\/selective$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/syntax\/selective$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/syntax\/selective$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/syntax\/selective$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/syntax\/selective$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/syntax\/selective$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/selective$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/selective$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/selective$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/syntax\/selective$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/syntax\/selective$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/syntax\/selective$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/syntax\/selective$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/syntax\/selective$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/syntax\/selective$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/syntax\/selective$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/syntax\/selective$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/syntax\/selective$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.syntax.start", "shortDescription" : "", "object" : "tofu\/syntax\/start$.html", "members_object" : [{"label" : "toStartOps", "tail" : "(target: F[A])(tc: Start[F]): Ops[F, A] { type TypeClassType = tofu.Start[F] }", "member" : "tofu.Start.ToStartOps.toStartOps", "link" : "tofu\/syntax\/start$.html#toStartOps[F[_],A](target:F[A])(implicittc:tofu.Start[F]):tofu.Start.Ops[F,A]{typeTypeClassType=tofu.Start[F]}", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/syntax\/start$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/syntax\/start$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/syntax\/start$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/syntax\/start$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/syntax\/start$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/syntax\/start$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/syntax\/start$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/start$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/start$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/start$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/syntax\/start$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/syntax\/start$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/syntax\/start$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/syntax\/start$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/syntax\/start$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/syntax\/start$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/syntax\/start$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/syntax\/start$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/syntax\/start$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.syntax.timeout", "shortDescription" : "", "object" : "tofu\/syntax\/timeout$.html", "members_object" : [{"label" : "TimeoutAddinitionalOps", "tail" : "", "member" : "tofu.syntax.timeout.TimeoutAddinitionalOps", "link" : "tofu\/syntax\/timeout$.html#TimeoutAddinitionalOps[F[_],A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "toTimeoutOps", "tail" : "(target: F[A])(tc: Timeout[F]): Ops[F, A] { type TypeClassType = tofu.Timeout[F] }", "member" : "tofu.Timeout.ToTimeoutOps.toTimeoutOps", "link" : "tofu\/syntax\/timeout$.html#toTimeoutOps[F[_],A](target:F[A])(implicittc:tofu.Timeout[F]):tofu.Timeout.Ops[F,A]{typeTypeClassType=tofu.Timeout[F]}", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/syntax\/timeout$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/syntax\/timeout$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/syntax\/timeout$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/syntax\/timeout$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/syntax\/timeout$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/syntax\/timeout$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/syntax\/timeout$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/timeout$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/timeout$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/timeout$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/syntax\/timeout$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/syntax\/timeout$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/syntax\/timeout$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/syntax\/timeout$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/syntax\/timeout$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/syntax\/timeout$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/syntax\/timeout$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/syntax\/timeout$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/syntax\/timeout$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.syntax.timer", "shortDescription" : "", "object" : "tofu\/syntax\/timer$.html", "members_object" : [{"label" : "sleep", "tail" : "(duration: FiniteDuration)(timer: Timer[F]): F[Unit]", "member" : "tofu.syntax.timer.sleep", "link" : "tofu\/syntax\/timer$.html#sleep[F[_]](duration:scala.concurrent.duration.FiniteDuration)(implicittimer:cats.effect.Timer[F]):F[Unit]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/syntax\/timer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/syntax\/timer$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/syntax\/timer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/syntax\/timer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/syntax\/timer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/syntax\/timer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/syntax\/timer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/timer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/timer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/timer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/syntax\/timer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/syntax\/timer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/syntax\/timer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/syntax\/timer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/syntax\/timer$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/syntax\/timer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/syntax\/timer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/syntax\/timer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/syntax\/timer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.syntax.traverse", "shortDescription" : "", "object" : "tofu\/syntax\/traverse$.html", "members_object" : [{"label" : "TraverseOps", "tail" : "", "member" : "tofu.syntax.traverse.TraverseOps", "link" : "tofu\/syntax\/traverse$.html#TraverseOps[F[_],A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/syntax\/traverse$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/syntax\/traverse$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/syntax\/traverse$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/syntax\/traverse$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/syntax\/traverse$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/syntax\/traverse$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/syntax\/traverse$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/traverse$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/traverse$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/syntax\/traverse$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/syntax\/traverse$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/syntax\/traverse$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/syntax\/traverse$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/syntax\/traverse$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/syntax\/traverse$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/syntax\/traverse$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/syntax\/traverse$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/syntax\/traverse$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/syntax\/traverse$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "tofu.env" : [{"name" : "tofu.env.Env", "object" : "tofu\/env\/Env$.html", "members_object" : [{"label" : "opt", "tail" : "", "member" : "tofu.env.EnvTraversing.opt", "link" : "tofu\/env\/Env$.html#opt", "kind" : "object"}, {"label" : "whenF", "tail" : "(cond: Env[E, Boolean])(io: => Env[E, _]): Env[E, Unit]", "member" : "tofu.env.EnvFunctions.whenF", "link" : "tofu\/env\/Env$.html#whenF[E](cond:tofu.env.Env[E,Boolean])(io:=>tofu.env.Env[E,_]):tofu.env.Env[E,Unit]", "kind" : "def"}, {"label" : "when", "tail" : "(cond: => Boolean)(io: => Env[E, _]): Env[E, Unit]", "member" : "tofu.env.EnvFunctions.when", "link" : "tofu\/env\/Env$.html#when[E](cond:=>Boolean)(io:=>tofu.env.Env[E,_]):tofu.env.Env[E,Unit]", "kind" : "def"}, {"label" : "tailRecM", "tail" : "(a: A)(f: (A) => Env[E, Either[A, B]]): Env[E, B]", "member" : "tofu.env.EnvFunctions.tailRecM", "link" : "tofu\/env\/Env$.html#tailRecM[E,A,B](a:A)(f:A=>tofu.env.Env[E,Either[A,B]]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "fromCoevalFunc", "tail" : "(fca: (E) => Coeval[A]): Env[E, A]", "member" : "tofu.env.EnvFunctions.fromCoevalFunc", "link" : "tofu\/env\/Env$.html#fromCoevalFunc[E,A](fca:E=>monix.eval.Coeval[A]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "fromCoeval", "tail" : "(ca: Coeval[A]): Env[E, A]", "member" : "tofu.env.EnvFunctions.fromCoeval", "link" : "tofu\/env\/Env$.html#fromCoeval[E,A](ca:monix.eval.Coeval[A]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "fromIOFunc", "tail" : "(fioa: (E) => IO[A]): Env[E, A]", "member" : "tofu.env.EnvFunctions.fromIOFunc", "link" : "tofu\/env\/Env$.html#fromIOFunc[E,A](fioa:E=>cats.effect.IO[A]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "fromIO", "tail" : "(ioa: IO[A]): Env[E, A]", "member" : "tofu.env.EnvFunctions.fromIO", "link" : "tofu\/env\/Env$.html#fromIO[E,A](ioa:cats.effect.IO[A]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "fromEvalFunc", "tail" : "(fea: (E) => Eval[A]): Env[E, A]", "member" : "tofu.env.EnvFunctions.fromEvalFunc", "link" : "tofu\/env\/Env$.html#fromEvalFunc[E,A](fea:E=>cats.Eval[A]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "fromEval", "tail" : "(ea: Eval[A]): Env[E, A]", "member" : "tofu.env.EnvFunctions.fromEval", "link" : "tofu\/env\/Env$.html#fromEval[E,A](ea:cats.Eval[A]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "fromEffectFunc", "tail" : "(ffa: (E) => F[A])(arg0: Effect[F]): Env[E, A]", "member" : "tofu.env.EnvFunctions.fromEffectFunc", "link" : "tofu\/env\/Env$.html#fromEffectFunc[F[_],E,A](ffa:E=>F[A])(implicitevidence$2:cats.effect.Effect[F]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "fromEffect", "tail" : "(fa: F[A])(arg0: Effect[F]): Env[E, A]", "member" : "tofu.env.EnvFunctions.fromEffect", "link" : "tofu\/env\/Env$.html#fromEffect[F[_],E,A](fa:F[A])(implicitevidence$1:cats.effect.Effect[F]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "fromTryFunc", "tail" : "(ft: (E) => Try[A]): Env[E, A]", "member" : "tofu.env.EnvFunctions.fromTryFunc", "link" : "tofu\/env\/Env$.html#fromTryFunc[E,A](ft:E=>scala.util.Try[A]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "fromFuture", "tail" : "(future: Future[A]): Env[E, A]", "member" : "tofu.env.EnvFunctions.fromFuture", "link" : "tofu\/env\/Env$.html#fromFuture[E,A](future:scala.concurrent.Future[A]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(e: Either[Throwable, A]): Env[E, A]", "member" : "tofu.env.EnvFunctions.fromEither", "link" : "tofu\/env\/Env$.html#fromEither[E,A](e:Either[Throwable,A]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[A]): Env[E, A]", "member" : "tofu.env.EnvFunctions.fromTry", "link" : "tofu\/env\/Env$.html#fromTry[E,A](t:scala.util.Try[A]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "fromReaderT", "tail" : "(reader: ReaderT[Task, E, A]): Env[E, A]", "member" : "tofu.env.EnvFunctions.fromReaderT", "link" : "tofu\/env\/Env$.html#fromReaderT[E,A](reader:cats.data.ReaderT[monix.eval.Task,E,A]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "fromFunc", "tail" : "(f: (E) => A): Env[E, A]", "member" : "tofu.env.EnvFunctions.fromFunc", "link" : "tofu\/env\/Env$.html#fromFunc[E,A](f:E=>A):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(e: Env[E, A]): Env[E, Either[Throwable, A]]", "member" : "tofu.env.EnvFunctions.attempt", "link" : "tofu\/env\/Env$.html#attempt[E,A](e:tofu.env.Env[E,A]):tofu.env.Env[E,Either[Throwable,A]]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(throwable: Throwable): Env[E, A]", "member" : "tofu.env.EnvFunctions.raiseError", "link" : "tofu\/env\/Env$.html#raiseError[E,A](throwable:Throwable):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "deferFutureAction", "tail" : "(futAct: (Scheduler) => Future[A]): Env[E, A]", "member" : "tofu.env.EnvFunctions.deferFutureAction", "link" : "tofu\/env\/Env$.html#deferFutureAction[E,A](futAct:monix.execution.Scheduler=>scala.concurrent.Future[A]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "deferFutureContext", "tail" : "(future: (E) => Future[A]): Env[E, A]", "member" : "tofu.env.EnvFunctions.deferFutureContext", "link" : "tofu\/env\/Env$.html#deferFutureContext[E,A](future:E=>scala.concurrent.Future[A]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "deferFuture", "tail" : "(future: => Future[A]): Env[E, A]", "member" : "tofu.env.EnvFunctions.deferFuture", "link" : "tofu\/env\/Env$.html#deferFuture[E,A](future:=>scala.concurrent.Future[A]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "deferTask", "tail" : "(x: => Task[A]): Env[E, A]", "member" : "tofu.env.EnvFunctions.deferTask", "link" : "tofu\/env\/Env$.html#deferTask[E,A](x:=>monix.eval.Task[A]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "defer", "tail" : "(x: => Env[E, A]): Env[E, A]", "member" : "tofu.env.EnvFunctions.defer", "link" : "tofu\/env\/Env$.html#defer[E,A](x:=>tofu.env.Env[E,A]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "delay", "tail" : "(x: => A): Env[E, A]", "member" : "tofu.env.EnvFunctions.delay", "link" : "tofu\/env\/Env$.html#delay[E,A](x:=>A):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "fromTask", "tail" : "(task: Task[A]): Env[E, A]", "member" : "tofu.env.EnvFunctions.fromTask", "link" : "tofu\/env\/Env$.html#fromTask[E,A](task:monix.eval.Task[A]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "sleep", "tail" : "(duration: FiniteDuration): Env[E, Unit]", "member" : "tofu.env.EnvFunctions.sleep", "link" : "tofu\/env\/Env$.html#sleep[E](duration:scala.concurrent.duration.FiniteDuration):tofu.env.Env[E,Unit]", "kind" : "def"}, {"label" : "shift", "tail" : "(ec: ExecutionContext): Env[E, Unit]", "member" : "tofu.env.EnvFunctions.shift", "link" : "tofu\/env\/Env$.html#shift[E](ec:scala.concurrent.ExecutionContext):tofu.env.Env[E,Unit]", "kind" : "def"}, {"label" : "shift", "tail" : "(): Env[E, Unit]", "member" : "tofu.env.EnvFunctions.shift", "link" : "tofu\/env\/Env$.html#shift[E]:tofu.env.Env[E,Unit]", "kind" : "def"}, {"label" : "millis", "tail" : "(): Env[E, Long]", "member" : "tofu.env.EnvFunctions.millis", "link" : "tofu\/env\/Env$.html#millis[E]:tofu.env.Env[E,Long]", "kind" : "def"}, {"label" : "scheduler", "tail" : "(): Env[E, Scheduler]", "member" : "tofu.env.EnvFunctions.scheduler", "link" : "tofu\/env\/Env$.html#scheduler[E]:tofu.env.Env[E,monix.execution.Scheduler]", "kind" : "def"}, {"label" : "unit", "tail" : "(): Env[E, Unit]", "member" : "tofu.env.EnvFunctions.unit", "link" : "tofu\/env\/Env$.html#unit[E]:tofu.env.Env[E,Unit]", "kind" : "def"}, {"label" : "withContextDelay", "tail" : "(f: (E) => A): Env[E, A]", "member" : "tofu.env.EnvFunctions.withContextDelay", "link" : "tofu\/env\/Env$.html#withContextDelay[E,A](f:E=>A):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "withContextFork", "tail" : "(f: (E) => A): Env[E, A]", "member" : "tofu.env.EnvFunctions.withContextFork", "link" : "tofu\/env\/Env$.html#withContextFork[E,A](f:E=>A):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "withContext", "tail" : "(f: (E) => Env[E, A]): Env[E, A]", "member" : "tofu.env.EnvFunctions.withContext", "link" : "tofu\/env\/Env$.html#withContext[E,A](f:E=>tofu.env.Env[E,A]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "withContextNow", "tail" : "(f: (E) => A): Env[E, A]", "member" : "tofu.env.EnvFunctions.withContextNow", "link" : "tofu\/env\/Env$.html#withContextNow[E,A](f:E=>A):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "context", "tail" : "(): Env[E, E]", "member" : "tofu.env.EnvFunctions.context", "link" : "tofu\/env\/Env$.html#context[E]:tofu.env.Env[E,E]", "kind" : "def"}, {"label" : "pure", "tail" : "(x: A): Env[E, A]", "member" : "tofu.env.EnvFunctions.pure", "link" : "tofu\/env\/Env$.html#pure[E,A](x:A):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "later", "tail" : "(x: => A): Env[E, A]", "member" : "tofu.env.EnvFunctions.later", "link" : "tofu\/env\/Env$.html#later[E,A](x:=>A):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "apply", "tail" : "(f: (E) => Task[A]): Env[E, A]", "member" : "tofu.env.EnvFunctions.apply", "link" : "tofu\/env\/Env$.html#apply[E,A](f:E=>monix.eval.Task[A]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "toEnvOptionOps", "tail" : "(env: Env[E, Option[A]]): EnvOptionOps[E, A]", "member" : "tofu.env.EnvSyntax.toEnvOptionOps", "link" : "tofu\/env\/Env$.html#toEnvOptionOps[E,A](env:tofu.env.Env[E,Option[A]]):tofu.env.EnvOptionOps[E,A]", "kind" : "implicit def"}, {"label" : "raceMany", "tail" : "(tta: TraversableOnce[Env[E, A]]): Env[E, A]", "member" : "tofu.env.EnvRacing.raceMany", "link" : "tofu\/env\/Env$.html#raceMany[E,A](tta:TraversableOnce[tofu.env.Env[E,A]]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "race", "tail" : "(ta: Env[E, A], tb: Env[E, B]): Env[E, Either[A, B]]", "member" : "tofu.env.EnvRacing.race", "link" : "tofu\/env\/Env$.html#race[E,A,B](ta:tofu.env.Env[E,A],tb:tofu.env.Env[E,B]):tofu.env.Env[E,Either[A,B]]", "kind" : "def"}, {"label" : "racePair", "tail" : "(ta: Env[E, A], tb: Env[E, B]): Env[E, Either[(A, Fiber[[β$1$]Env[E, β$1$], B]), (Fiber[[β$2$]Env[E, β$2$], A], B)]]", "member" : "tofu.env.EnvRacing.racePair", "link" : "tofu\/env\/Env$.html#racePair[E,A,B](ta:tofu.env.Env[E,A],tb:tofu.env.Env[E,B]):tofu.env.Env[E,Either[(A,cats.effect.Fiber[[β$1$]tofu.env.Env[E,β$1$],B]),(cats.effect.Fiber[[β$2$]tofu.env.Env[E,β$2$],A],B)]]", "kind" : "def"}, {"label" : "Racing", "tail" : "", "member" : "tofu.env.EnvRacing.Racing", "link" : "tofu\/env\/Env$.html#Racing[F[_],A,B]=Either[(A,cats.effect.Fiber[F,B]),(cats.effect.Fiber[F,A],B)]", "kind" : "type"}, {"label" : "wanderUnordered", "tail" : "(in: M[A])(f: (A) => Env[E, B]): Env[E, List[B]]", "member" : "tofu.env.EnvTraversing.wanderUnordered", "link" : "tofu\/env\/Env$.html#wanderUnordered[E,A,B,M[X]<:Iterable[X]](in:M[A])(f:A=>tofu.env.Env[E,B]):tofu.env.Env[E,List[B]]", "kind" : "def"}, {"label" : "gatherUnordered", "tail" : "(in: Iterable[Env[E, A]]): Env[E, List[A]]", "member" : "tofu.env.EnvTraversing.gatherUnordered", "link" : "tofu\/env\/Env$.html#gatherUnordered[E,A](in:Iterable[tofu.env.Env[E,A]]):tofu.env.Env[E,List[A]]", "kind" : "def"}, {"label" : "wander", "tail" : "(in: M[A])(f: (A) => Env[E, B])(cbf: BuildFrom[M[A], B, M[B]]): Env[E, M[B]]", "member" : "tofu.env.EnvTraversing.wander", "link" : "tofu\/env\/Env$.html#wander[E,A,B,M[X]<:Iterable[X]](in:M[A])(f:A=>tofu.env.Env[E,B])(implicitcbf:monix.execution.compat.BuildFrom[M[A],B,M[B]]):tofu.env.Env[E,M[B]]", "kind" : "def"}, {"label" : "gather", "tail" : "(in: M[Env[E, A]])(cbf: BuildFrom[M[Env[E, A]], A, M[A]]): Env[E, M[A]]", "member" : "tofu.env.EnvTraversing.gather", "link" : "tofu\/env\/Env$.html#gather[E,A,M[X]<:Iterable[X]](in:M[tofu.env.Env[E,A]])(implicitcbf:monix.execution.compat.BuildFrom[M[tofu.env.Env[E,A]],A,M[A]]):tofu.env.Env[E,M[A]]", "kind" : "def"}, {"label" : "traverse", "tail" : "(in: M[A])(f: (A) => Env[E, B])(cbf: BuildFrom[M[A], B, M[B]]): Env[E, M[B]]", "member" : "tofu.env.EnvTraversing.traverse", "link" : "tofu\/env\/Env$.html#traverse[E,A,B,M[X]<:Iterable[X]](in:M[A])(f:A=>tofu.env.Env[E,B])(implicitcbf:monix.execution.compat.BuildFrom[M[A],B,M[B]]):tofu.env.Env[E,M[B]]", "kind" : "def"}, {"label" : "sequence", "tail" : "(in: M[Env[E, A]])(cbf: BuildFrom[M[Env[E, A]], A, M[A]]): Env[E, M[A]]", "member" : "tofu.env.EnvTraversing.sequence", "link" : "tofu\/env\/Env$.html#sequence[E,A,M[X]<:Iterable[X]](in:M[tofu.env.Env[E,A]])(implicitcbf:monix.execution.compat.BuildFrom[M[tofu.env.Env[E,A]],A,M[A]]):tofu.env.Env[E,M[A]]", "kind" : "def"}, {"label" : "parZip6", "tail" : "(fa1: Env[E, A1], fa2: Env[E, A2], fa3: Env[E, A3], fa4: Env[E, A4], fa5: Env[E, A5], fa6: Env[E, A6]): Env[E, (A1, A2, A3, A4, A5, A6)]", "member" : "tofu.env.EnvProducts.parZip6", "link" : "tofu\/env\/Env$.html#parZip6[E,A1,A2,A3,A4,A5,A6](fa1:tofu.env.Env[E,A1],fa2:tofu.env.Env[E,A2],fa3:tofu.env.Env[E,A3],fa4:tofu.env.Env[E,A4],fa5:tofu.env.Env[E,A5],fa6:tofu.env.Env[E,A6]):tofu.env.Env[E,(A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "parZip5", "tail" : "(fa1: Env[E, A1], fa2: Env[E, A2], fa3: Env[E, A3], fa4: Env[E, A4], fa5: Env[E, A5]): Env[E, (A1, A2, A3, A4, A5)]", "member" : "tofu.env.EnvProducts.parZip5", "link" : "tofu\/env\/Env$.html#parZip5[E,A1,A2,A3,A4,A5](fa1:tofu.env.Env[E,A1],fa2:tofu.env.Env[E,A2],fa3:tofu.env.Env[E,A3],fa4:tofu.env.Env[E,A4],fa5:tofu.env.Env[E,A5]):tofu.env.Env[E,(A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "parZip4", "tail" : "(fa1: Env[E, A1], fa2: Env[E, A2], fa3: Env[E, A3], fa4: Env[E, A4]): Env[E, (A1, A2, A3, A4)]", "member" : "tofu.env.EnvProducts.parZip4", "link" : "tofu\/env\/Env$.html#parZip4[E,A1,A2,A3,A4](fa1:tofu.env.Env[E,A1],fa2:tofu.env.Env[E,A2],fa3:tofu.env.Env[E,A3],fa4:tofu.env.Env[E,A4]):tofu.env.Env[E,(A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "parZip3", "tail" : "(fa1: Env[E, A1], fa2: Env[E, A2], fa3: Env[E, A3]): Env[E, (A1, A2, A3)]", "member" : "tofu.env.EnvProducts.parZip3", "link" : "tofu\/env\/Env$.html#parZip3[E,A1,A2,A3](fa1:tofu.env.Env[E,A1],fa2:tofu.env.Env[E,A2],fa3:tofu.env.Env[E,A3]):tofu.env.Env[E,(A1,A2,A3)]", "kind" : "def"}, {"label" : "parZip2", "tail" : "(fa1: Env[E, A1], fa2: Env[E, A2]): Env[E, (A1, A2)]", "member" : "tofu.env.EnvProducts.parZip2", "link" : "tofu\/env\/Env$.html#parZip2[E,A1,A2](fa1:tofu.env.Env[E,A1],fa2:tofu.env.Env[E,A2]):tofu.env.Env[E,(A1,A2)]", "kind" : "def"}, {"label" : "map6", "tail" : "(fa1: Env[E, A1], fa2: Env[E, A2], fa3: Env[E, A3], fa4: Env[E, A4], fa5: Env[E, A5], fa6: Env[E, A6])(f: (A1, A2, A3, A4, A5, A6) => R): Env[E, R]", "member" : "tofu.env.EnvProducts.map6", "link" : "tofu\/env\/Env$.html#map6[E,A1,A2,A3,A4,A5,A6,R](fa1:tofu.env.Env[E,A1],fa2:tofu.env.Env[E,A2],fa3:tofu.env.Env[E,A3],fa4:tofu.env.Env[E,A4],fa5:tofu.env.Env[E,A5],fa6:tofu.env.Env[E,A6])(f:(A1,A2,A3,A4,A5,A6)=>R):tofu.env.Env[E,R]", "kind" : "def"}, {"label" : "map5", "tail" : "(fa1: Env[E, A1], fa2: Env[E, A2], fa3: Env[E, A3], fa4: Env[E, A4], fa5: Env[E, A5])(f: (A1, A2, A3, A4, A5) => R): Env[E, R]", "member" : "tofu.env.EnvProducts.map5", "link" : "tofu\/env\/Env$.html#map5[E,A1,A2,A3,A4,A5,R](fa1:tofu.env.Env[E,A1],fa2:tofu.env.Env[E,A2],fa3:tofu.env.Env[E,A3],fa4:tofu.env.Env[E,A4],fa5:tofu.env.Env[E,A5])(f:(A1,A2,A3,A4,A5)=>R):tofu.env.Env[E,R]", "kind" : "def"}, {"label" : "map4", "tail" : "(fa1: Env[E, A1], fa2: Env[E, A2], fa3: Env[E, A3], fa4: Env[E, A4])(f: (A1, A2, A3, A4) => R): Env[E, R]", "member" : "tofu.env.EnvProducts.map4", "link" : "tofu\/env\/Env$.html#map4[E,A1,A2,A3,A4,R](fa1:tofu.env.Env[E,A1],fa2:tofu.env.Env[E,A2],fa3:tofu.env.Env[E,A3],fa4:tofu.env.Env[E,A4])(f:(A1,A2,A3,A4)=>R):tofu.env.Env[E,R]", "kind" : "def"}, {"label" : "map3", "tail" : "(fa1: Env[E, A1], fa2: Env[E, A2], fa3: Env[E, A3])(f: (A1, A2, A3) => R): Env[E, R]", "member" : "tofu.env.EnvProducts.map3", "link" : "tofu\/env\/Env$.html#map3[E,A1,A2,A3,R](fa1:tofu.env.Env[E,A1],fa2:tofu.env.Env[E,A2],fa3:tofu.env.Env[E,A3])(f:(A1,A2,A3)=>R):tofu.env.Env[E,R]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa1: Env[E, A1], fa2: Env[E, A2])(f: (A1, A2) => R): Env[E, R]", "member" : "tofu.env.EnvProducts.map2", "link" : "tofu\/env\/Env$.html#map2[E,A1,A2,R](fa1:tofu.env.Env[E,A1],fa2:tofu.env.Env[E,A2])(f:(A1,A2)=>R):tofu.env.Env[E,R]", "kind" : "def"}, {"label" : "parMap6", "tail" : "(fa1: Env[E, A1], fa2: Env[E, A2], fa3: Env[E, A3], fa4: Env[E, A4], fa5: Env[E, A5], fa6: Env[E, A6])(f: (A1, A2, A3, A4, A5, A6) => R): Env[E, R]", "member" : "tofu.env.EnvProducts.parMap6", "link" : "tofu\/env\/Env$.html#parMap6[E,A1,A2,A3,A4,A5,A6,R](fa1:tofu.env.Env[E,A1],fa2:tofu.env.Env[E,A2],fa3:tofu.env.Env[E,A3],fa4:tofu.env.Env[E,A4],fa5:tofu.env.Env[E,A5],fa6:tofu.env.Env[E,A6])(f:(A1,A2,A3,A4,A5,A6)=>R):tofu.env.Env[E,R]", "kind" : "def"}, {"label" : "parMap5", "tail" : "(fa1: Env[E, A1], fa2: Env[E, A2], fa3: Env[E, A3], fa4: Env[E, A4], fa5: Env[E, A5])(f: (A1, A2, A3, A4, A5) => R): Env[E, R]", "member" : "tofu.env.EnvProducts.parMap5", "link" : "tofu\/env\/Env$.html#parMap5[E,A1,A2,A3,A4,A5,R](fa1:tofu.env.Env[E,A1],fa2:tofu.env.Env[E,A2],fa3:tofu.env.Env[E,A3],fa4:tofu.env.Env[E,A4],fa5:tofu.env.Env[E,A5])(f:(A1,A2,A3,A4,A5)=>R):tofu.env.Env[E,R]", "kind" : "def"}, {"label" : "parMap4", "tail" : "(fa1: Env[E, A1], fa2: Env[E, A2], fa3: Env[E, A3], fa4: Env[E, A4])(f: (A1, A2, A3, A4) => R): Env[E, R]", "member" : "tofu.env.EnvProducts.parMap4", "link" : "tofu\/env\/Env$.html#parMap4[E,A1,A2,A3,A4,R](fa1:tofu.env.Env[E,A1],fa2:tofu.env.Env[E,A2],fa3:tofu.env.Env[E,A3],fa4:tofu.env.Env[E,A4])(f:(A1,A2,A3,A4)=>R):tofu.env.Env[E,R]", "kind" : "def"}, {"label" : "parMap3", "tail" : "(fa1: Env[E, A1], fa2: Env[E, A2], fa3: Env[E, A3])(f: (A1, A2, A3) => R): Env[E, R]", "member" : "tofu.env.EnvProducts.parMap3", "link" : "tofu\/env\/Env$.html#parMap3[E,A1,A2,A3,R](fa1:tofu.env.Env[E,A1],fa2:tofu.env.Env[E,A2],fa3:tofu.env.Env[E,A3])(f:(A1,A2,A3)=>R):tofu.env.Env[E,R]", "kind" : "def"}, {"label" : "parMap2", "tail" : "(fa1: Env[E, A1], fa2: Env[E, A2])(f: (A1, A2) => R): Env[E, R]", "member" : "tofu.env.EnvProducts.parMap2", "link" : "tofu\/env\/Env$.html#parMap2[E,A1,A2,R](fa1:tofu.env.Env[E,A1],fa2:tofu.env.Env[E,A2])(f:(A1,A2)=>R):tofu.env.Env[E,R]", "kind" : "def"}, {"label" : "envUnsafeExecFuture", "tail" : "(sc: Scheduler): UnsafeExecFuture[[β$13$]Env[E, β$13$]]", "member" : "tofu.env.EnvInstances.envUnsafeExecFuture", "link" : "tofu\/env\/Env$.html#envUnsafeExecFuture[E](implicitsc:monix.execution.Scheduler):tofu.lift.UnsafeExecFuture[[β$13$]tofu.env.Env[E,β$13$]]", "kind" : "def"}, {"label" : "envUnliftTask", "tail" : "(): Unlift[Task, [β$10$]Env[E, β$10$]]", "member" : "tofu.env.EnvInstances.envUnliftTask", "link" : "tofu\/env\/Env$.html#envUnliftTask[E]:tofu.lift.Unlift[monix.eval.Task,[β$10$]tofu.env.Env[E,β$10$]]", "kind" : "implicit def"}, {"label" : "envProfuctorInstance", "tail" : ": Profunctor[Env] with ArrowChoice[Env]", "member" : "tofu.env.EnvInstances.envProfuctorInstance", "link" : "tofu\/env\/Env$.html#envProfuctorInstance:cats.arrow.Profunctor[tofu.env.Env]withcats.arrow.ArrowChoice[tofu.env.Env]", "kind" : "implicit val"}, {"label" : "envParallelInstance", "tail" : "(): Parallel[[β$8$]Env[E, β$8$]]", "member" : "tofu.env.EnvInstances.envParallelInstance", "link" : "tofu\/env\/Env$.html#envParallelInstance[E]:cats.Parallel[[β$8$]tofu.env.Env[E,β$8$]]", "kind" : "implicit def"}, {"label" : "envInstance", "tail" : "(): EnvFunctorstance[E]", "member" : "tofu.env.EnvInstances.envInstance", "link" : "tofu\/env\/Env$.html#envInstance[E]:tofu.env.EnvFunctorstance[E]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/env\/Env$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/env\/Env$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/env\/Env$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/env\/Env$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/env\/Env$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/env\/Env$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/env\/Env$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/env\/Env$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/env\/Env$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/env\/Env$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/env\/Env$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/env\/Env$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/env\/Env$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/env\/Env$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/env\/Env$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/env\/Env$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/env\/Env$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/env\/Env$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/env\/Env$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/env\/Env.html", "kind" : "trait", "members_trait" : [{"label" : "toReaderT", "tail" : "(): ReaderT[Task, E, A]", "member" : "tofu.env.Env.toReaderT", "link" : "tofu\/env\/Env.html#toReaderT:cats.data.ReaderT[monix.eval.Task,E,A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "choice", "tail" : "(f: Env[E1, A]): Env[Either[E, E1], A]", "member" : "tofu.env.Env.choice", "link" : "tofu\/env\/Env.html#choice[E1](f:tofu.env.Env[E1,A@scala.annotation.unchecked.uncheckedVariance]):tofu.env.Env[Either[E,E1],A]", "kind" : "def"}, {"label" : "right", "tail" : "(): Env[Either[B, E], Either[B, A]]", "member" : "tofu.env.Env.right", "link" : "tofu\/env\/Env.html#right[B]:tofu.env.Env[Either[B,E],Either[B,A]]", "kind" : "def"}, {"label" : "left", "tail" : "(): Env[Either[E, B], Either[A, B]]", "member" : "tofu.env.Env.left", "link" : "tofu\/env\/Env.html#left[B]:tofu.env.Env[Either[E,B],Either[A,B]]", "kind" : "def"}, {"label" : "split", "tail" : "(g: Env[B, C]): Env[(E, B), (A, C)]", "member" : "tofu.env.Env.split", "link" : "tofu\/env\/Env.html#split[B,C](g:tofu.env.Env[B,C]):tofu.env.Env[(E,B),(A,C)]", "kind" : "def"}, {"label" : "dimap", "tail" : "(f: (B) => E)(g: (A) => C): Env[B, C]", "member" : "tofu.env.Env.dimap", "link" : "tofu\/env\/Env.html#dimap[B,C](f:B=>E)(g:A=>C):tofu.env.Env[B,C]", "kind" : "def"}, {"label" : "second", "tail" : "(): Env[(B, E), (B, A)]", "member" : "tofu.env.Env.second", "link" : "tofu\/env\/Env.html#second[B]:tofu.env.Env[(B,E),(B,A)]", "kind" : "def"}, {"label" : "first", "tail" : "(): Env[(E, B), (A, B)]", "member" : "tofu.env.Env.first", "link" : "tofu\/env\/Env.html#first[B]:tofu.env.Env[(E,B),(A,B)]", "kind" : "def"}, {"label" : "choose", "tail" : "(g: Env[B, C]): Env[Either[E, B], Either[A, C]]", "member" : "tofu.env.Env.choose", "link" : "tofu\/env\/Env.html#choose[B,C](g:tofu.env.Env[B,C]):tofu.env.Env[Either[E,B],Either[A,C]]", "kind" : "def"}, {"label" : "startAndForget", "tail" : "(): Env[E, Unit]", "member" : "tofu.env.Env.startAndForget", "link" : "tofu\/env\/Env.html#startAndForget:tofu.env.Env[E,Unit]", "kind" : "def"}, {"label" : "forkAndForget", "tail" : "(): Env[E, Unit]", "member" : "tofu.env.Env.forkAndForget", "link" : "tofu\/env\/Env.html#forkAndForget:tofu.env.Env[E,Unit]", "kind" : "def"}, {"label" : "fork", "tail" : "(): Env[E, Fiber[[β$1$]Env[E, β$1$], A]]", "member" : "tofu.env.Env.fork", "link" : "tofu\/env\/Env.html#fork:tofu.env.Env[E,cats.effect.Fiber[[β$1$]tofu.env.Env[E,β$1$],A@scala.annotation.unchecked.uncheckedVariance]]", "kind" : "def"}, {"label" : "executeOn", "tail" : "(s: Scheduler, forceAsync: Boolean): Env[E, A]", "member" : "tofu.env.Env.executeOn", "link" : "tofu\/env\/Env.html#executeOn(s:monix.execution.Scheduler,forceAsync:Boolean):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "executeAsync", "tail" : "(): Env[E, A]", "member" : "tofu.env.Env.executeAsync", "link" : "tofu\/env\/Env.html#executeAsync:tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "asyncBoundary", "tail" : "(s: Scheduler): Env[E, A]", "member" : "tofu.env.Env.asyncBoundary", "link" : "tofu\/env\/Env.html#asyncBoundary(s:monix.execution.Scheduler):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "asyncBoundary", "tail" : "(): Env[E, A]", "member" : "tofu.env.Env.asyncBoundary", "link" : "tofu\/env\/Env.html#asyncBoundary:tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "uncancelable", "tail" : "(): Env[E, A]", "member" : "tofu.env.Env.uncancelable", "link" : "tofu\/env\/Env.html#uncancelable:tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "cancelable", "tail" : "(): Env[E, A]", "member" : "tofu.env.Env.cancelable", "link" : "tofu\/env\/Env.html#cancelable:tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "doOnFinish", "tail" : "(f: (Option[Throwable]) => Env[E, Unit]): Env[E, A]", "member" : "tofu.env.Env.doOnFinish", "link" : "tofu\/env\/Env.html#doOnFinish(f:Option[Throwable]=>tofu.env.Env[E,Unit]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "bracketСase", "tail" : "(use: (A) => Env[E, B])(release: (A, ExitCase[Throwable]) => Env[E, Unit]): Env[E, B]", "member" : "tofu.env.Env.bracketСase", "link" : "tofu\/env\/Env.html#bracketСase[B](use:A=>tofu.env.Env[E,B])(release:(A,cats.effect.ExitCase[Throwable])=>tofu.env.Env[E,Unit]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "bracketE", "tail" : "(use: (A) => Env[E, B])(release: (A, Either[Option[Throwable], B]) => Env[E, Unit]): Env[E, B]", "member" : "tofu.env.Env.bracketE", "link" : "tofu\/env\/Env.html#bracketE[B](use:A=>tofu.env.Env[E,B])(release:(A,Either[Option[Throwable],B])=>tofu.env.Env[E,Unit]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "bracket", "tail" : "(use: (A) => Env[E, B])(release: (A) => Env[E, Unit]): Env[E, B]", "member" : "tofu.env.Env.bracket", "link" : "tofu\/env\/Env.html#bracket[B](use:A=>tofu.env.Env[E,B])(release:A=>tofu.env.Env[E,Unit]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "start", "tail" : "(): Env[E, Fiber[[β$0$]Env[E, β$0$], A]]", "member" : "tofu.env.Env.start", "link" : "tofu\/env\/Env.html#start:tofu.env.Env[E,cats.effect.Fiber[[β$0$]tofu.env.Env[E,β$0$],A@scala.annotation.unchecked.uncheckedVariance]]", "kind" : "def"}, {"label" : "onCancelRaiseError", "tail" : "(e: Throwable): Env[E, A]", "member" : "tofu.env.Env.onCancelRaiseError", "link" : "tofu\/env\/Env.html#onCancelRaiseError(e:Throwable):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "doOnCancelT", "tail" : "(callback: Task[Unit]): Env[E, A]", "member" : "tofu.env.Env.doOnCancelT", "link" : "tofu\/env\/Env.html#doOnCancelT(callback:monix.eval.Task[Unit]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "doOnCancel", "tail" : "(callback: Env[E, Unit]): Env[E, A]", "member" : "tofu.env.Env.doOnCancel", "link" : "tofu\/env\/Env.html#doOnCancel(callback:tofu.env.Env[E,Unit]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "timed", "tail" : "(): Env[E, (FiniteDuration, A)]", "member" : "tofu.env.Env.timed", "link" : "tofu\/env\/Env.html#timed:tofu.env.Env[E,(scala.concurrent.duration.FiniteDuration,A)]", "kind" : "def"}, {"label" : "timeoutTo", "tail" : "(dur: FiniteDuration, backup: Env[E, B]): Env[E, B]", "member" : "tofu.env.Env.timeoutTo", "link" : "tofu\/env\/Env.html#timeoutTo[B>:A](dur:scala.concurrent.duration.FiniteDuration,backup:tofu.env.Env[E,B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "timeoutToTask", "tail" : "(dur: FiniteDuration, backup: Task[B]): Env[E, B]", "member" : "tofu.env.Env.timeoutToTask", "link" : "tofu\/env\/Env.html#timeoutToTask[B>:A](dur:scala.concurrent.duration.FiniteDuration,backup:monix.eval.Task[B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "timeout", "tail" : "(dur: FiniteDuration): Env[E, A]", "member" : "tofu.env.Env.timeout", "link" : "tofu\/env\/Env.html#timeout(dur:scala.concurrent.duration.FiniteDuration):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "delayResult", "tail" : "(dur: FiniteDuration): Env[E, A]", "member" : "tofu.env.Env.delayResult", "link" : "tofu\/env\/Env.html#delayResult(dur:scala.concurrent.duration.FiniteDuration):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "delayExcecution", "tail" : "(dur: FiniteDuration): Env[E, A]", "member" : "tofu.env.Env.delayExcecution", "link" : "tofu\/env\/Env.html#delayExcecution(dur:scala.concurrent.duration.FiniteDuration):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "memo", "tail" : "(): Env[E, Env[E, A]]", "member" : "tofu.env.Env.memo", "link" : "tofu\/env\/Env.html#memo:tofu.env.Env[E,tofu.env.Env[E,A]]", "kind" : "def"}, {"label" : "memoSuccess", "tail" : "(): Env[E, Env[E, A]]", "member" : "tofu.env.Env.memoSuccess", "link" : "tofu\/env\/Env.html#memoSuccess:tofu.env.Env[E,tofu.env.Env[E,A]]", "kind" : "def"}, {"label" : "memoize", "tail" : "(): Env[E, A]", "member" : "tofu.env.Env.memoize", "link" : "tofu\/env\/Env.html#memoize:tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "memoizeOnSuccess", "tail" : "(): Env[E, A]", "member" : "tofu.env.Env.memoizeOnSuccess", "link" : "tofu\/env\/Env.html#memoizeOnSuccess:tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "memoizeTaskOnSuccess", "tail" : "(): Env[E, A]", "member" : "tofu.env.Env.memoizeTaskOnSuccess", "link" : "tofu\/env\/Env.html#memoizeTaskOnSuccess:tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "memoizeTask", "tail" : "(): Env[E, A]", "member" : "tofu.env.Env.memoizeTask", "link" : "tofu\/env\/Env.html#memoizeTask:tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "ensureOrCtx", "tail" : "(error: (E, A) => Throwable)(predicate: (A) => Boolean): Env[E, A]", "member" : "tofu.env.Env.ensureOrCtx", "link" : "tofu\/env\/Env.html#ensureOrCtx(error:(E,A)=>Throwable)(predicate:A=>Boolean):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "ensureCtx", "tail" : "(error: (E) => Throwable)(predicate: (A) => Boolean): Env[E, A]", "member" : "tofu.env.Env.ensureCtx", "link" : "tofu\/env\/Env.html#ensureCtx(error:E=>Throwable)(predicate:A=>Boolean):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "ensureOr", "tail" : "(error: (A) => Throwable)(predicate: (A) => Boolean): Env[E, A]", "member" : "tofu.env.Env.ensureOr", "link" : "tofu\/env\/Env.html#ensureOr(error:A=>Throwable)(predicate:A=>Boolean):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "ensure", "tail" : "(error: => Throwable)(predicate: (A) => Boolean): Env[E, A]", "member" : "tofu.env.Env.ensure", "link" : "tofu\/env\/Env.html#ensure(error:=>Throwable)(predicate:A=>Boolean):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(): Env[E, Either[Throwable, A]]", "member" : "tofu.env.Env.attempt", "link" : "tofu\/env\/Env.html#attempt:tofu.env.Env[E,Either[Throwable,A]]", "kind" : "def"}, {"label" : "dematerialize", "tail" : "(_ev: <:<[A, Try[B]]): Env[E, B]", "member" : "tofu.env.Env.dematerialize", "link" : "tofu\/env\/Env.html#dematerialize[B](implicit_ev:A<:<scala.util.Try[B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "materialize", "tail" : "(): Env[E, Try[A]]", "member" : "tofu.env.Env.materialize", "link" : "tofu\/env\/Env.html#materialize:tofu.env.Env[E,scala.util.Try[A]]", "kind" : "def"}, {"label" : "failed", "tail" : "(): Env[E, Throwable]", "member" : "tofu.env.Env.failed", "link" : "tofu\/env\/Env.html#failed:tofu.env.Env[E,Throwable]", "kind" : "def"}, {"label" : "onErrorFallbackTask", "tail" : "(that: Task[B]): Env[E, B]", "member" : "tofu.env.Env.onErrorFallbackTask", "link" : "tofu\/env\/Env.html#onErrorFallbackTask[B>:A](that:monix.eval.Task[B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "onErrorFallbackTo", "tail" : "(that: Env[E, B]): Env[E, B]", "member" : "tofu.env.Env.onErrorFallbackTo", "link" : "tofu\/env\/Env.html#onErrorFallbackTo[B>:A](that:tofu.env.Env[E,B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "onErrorRestartLoopTask", "tail" : "(initial: S)(f: (Throwable, S, (S) => Task[B]) => Task[B]): Env[E, B]", "member" : "tofu.env.Env.onErrorRestartLoopTask", "link" : "tofu\/env\/Env.html#onErrorRestartLoopTask[S,B>:A](initial:S)(f:(Throwable,S,S=>monix.eval.Task[B])=>monix.eval.Task[B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "onErrorRestartLoop", "tail" : "(initial: S)(f: (Throwable, S, (S) => Env[E, B]) => Env[E, B]): Env[E, B]", "member" : "tofu.env.Env.onErrorRestartLoop", "link" : "tofu\/env\/Env.html#onErrorRestartLoop[S,B>:A](initial:S)(f:(Throwable,S,S=>tofu.env.Env[E,B])=>tofu.env.Env[E,B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "onErrorRestartIfCtx", "tail" : "(f: (Throwable, E) => Boolean): Env[E, A]", "member" : "tofu.env.Env.onErrorRestartIfCtx", "link" : "tofu\/env\/Env.html#onErrorRestartIfCtx(f:(Throwable,E)=>Boolean):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "onErrorRestartIf", "tail" : "(f: (Throwable) => Boolean): Env[E, A]", "member" : "tofu.env.Env.onErrorRestartIf", "link" : "tofu\/env\/Env.html#onErrorRestartIf(f:Throwable=>Boolean):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "onErrorRestart", "tail" : "(maxRetries: Long): Env[E, A]", "member" : "tofu.env.Env.onErrorRestart", "link" : "tofu\/env\/Env.html#onErrorRestart(maxRetries:Long):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "onErrorHandleWith", "tail" : "(f: (Throwable) => Env[E, B]): Env[E, B]", "member" : "tofu.env.Env.onErrorHandleWith", "link" : "tofu\/env\/Env.html#onErrorHandleWith[B>:A](f:Throwable=>tofu.env.Env[E,B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "onErrorRecoverWithTask", "tail" : "(f: PartialFunction[Throwable, Task[B]]): Env[E, B]", "member" : "tofu.env.Env.onErrorRecoverWithTask", "link" : "tofu\/env\/Env.html#onErrorRecoverWithTask[B>:A](f:PartialFunction[Throwable,monix.eval.Task[B]]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "onErrorRecoverWith", "tail" : "(f: PartialFunction[Throwable, Env[E, B]]): Env[E, B]", "member" : "tofu.env.Env.onErrorRecoverWith", "link" : "tofu\/env\/Env.html#onErrorRecoverWith[B>:A](f:PartialFunction[Throwable,tofu.env.Env[E,B]]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "onErrorRecover", "tail" : "(f: PartialFunction[Throwable, B]): Env[E, B]", "member" : "tofu.env.Env.onErrorRecover", "link" : "tofu\/env\/Env.html#onErrorRecover[B>:A](f:PartialFunction[Throwable,B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "onErrorHandleCtxTask", "tail" : "(f: (Throwable, E) => Task[B]): Env[E, B]", "member" : "tofu.env.Env.onErrorHandleCtxTask", "link" : "tofu\/env\/Env.html#onErrorHandleCtxTask[B>:A](f:(Throwable,E)=>monix.eval.Task[B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "onErrorHandleCtx", "tail" : "(f: (Throwable, E) => B): Env[E, B]", "member" : "tofu.env.Env.onErrorHandleCtx", "link" : "tofu\/env\/Env.html#onErrorHandleCtx[B>:A](f:(Throwable,E)=>B):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "onErrorHandle", "tail" : "(f: (Throwable) => B): Env[E, B]", "member" : "tofu.env.Env.onErrorHandle", "link" : "tofu\/env\/Env.html#onErrorHandle[B>:A](f:Throwable=>B):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "void", "tail" : "(): Env[E, Unit]", "member" : "tofu.env.Env.void", "link" : "tofu\/env\/Env.html#void:tofu.env.Env[E,Unit]", "kind" : "def"}, {"label" : "flattenT", "tail" : "(_ev: <:<[A, Task[B]]): Env[E, B]", "member" : "tofu.env.Env.flattenT", "link" : "tofu\/env\/Env.html#flattenT[B](implicit_ev:A<:<monix.eval.Task[B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(_ev: <:<[A, Env[E, B]]): Env[E, B]", "member" : "tofu.env.Env.flatten", "link" : "tofu\/env\/Env.html#flatten[B](implicit_ev:A<:<tofu.env.Env[E,B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "<&", "tail" : "(t: Env[E, B]): Env[E, A]", "member" : "tofu.env.Env.<&", "link" : "tofu\/env\/Env.html#<&[B](t:tofu.env.Env[E,B]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "&>", "tail" : "(t: Env[E, B]): Env[E, B]", "member" : "tofu.env.Env.&>", "link" : "tofu\/env\/Env.html#&>[B](t:tofu.env.Env[E,B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "<*", "tail" : "(t: Env[E, B]): Env[E, A]", "member" : "tofu.env.Env.<*", "link" : "tofu\/env\/Env.html#<*[B](t:tofu.env.Env[E,B]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "*>", "tail" : "(t: Env[E, B]): Env[E, B]", "member" : "tofu.env.Env.*>", "link" : "tofu\/env\/Env.html#*>[B](t:tofu.env.Env[E,B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "<<", "tail" : "(t: => Env[E, B]): Env[E, A]", "member" : "tofu.env.Env.<<", "link" : "tofu\/env\/Env.html#<<[B](t:=>tofu.env.Env[E,B]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : ">>", "tail" : "(t: => Env[E, B]): Env[E, B]", "member" : "tofu.env.Env.>>", "link" : "tofu\/env\/Env.html#>>[B](t:=>tofu.env.Env[E,B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "zip", "tail" : "(t: Env[E, B]): Env[E, (A, B)]", "member" : "tofu.env.Env.zip", "link" : "tofu\/env\/Env.html#zip[B](t:tofu.env.Env[E,B]):tofu.env.Env[E,(A,B)]", "kind" : "def"}, {"label" : "parMap3", "tail" : "(eb: Env[E, B], ec: Env[E, C])(f: (A, B, C) => D): Env[E, D]", "member" : "tofu.env.Env.parMap3", "link" : "tofu\/env\/Env.html#parMap3[B,C,D](eb:tofu.env.Env[E,B],ec:tofu.env.Env[E,C])(f:(A,B,C)=>D):tofu.env.Env[E,D]", "kind" : "def"}, {"label" : "parMap2", "tail" : "(eb: Env[E, B])(f: (A, B) => C): Env[E, C]", "member" : "tofu.env.Env.parMap2", "link" : "tofu\/env\/Env.html#parMap2[B,C](eb:tofu.env.Env[E,B])(f:(A,B)=>C):tofu.env.Env[E,C]", "kind" : "def"}, {"label" : "map3", "tail" : "(eb: Env[E, B], ec: Env[E, C])(f: (A, B, C) => D): Env[E, D]", "member" : "tofu.env.Env.map3", "link" : "tofu\/env\/Env.html#map3[B,C,D](eb:tofu.env.Env[E,B],ec:tofu.env.Env[E,C])(f:(A,B,C)=>D):tofu.env.Env[E,D]", "kind" : "def"}, {"label" : "map2", "tail" : "(eb: Env[E, B])(f: (A, B) => C): Env[E, C]", "member" : "tofu.env.Env.map2", "link" : "tofu\/env\/Env.html#map2[B,C](eb:tofu.env.Env[E,B])(f:(A,B)=>C):tofu.env.Env[E,C]", "kind" : "def"}, {"label" : "flatTap", "tail" : "(f: (A) => Env[E, B]): Env[E, A]", "member" : "tofu.env.Env.flatTap", "link" : "tofu\/env\/Env.html#flatTap[B](f:A=>tofu.env.Env[E,B]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) => Env[E, B]): Env[E, B]", "member" : "tofu.env.Env.flatMap", "link" : "tofu\/env\/Env.html#flatMap[B](f:A=>tofu.env.Env[E,B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "mapAsync", "tail" : "(f: (A) => Task[B]): Env[E, B]", "member" : "tofu.env.Env.mapAsync", "link" : "tofu\/env\/Env.html#mapAsync[B](f:A=>monix.eval.Task[B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) => B): Env[E, B]", "member" : "tofu.env.Env.map", "link" : "tofu\/env\/Env.html#map[B](f:A=>B):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: Env[A, B]): Env[E, B]", "member" : "tofu.env.Env.andThen", "link" : "tofu\/env\/Env.html#andThen[B](g:tofu.env.Env[A@scala.annotation.unchecked.uncheckedVariance,B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "compose", "tail" : "(g: Env[B, E]): Env[B, A]", "member" : "tofu.env.Env.compose", "link" : "tofu\/env\/Env.html#compose[B](g:tofu.env.Env[B,E]):tofu.env.Env[B,A]", "kind" : "def"}, {"label" : "localPT", "tail" : "(f: (E1) => Task[E]): Env[E1, A]", "member" : "tofu.env.Env.localPT", "link" : "tofu\/env\/Env.html#localPT[E1](f:E1=>monix.eval.Task[E]):tofu.env.Env[E1,A]", "kind" : "def"}, {"label" : "localP", "tail" : "(f: (E1) => E): Env[E1, A]", "member" : "tofu.env.Env.localP", "link" : "tofu\/env\/Env.html#localP[E1](f:E1=>E):tofu.env.Env[E1,A]", "kind" : "def"}, {"label" : "localT", "tail" : "(f: (E) => Task[E]): Env[E, A]", "member" : "tofu.env.Env.localT", "link" : "tofu\/env\/Env.html#localT(f:E=>monix.eval.Task[E]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "local", "tail" : "(f: (E) => E): Env[E, A]", "member" : "tofu.env.Env.local", "link" : "tofu\/env\/Env.html#local(f:E=>E):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "runOnComplete", "tail" : "(f: (Try[A]) => Unit)(ctx: E)(s: Scheduler): Cancelable", "member" : "tofu.env.Env.runOnComplete", "link" : "tofu\/env\/Env.html#runOnComplete(f:scala.util.Try[A]=>Unit)(ctx:E)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "def"}, {"label" : "foreachEnv", "tail" : "(f: (A) => Unit): Env[E, Unit]", "member" : "tofu.env.Env.foreachEnv", "link" : "tofu\/env\/Env.html#foreachEnv(f:A=>Unit):tofu.env.Env[E,Unit]", "kind" : "def"}, {"label" : "foreachL", "tail" : "(f: (A) => Unit)(ctx: E): Task[Unit]", "member" : "tofu.env.Env.foreachL", "link" : "tofu\/env\/Env.html#foreachL(f:A=>Unit)(ctx:E):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (A) => Unit)(s: Scheduler, provide: ProvideEnv[E]): CancelableFuture[Unit]", "member" : "tofu.env.Env.foreach", "link" : "tofu\/env\/Env.html#foreach(f:A=>Unit)(implicits:monix.execution.Scheduler,implicitprovide:tofu.env.ProvideEnv[E]):monix.execution.CancelableFuture[Unit]", "kind" : "def"}, {"label" : "runNew", "tail" : "(provideEnv: ProvideEnv[E]): Task[A]", "member" : "tofu.env.Env.runNew", "link" : "tofu\/env\/Env.html#runNew(implicitprovideEnv:tofu.env.ProvideEnv[E]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "mapTask6", "tail" : "(e1: Env[E, B1], e2: Env[E, B2], e3: Env[E, B3], e4: Env[E, B4], e5: Env[E, B5])(f: (Task[A], Task[B1], Task[B2], Task[B3], Task[B4], Task[B5]) => Task[R]): Env[E, R]", "member" : "tofu.env.Env.mapTask6", "link" : "tofu\/env\/Env.html#mapTask6[B1,B2,B3,B4,B5,R](e1:tofu.env.Env[E,B1],e2:tofu.env.Env[E,B2],e3:tofu.env.Env[E,B3],e4:tofu.env.Env[E,B4],e5:tofu.env.Env[E,B5])(f:(monix.eval.Task[A],monix.eval.Task[B1],monix.eval.Task[B2],monix.eval.Task[B3],monix.eval.Task[B4],monix.eval.Task[B5])=>monix.eval.Task[R]):tofu.env.Env[E,R]", "kind" : "def"}, {"label" : "mapTask5", "tail" : "(e1: Env[E, B1], e2: Env[E, B2], e3: Env[E, B3], e4: Env[E, B4])(f: (Task[A], Task[B1], Task[B2], Task[B3], Task[B4]) => Task[R]): Env[E, R]", "member" : "tofu.env.Env.mapTask5", "link" : "tofu\/env\/Env.html#mapTask5[B1,B2,B3,B4,R](e1:tofu.env.Env[E,B1],e2:tofu.env.Env[E,B2],e3:tofu.env.Env[E,B3],e4:tofu.env.Env[E,B4])(f:(monix.eval.Task[A],monix.eval.Task[B1],monix.eval.Task[B2],monix.eval.Task[B3],monix.eval.Task[B4])=>monix.eval.Task[R]):tofu.env.Env[E,R]", "kind" : "def"}, {"label" : "mapTask4", "tail" : "(e1: Env[E, B1], e2: Env[E, B2], e3: Env[E, B3])(f: (Task[A], Task[B1], Task[B2], Task[B3]) => Task[R]): Env[E, R]", "member" : "tofu.env.Env.mapTask4", "link" : "tofu\/env\/Env.html#mapTask4[B1,B2,B3,R](e1:tofu.env.Env[E,B1],e2:tofu.env.Env[E,B2],e3:tofu.env.Env[E,B3])(f:(monix.eval.Task[A],monix.eval.Task[B1],monix.eval.Task[B2],monix.eval.Task[B3])=>monix.eval.Task[R]):tofu.env.Env[E,R]", "kind" : "def"}, {"label" : "mapTask3", "tail" : "(e1: Env[E, B1], e2: Env[E, B2])(f: (Task[A], Task[B1], Task[B2]) => Task[R]): Env[E, R]", "member" : "tofu.env.Env.mapTask3", "link" : "tofu\/env\/Env.html#mapTask3[B1,B2,R](e1:tofu.env.Env[E,B1],e2:tofu.env.Env[E,B2])(f:(monix.eval.Task[A],monix.eval.Task[B1],monix.eval.Task[B2])=>monix.eval.Task[R]):tofu.env.Env[E,R]", "kind" : "def"}, {"label" : "mapTask2", "tail" : "(eb: Env[E, B])(f: (Task[A], Task[B]) => Task[R]): Env[E, R]", "member" : "tofu.env.Env.mapTask2", "link" : "tofu\/env\/Env.html#mapTask2[B,R](eb:tofu.env.Env[E,B])(f:(monix.eval.Task[A],monix.eval.Task[B])=>monix.eval.Task[R]):tofu.env.Env[E,R]", "kind" : "def"}, {"label" : "mapTask", "tail" : "(f: (Task[A]) => Task[R]): Env[E, R]", "member" : "tofu.env.Env.mapTask", "link" : "tofu\/env\/Env.html#mapTask[R](f:monix.eval.Task[A]=>monix.eval.Task[R]):tofu.env.Env[E,R]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/env\/Env.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/env\/Env.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/env\/Env.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/env\/Env.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/env\/Env.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/env\/Env.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/env\/Env.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/env\/Env.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/env\/Env.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/env\/Env.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/env\/Env.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/env\/Env.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/env\/Env.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/env\/Env.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/env\/Env.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/env\/Env.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/env\/Env.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/env\/Env.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/env\/Env.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "run", "tail" : "(ctx: E): Task[A]", "member" : "tofu.env.Env.run", "link" : "tofu\/env\/Env.html#run(ctx:E):monix.eval.Task[A]", "kind" : "abstract def"}], "shortDescription" : "Env is a monad, allowing composition of functions that are context(environment)-aware."}, {"name" : "tofu.env.EnvCtx", "shortDescription" : "Context aware variation of Env", "members_case class" : [{"label" : "run", "tail" : "(ctx: E): Task[A]", "member" : "tofu.env.EnvCtx.run", "link" : "tofu\/env\/EnvCtx.html#run(ctx:E):monix.eval.Task[A]", "kind" : "def"}, {"member" : "tofu.env.EnvCtx#<init>", "error" : "unsupported entity"}, {"label" : "runF", "tail" : ": (E) => Task[A]", "member" : "tofu.env.EnvCtx.runF", "link" : "tofu\/env\/EnvCtx.html#runF:E=>monix.eval.Task[A]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "tofu\/env\/EnvCtx.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "toReaderT", "tail" : "(): ReaderT[Task, E, A]", "member" : "tofu.env.Env.toReaderT", "link" : "tofu\/env\/EnvCtx.html#toReaderT:cats.data.ReaderT[monix.eval.Task,E,A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "choice", "tail" : "(f: Env[E1, A]): Env[Either[E, E1], A]", "member" : "tofu.env.Env.choice", "link" : "tofu\/env\/EnvCtx.html#choice[E1](f:tofu.env.Env[E1,A@scala.annotation.unchecked.uncheckedVariance]):tofu.env.Env[Either[E,E1],A]", "kind" : "def"}, {"label" : "right", "tail" : "(): Env[Either[B, E], Either[B, A]]", "member" : "tofu.env.Env.right", "link" : "tofu\/env\/EnvCtx.html#right[B]:tofu.env.Env[Either[B,E],Either[B,A]]", "kind" : "def"}, {"label" : "left", "tail" : "(): Env[Either[E, B], Either[A, B]]", "member" : "tofu.env.Env.left", "link" : "tofu\/env\/EnvCtx.html#left[B]:tofu.env.Env[Either[E,B],Either[A,B]]", "kind" : "def"}, {"label" : "split", "tail" : "(g: Env[B, C]): Env[(E, B), (A, C)]", "member" : "tofu.env.Env.split", "link" : "tofu\/env\/EnvCtx.html#split[B,C](g:tofu.env.Env[B,C]):tofu.env.Env[(E,B),(A,C)]", "kind" : "def"}, {"label" : "dimap", "tail" : "(f: (B) => E)(g: (A) => C): Env[B, C]", "member" : "tofu.env.Env.dimap", "link" : "tofu\/env\/EnvCtx.html#dimap[B,C](f:B=>E)(g:A=>C):tofu.env.Env[B,C]", "kind" : "def"}, {"label" : "second", "tail" : "(): Env[(B, E), (B, A)]", "member" : "tofu.env.Env.second", "link" : "tofu\/env\/EnvCtx.html#second[B]:tofu.env.Env[(B,E),(B,A)]", "kind" : "def"}, {"label" : "first", "tail" : "(): Env[(E, B), (A, B)]", "member" : "tofu.env.Env.first", "link" : "tofu\/env\/EnvCtx.html#first[B]:tofu.env.Env[(E,B),(A,B)]", "kind" : "def"}, {"label" : "choose", "tail" : "(g: Env[B, C]): Env[Either[E, B], Either[A, C]]", "member" : "tofu.env.Env.choose", "link" : "tofu\/env\/EnvCtx.html#choose[B,C](g:tofu.env.Env[B,C]):tofu.env.Env[Either[E,B],Either[A,C]]", "kind" : "def"}, {"label" : "startAndForget", "tail" : "(): Env[E, Unit]", "member" : "tofu.env.Env.startAndForget", "link" : "tofu\/env\/EnvCtx.html#startAndForget:tofu.env.Env[E,Unit]", "kind" : "def"}, {"label" : "forkAndForget", "tail" : "(): Env[E, Unit]", "member" : "tofu.env.Env.forkAndForget", "link" : "tofu\/env\/EnvCtx.html#forkAndForget:tofu.env.Env[E,Unit]", "kind" : "def"}, {"label" : "fork", "tail" : "(): Env[E, Fiber[[β$1$]Env[E, β$1$], A]]", "member" : "tofu.env.Env.fork", "link" : "tofu\/env\/EnvCtx.html#fork:tofu.env.Env[E,cats.effect.Fiber[[β$1$]tofu.env.Env[E,β$1$],A@scala.annotation.unchecked.uncheckedVariance]]", "kind" : "def"}, {"label" : "executeOn", "tail" : "(s: Scheduler, forceAsync: Boolean): Env[E, A]", "member" : "tofu.env.Env.executeOn", "link" : "tofu\/env\/EnvCtx.html#executeOn(s:monix.execution.Scheduler,forceAsync:Boolean):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "executeAsync", "tail" : "(): Env[E, A]", "member" : "tofu.env.Env.executeAsync", "link" : "tofu\/env\/EnvCtx.html#executeAsync:tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "asyncBoundary", "tail" : "(s: Scheduler): Env[E, A]", "member" : "tofu.env.Env.asyncBoundary", "link" : "tofu\/env\/EnvCtx.html#asyncBoundary(s:monix.execution.Scheduler):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "asyncBoundary", "tail" : "(): Env[E, A]", "member" : "tofu.env.Env.asyncBoundary", "link" : "tofu\/env\/EnvCtx.html#asyncBoundary:tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "uncancelable", "tail" : "(): Env[E, A]", "member" : "tofu.env.Env.uncancelable", "link" : "tofu\/env\/EnvCtx.html#uncancelable:tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "cancelable", "tail" : "(): Env[E, A]", "member" : "tofu.env.Env.cancelable", "link" : "tofu\/env\/EnvCtx.html#cancelable:tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "doOnFinish", "tail" : "(f: (Option[Throwable]) => Env[E, Unit]): Env[E, A]", "member" : "tofu.env.Env.doOnFinish", "link" : "tofu\/env\/EnvCtx.html#doOnFinish(f:Option[Throwable]=>tofu.env.Env[E,Unit]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "bracketСase", "tail" : "(use: (A) => Env[E, B])(release: (A, ExitCase[Throwable]) => Env[E, Unit]): Env[E, B]", "member" : "tofu.env.Env.bracketСase", "link" : "tofu\/env\/EnvCtx.html#bracketСase[B](use:A=>tofu.env.Env[E,B])(release:(A,cats.effect.ExitCase[Throwable])=>tofu.env.Env[E,Unit]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "bracketE", "tail" : "(use: (A) => Env[E, B])(release: (A, Either[Option[Throwable], B]) => Env[E, Unit]): Env[E, B]", "member" : "tofu.env.Env.bracketE", "link" : "tofu\/env\/EnvCtx.html#bracketE[B](use:A=>tofu.env.Env[E,B])(release:(A,Either[Option[Throwable],B])=>tofu.env.Env[E,Unit]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "bracket", "tail" : "(use: (A) => Env[E, B])(release: (A) => Env[E, Unit]): Env[E, B]", "member" : "tofu.env.Env.bracket", "link" : "tofu\/env\/EnvCtx.html#bracket[B](use:A=>tofu.env.Env[E,B])(release:A=>tofu.env.Env[E,Unit]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "start", "tail" : "(): Env[E, Fiber[[β$0$]Env[E, β$0$], A]]", "member" : "tofu.env.Env.start", "link" : "tofu\/env\/EnvCtx.html#start:tofu.env.Env[E,cats.effect.Fiber[[β$0$]tofu.env.Env[E,β$0$],A@scala.annotation.unchecked.uncheckedVariance]]", "kind" : "def"}, {"label" : "onCancelRaiseError", "tail" : "(e: Throwable): Env[E, A]", "member" : "tofu.env.Env.onCancelRaiseError", "link" : "tofu\/env\/EnvCtx.html#onCancelRaiseError(e:Throwable):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "doOnCancelT", "tail" : "(callback: Task[Unit]): Env[E, A]", "member" : "tofu.env.Env.doOnCancelT", "link" : "tofu\/env\/EnvCtx.html#doOnCancelT(callback:monix.eval.Task[Unit]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "doOnCancel", "tail" : "(callback: Env[E, Unit]): Env[E, A]", "member" : "tofu.env.Env.doOnCancel", "link" : "tofu\/env\/EnvCtx.html#doOnCancel(callback:tofu.env.Env[E,Unit]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "timed", "tail" : "(): Env[E, (FiniteDuration, A)]", "member" : "tofu.env.Env.timed", "link" : "tofu\/env\/EnvCtx.html#timed:tofu.env.Env[E,(scala.concurrent.duration.FiniteDuration,A)]", "kind" : "def"}, {"label" : "timeoutTo", "tail" : "(dur: FiniteDuration, backup: Env[E, B]): Env[E, B]", "member" : "tofu.env.Env.timeoutTo", "link" : "tofu\/env\/EnvCtx.html#timeoutTo[B>:A](dur:scala.concurrent.duration.FiniteDuration,backup:tofu.env.Env[E,B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "timeoutToTask", "tail" : "(dur: FiniteDuration, backup: Task[B]): Env[E, B]", "member" : "tofu.env.Env.timeoutToTask", "link" : "tofu\/env\/EnvCtx.html#timeoutToTask[B>:A](dur:scala.concurrent.duration.FiniteDuration,backup:monix.eval.Task[B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "timeout", "tail" : "(dur: FiniteDuration): Env[E, A]", "member" : "tofu.env.Env.timeout", "link" : "tofu\/env\/EnvCtx.html#timeout(dur:scala.concurrent.duration.FiniteDuration):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "delayResult", "tail" : "(dur: FiniteDuration): Env[E, A]", "member" : "tofu.env.Env.delayResult", "link" : "tofu\/env\/EnvCtx.html#delayResult(dur:scala.concurrent.duration.FiniteDuration):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "delayExcecution", "tail" : "(dur: FiniteDuration): Env[E, A]", "member" : "tofu.env.Env.delayExcecution", "link" : "tofu\/env\/EnvCtx.html#delayExcecution(dur:scala.concurrent.duration.FiniteDuration):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "memo", "tail" : "(): Env[E, Env[E, A]]", "member" : "tofu.env.Env.memo", "link" : "tofu\/env\/EnvCtx.html#memo:tofu.env.Env[E,tofu.env.Env[E,A]]", "kind" : "def"}, {"label" : "memoSuccess", "tail" : "(): Env[E, Env[E, A]]", "member" : "tofu.env.Env.memoSuccess", "link" : "tofu\/env\/EnvCtx.html#memoSuccess:tofu.env.Env[E,tofu.env.Env[E,A]]", "kind" : "def"}, {"label" : "memoize", "tail" : "(): Env[E, A]", "member" : "tofu.env.Env.memoize", "link" : "tofu\/env\/EnvCtx.html#memoize:tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "memoizeOnSuccess", "tail" : "(): Env[E, A]", "member" : "tofu.env.Env.memoizeOnSuccess", "link" : "tofu\/env\/EnvCtx.html#memoizeOnSuccess:tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "memoizeTaskOnSuccess", "tail" : "(): Env[E, A]", "member" : "tofu.env.Env.memoizeTaskOnSuccess", "link" : "tofu\/env\/EnvCtx.html#memoizeTaskOnSuccess:tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "memoizeTask", "tail" : "(): Env[E, A]", "member" : "tofu.env.Env.memoizeTask", "link" : "tofu\/env\/EnvCtx.html#memoizeTask:tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "ensureOrCtx", "tail" : "(error: (E, A) => Throwable)(predicate: (A) => Boolean): Env[E, A]", "member" : "tofu.env.Env.ensureOrCtx", "link" : "tofu\/env\/EnvCtx.html#ensureOrCtx(error:(E,A)=>Throwable)(predicate:A=>Boolean):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "ensureCtx", "tail" : "(error: (E) => Throwable)(predicate: (A) => Boolean): Env[E, A]", "member" : "tofu.env.Env.ensureCtx", "link" : "tofu\/env\/EnvCtx.html#ensureCtx(error:E=>Throwable)(predicate:A=>Boolean):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "ensureOr", "tail" : "(error: (A) => Throwable)(predicate: (A) => Boolean): Env[E, A]", "member" : "tofu.env.Env.ensureOr", "link" : "tofu\/env\/EnvCtx.html#ensureOr(error:A=>Throwable)(predicate:A=>Boolean):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "ensure", "tail" : "(error: => Throwable)(predicate: (A) => Boolean): Env[E, A]", "member" : "tofu.env.Env.ensure", "link" : "tofu\/env\/EnvCtx.html#ensure(error:=>Throwable)(predicate:A=>Boolean):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(): Env[E, Either[Throwable, A]]", "member" : "tofu.env.Env.attempt", "link" : "tofu\/env\/EnvCtx.html#attempt:tofu.env.Env[E,Either[Throwable,A]]", "kind" : "def"}, {"label" : "dematerialize", "tail" : "(_ev: <:<[A, Try[B]]): Env[E, B]", "member" : "tofu.env.Env.dematerialize", "link" : "tofu\/env\/EnvCtx.html#dematerialize[B](implicit_ev:A<:<scala.util.Try[B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "materialize", "tail" : "(): Env[E, Try[A]]", "member" : "tofu.env.Env.materialize", "link" : "tofu\/env\/EnvCtx.html#materialize:tofu.env.Env[E,scala.util.Try[A]]", "kind" : "def"}, {"label" : "failed", "tail" : "(): Env[E, Throwable]", "member" : "tofu.env.Env.failed", "link" : "tofu\/env\/EnvCtx.html#failed:tofu.env.Env[E,Throwable]", "kind" : "def"}, {"label" : "onErrorFallbackTask", "tail" : "(that: Task[B]): Env[E, B]", "member" : "tofu.env.Env.onErrorFallbackTask", "link" : "tofu\/env\/EnvCtx.html#onErrorFallbackTask[B>:A](that:monix.eval.Task[B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "onErrorFallbackTo", "tail" : "(that: Env[E, B]): Env[E, B]", "member" : "tofu.env.Env.onErrorFallbackTo", "link" : "tofu\/env\/EnvCtx.html#onErrorFallbackTo[B>:A](that:tofu.env.Env[E,B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "onErrorRestartLoopTask", "tail" : "(initial: S)(f: (Throwable, S, (S) => Task[B]) => Task[B]): Env[E, B]", "member" : "tofu.env.Env.onErrorRestartLoopTask", "link" : "tofu\/env\/EnvCtx.html#onErrorRestartLoopTask[S,B>:A](initial:S)(f:(Throwable,S,S=>monix.eval.Task[B])=>monix.eval.Task[B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "onErrorRestartLoop", "tail" : "(initial: S)(f: (Throwable, S, (S) => Env[E, B]) => Env[E, B]): Env[E, B]", "member" : "tofu.env.Env.onErrorRestartLoop", "link" : "tofu\/env\/EnvCtx.html#onErrorRestartLoop[S,B>:A](initial:S)(f:(Throwable,S,S=>tofu.env.Env[E,B])=>tofu.env.Env[E,B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "onErrorRestartIfCtx", "tail" : "(f: (Throwable, E) => Boolean): Env[E, A]", "member" : "tofu.env.Env.onErrorRestartIfCtx", "link" : "tofu\/env\/EnvCtx.html#onErrorRestartIfCtx(f:(Throwable,E)=>Boolean):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "onErrorRestartIf", "tail" : "(f: (Throwable) => Boolean): Env[E, A]", "member" : "tofu.env.Env.onErrorRestartIf", "link" : "tofu\/env\/EnvCtx.html#onErrorRestartIf(f:Throwable=>Boolean):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "onErrorRestart", "tail" : "(maxRetries: Long): Env[E, A]", "member" : "tofu.env.Env.onErrorRestart", "link" : "tofu\/env\/EnvCtx.html#onErrorRestart(maxRetries:Long):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "onErrorHandleWith", "tail" : "(f: (Throwable) => Env[E, B]): Env[E, B]", "member" : "tofu.env.Env.onErrorHandleWith", "link" : "tofu\/env\/EnvCtx.html#onErrorHandleWith[B>:A](f:Throwable=>tofu.env.Env[E,B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "onErrorRecoverWithTask", "tail" : "(f: PartialFunction[Throwable, Task[B]]): Env[E, B]", "member" : "tofu.env.Env.onErrorRecoverWithTask", "link" : "tofu\/env\/EnvCtx.html#onErrorRecoverWithTask[B>:A](f:PartialFunction[Throwable,monix.eval.Task[B]]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "onErrorRecoverWith", "tail" : "(f: PartialFunction[Throwable, Env[E, B]]): Env[E, B]", "member" : "tofu.env.Env.onErrorRecoverWith", "link" : "tofu\/env\/EnvCtx.html#onErrorRecoverWith[B>:A](f:PartialFunction[Throwable,tofu.env.Env[E,B]]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "onErrorRecover", "tail" : "(f: PartialFunction[Throwable, B]): Env[E, B]", "member" : "tofu.env.Env.onErrorRecover", "link" : "tofu\/env\/EnvCtx.html#onErrorRecover[B>:A](f:PartialFunction[Throwable,B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "onErrorHandleCtxTask", "tail" : "(f: (Throwable, E) => Task[B]): Env[E, B]", "member" : "tofu.env.Env.onErrorHandleCtxTask", "link" : "tofu\/env\/EnvCtx.html#onErrorHandleCtxTask[B>:A](f:(Throwable,E)=>monix.eval.Task[B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "onErrorHandleCtx", "tail" : "(f: (Throwable, E) => B): Env[E, B]", "member" : "tofu.env.Env.onErrorHandleCtx", "link" : "tofu\/env\/EnvCtx.html#onErrorHandleCtx[B>:A](f:(Throwable,E)=>B):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "onErrorHandle", "tail" : "(f: (Throwable) => B): Env[E, B]", "member" : "tofu.env.Env.onErrorHandle", "link" : "tofu\/env\/EnvCtx.html#onErrorHandle[B>:A](f:Throwable=>B):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "void", "tail" : "(): Env[E, Unit]", "member" : "tofu.env.Env.void", "link" : "tofu\/env\/EnvCtx.html#void:tofu.env.Env[E,Unit]", "kind" : "def"}, {"label" : "flattenT", "tail" : "(_ev: <:<[A, Task[B]]): Env[E, B]", "member" : "tofu.env.Env.flattenT", "link" : "tofu\/env\/EnvCtx.html#flattenT[B](implicit_ev:A<:<monix.eval.Task[B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(_ev: <:<[A, Env[E, B]]): Env[E, B]", "member" : "tofu.env.Env.flatten", "link" : "tofu\/env\/EnvCtx.html#flatten[B](implicit_ev:A<:<tofu.env.Env[E,B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "<&", "tail" : "(t: Env[E, B]): Env[E, A]", "member" : "tofu.env.Env.<&", "link" : "tofu\/env\/EnvCtx.html#<&[B](t:tofu.env.Env[E,B]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "&>", "tail" : "(t: Env[E, B]): Env[E, B]", "member" : "tofu.env.Env.&>", "link" : "tofu\/env\/EnvCtx.html#&>[B](t:tofu.env.Env[E,B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "<*", "tail" : "(t: Env[E, B]): Env[E, A]", "member" : "tofu.env.Env.<*", "link" : "tofu\/env\/EnvCtx.html#<*[B](t:tofu.env.Env[E,B]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "*>", "tail" : "(t: Env[E, B]): Env[E, B]", "member" : "tofu.env.Env.*>", "link" : "tofu\/env\/EnvCtx.html#*>[B](t:tofu.env.Env[E,B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "<<", "tail" : "(t: => Env[E, B]): Env[E, A]", "member" : "tofu.env.Env.<<", "link" : "tofu\/env\/EnvCtx.html#<<[B](t:=>tofu.env.Env[E,B]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : ">>", "tail" : "(t: => Env[E, B]): Env[E, B]", "member" : "tofu.env.Env.>>", "link" : "tofu\/env\/EnvCtx.html#>>[B](t:=>tofu.env.Env[E,B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "zip", "tail" : "(t: Env[E, B]): Env[E, (A, B)]", "member" : "tofu.env.Env.zip", "link" : "tofu\/env\/EnvCtx.html#zip[B](t:tofu.env.Env[E,B]):tofu.env.Env[E,(A,B)]", "kind" : "def"}, {"label" : "parMap3", "tail" : "(eb: Env[E, B], ec: Env[E, C])(f: (A, B, C) => D): Env[E, D]", "member" : "tofu.env.Env.parMap3", "link" : "tofu\/env\/EnvCtx.html#parMap3[B,C,D](eb:tofu.env.Env[E,B],ec:tofu.env.Env[E,C])(f:(A,B,C)=>D):tofu.env.Env[E,D]", "kind" : "def"}, {"label" : "parMap2", "tail" : "(eb: Env[E, B])(f: (A, B) => C): Env[E, C]", "member" : "tofu.env.Env.parMap2", "link" : "tofu\/env\/EnvCtx.html#parMap2[B,C](eb:tofu.env.Env[E,B])(f:(A,B)=>C):tofu.env.Env[E,C]", "kind" : "def"}, {"label" : "map3", "tail" : "(eb: Env[E, B], ec: Env[E, C])(f: (A, B, C) => D): Env[E, D]", "member" : "tofu.env.Env.map3", "link" : "tofu\/env\/EnvCtx.html#map3[B,C,D](eb:tofu.env.Env[E,B],ec:tofu.env.Env[E,C])(f:(A,B,C)=>D):tofu.env.Env[E,D]", "kind" : "def"}, {"label" : "map2", "tail" : "(eb: Env[E, B])(f: (A, B) => C): Env[E, C]", "member" : "tofu.env.Env.map2", "link" : "tofu\/env\/EnvCtx.html#map2[B,C](eb:tofu.env.Env[E,B])(f:(A,B)=>C):tofu.env.Env[E,C]", "kind" : "def"}, {"label" : "flatTap", "tail" : "(f: (A) => Env[E, B]): Env[E, A]", "member" : "tofu.env.Env.flatTap", "link" : "tofu\/env\/EnvCtx.html#flatTap[B](f:A=>tofu.env.Env[E,B]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) => Env[E, B]): Env[E, B]", "member" : "tofu.env.Env.flatMap", "link" : "tofu\/env\/EnvCtx.html#flatMap[B](f:A=>tofu.env.Env[E,B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "mapAsync", "tail" : "(f: (A) => Task[B]): Env[E, B]", "member" : "tofu.env.Env.mapAsync", "link" : "tofu\/env\/EnvCtx.html#mapAsync[B](f:A=>monix.eval.Task[B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) => B): Env[E, B]", "member" : "tofu.env.Env.map", "link" : "tofu\/env\/EnvCtx.html#map[B](f:A=>B):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: Env[A, B]): Env[E, B]", "member" : "tofu.env.Env.andThen", "link" : "tofu\/env\/EnvCtx.html#andThen[B](g:tofu.env.Env[A@scala.annotation.unchecked.uncheckedVariance,B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "compose", "tail" : "(g: Env[B, E]): Env[B, A]", "member" : "tofu.env.Env.compose", "link" : "tofu\/env\/EnvCtx.html#compose[B](g:tofu.env.Env[B,E]):tofu.env.Env[B,A]", "kind" : "def"}, {"label" : "localPT", "tail" : "(f: (E1) => Task[E]): Env[E1, A]", "member" : "tofu.env.Env.localPT", "link" : "tofu\/env\/EnvCtx.html#localPT[E1](f:E1=>monix.eval.Task[E]):tofu.env.Env[E1,A]", "kind" : "def"}, {"label" : "localP", "tail" : "(f: (E1) => E): Env[E1, A]", "member" : "tofu.env.Env.localP", "link" : "tofu\/env\/EnvCtx.html#localP[E1](f:E1=>E):tofu.env.Env[E1,A]", "kind" : "def"}, {"label" : "localT", "tail" : "(f: (E) => Task[E]): Env[E, A]", "member" : "tofu.env.Env.localT", "link" : "tofu\/env\/EnvCtx.html#localT(f:E=>monix.eval.Task[E]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "local", "tail" : "(f: (E) => E): Env[E, A]", "member" : "tofu.env.Env.local", "link" : "tofu\/env\/EnvCtx.html#local(f:E=>E):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "runOnComplete", "tail" : "(f: (Try[A]) => Unit)(ctx: E)(s: Scheduler): Cancelable", "member" : "tofu.env.Env.runOnComplete", "link" : "tofu\/env\/EnvCtx.html#runOnComplete(f:scala.util.Try[A]=>Unit)(ctx:E)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "def"}, {"label" : "foreachEnv", "tail" : "(f: (A) => Unit): Env[E, Unit]", "member" : "tofu.env.Env.foreachEnv", "link" : "tofu\/env\/EnvCtx.html#foreachEnv(f:A=>Unit):tofu.env.Env[E,Unit]", "kind" : "def"}, {"label" : "foreachL", "tail" : "(f: (A) => Unit)(ctx: E): Task[Unit]", "member" : "tofu.env.Env.foreachL", "link" : "tofu\/env\/EnvCtx.html#foreachL(f:A=>Unit)(ctx:E):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (A) => Unit)(s: Scheduler, provide: ProvideEnv[E]): CancelableFuture[Unit]", "member" : "tofu.env.Env.foreach", "link" : "tofu\/env\/EnvCtx.html#foreach(f:A=>Unit)(implicits:monix.execution.Scheduler,implicitprovide:tofu.env.ProvideEnv[E]):monix.execution.CancelableFuture[Unit]", "kind" : "def"}, {"label" : "runNew", "tail" : "(provideEnv: ProvideEnv[E]): Task[A]", "member" : "tofu.env.Env.runNew", "link" : "tofu\/env\/EnvCtx.html#runNew(implicitprovideEnv:tofu.env.ProvideEnv[E]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "mapTask6", "tail" : "(e1: Env[E, B1], e2: Env[E, B2], e3: Env[E, B3], e4: Env[E, B4], e5: Env[E, B5])(f: (Task[A], Task[B1], Task[B2], Task[B3], Task[B4], Task[B5]) => Task[R]): Env[E, R]", "member" : "tofu.env.Env.mapTask6", "link" : "tofu\/env\/EnvCtx.html#mapTask6[B1,B2,B3,B4,B5,R](e1:tofu.env.Env[E,B1],e2:tofu.env.Env[E,B2],e3:tofu.env.Env[E,B3],e4:tofu.env.Env[E,B4],e5:tofu.env.Env[E,B5])(f:(monix.eval.Task[A],monix.eval.Task[B1],monix.eval.Task[B2],monix.eval.Task[B3],monix.eval.Task[B4],monix.eval.Task[B5])=>monix.eval.Task[R]):tofu.env.Env[E,R]", "kind" : "def"}, {"label" : "mapTask5", "tail" : "(e1: Env[E, B1], e2: Env[E, B2], e3: Env[E, B3], e4: Env[E, B4])(f: (Task[A], Task[B1], Task[B2], Task[B3], Task[B4]) => Task[R]): Env[E, R]", "member" : "tofu.env.Env.mapTask5", "link" : "tofu\/env\/EnvCtx.html#mapTask5[B1,B2,B3,B4,R](e1:tofu.env.Env[E,B1],e2:tofu.env.Env[E,B2],e3:tofu.env.Env[E,B3],e4:tofu.env.Env[E,B4])(f:(monix.eval.Task[A],monix.eval.Task[B1],monix.eval.Task[B2],monix.eval.Task[B3],monix.eval.Task[B4])=>monix.eval.Task[R]):tofu.env.Env[E,R]", "kind" : "def"}, {"label" : "mapTask4", "tail" : "(e1: Env[E, B1], e2: Env[E, B2], e3: Env[E, B3])(f: (Task[A], Task[B1], Task[B2], Task[B3]) => Task[R]): Env[E, R]", "member" : "tofu.env.Env.mapTask4", "link" : "tofu\/env\/EnvCtx.html#mapTask4[B1,B2,B3,R](e1:tofu.env.Env[E,B1],e2:tofu.env.Env[E,B2],e3:tofu.env.Env[E,B3])(f:(monix.eval.Task[A],monix.eval.Task[B1],monix.eval.Task[B2],monix.eval.Task[B3])=>monix.eval.Task[R]):tofu.env.Env[E,R]", "kind" : "def"}, {"label" : "mapTask3", "tail" : "(e1: Env[E, B1], e2: Env[E, B2])(f: (Task[A], Task[B1], Task[B2]) => Task[R]): Env[E, R]", "member" : "tofu.env.Env.mapTask3", "link" : "tofu\/env\/EnvCtx.html#mapTask3[B1,B2,R](e1:tofu.env.Env[E,B1],e2:tofu.env.Env[E,B2])(f:(monix.eval.Task[A],monix.eval.Task[B1],monix.eval.Task[B2])=>monix.eval.Task[R]):tofu.env.Env[E,R]", "kind" : "def"}, {"label" : "mapTask2", "tail" : "(eb: Env[E, B])(f: (Task[A], Task[B]) => Task[R]): Env[E, R]", "member" : "tofu.env.Env.mapTask2", "link" : "tofu\/env\/EnvCtx.html#mapTask2[B,R](eb:tofu.env.Env[E,B])(f:(monix.eval.Task[A],monix.eval.Task[B])=>monix.eval.Task[R]):tofu.env.Env[E,R]", "kind" : "def"}, {"label" : "mapTask", "tail" : "(f: (Task[A]) => Task[R]): Env[E, R]", "member" : "tofu.env.Env.mapTask", "link" : "tofu\/env\/EnvCtx.html#mapTask[R](f:monix.eval.Task[A]=>monix.eval.Task[R]):tofu.env.Env[E,R]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/env\/EnvCtx.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/env\/EnvCtx.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/env\/EnvCtx.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/env\/EnvCtx.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/env\/EnvCtx.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/env\/EnvCtx.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/env\/EnvCtx.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/env\/EnvCtx.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/env\/EnvCtx.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/env\/EnvCtx.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/env\/EnvCtx.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/env\/EnvCtx.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/env\/EnvCtx.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/env\/EnvCtx.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/env\/EnvCtx.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/env\/EnvCtx.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "tofu\/env\/EnvCtx.html", "kind" : "case class"}, {"name" : "tofu.env.EnvOptionOps", "shortDescription" : "", "object" : "tofu\/env\/EnvOptionOps$.html", "members_class" : [{"label" : "orRaise", "tail" : "(e: Throwable): Env[E, A]", "member" : "tofu.env.EnvOptionOps.orRaise", "link" : "tofu\/env\/EnvOptionOps.html#orRaise(e:Throwable):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "getOrElse", "tail" : "(a: => B): Env[E, B]", "member" : "tofu.env.EnvOptionOps.getOrElse", "link" : "tofu\/env\/EnvOptionOps.html#getOrElse[B>:A](a:=>B):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "getOrElseT", "tail" : "(tb: Task[B]): Env[E, B]", "member" : "tofu.env.EnvOptionOps.getOrElseT", "link" : "tofu\/env\/EnvOptionOps.html#getOrElseT[B>:A](tb:monix.eval.Task[B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "getOrElseF", "tail" : "(eb: Env[E, B]): Env[E, B]", "member" : "tofu.env.EnvOptionOps.getOrElseF", "link" : "tofu\/env\/EnvOptionOps.html#getOrElseF[B>:A](eb:tofu.env.Env[E,B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "orElse", "tail" : "(b: => Option[B]): Env[E, Option[B]]", "member" : "tofu.env.EnvOptionOps.orElse", "link" : "tofu\/env\/EnvOptionOps.html#orElse[B>:A](b:=>Option[B]):tofu.env.Env[E,Option[B]]", "kind" : "def"}, {"label" : "orElseT", "tail" : "(tb: Task[Option[B]]): Env[E, Option[B]]", "member" : "tofu.env.EnvOptionOps.orElseT", "link" : "tofu\/env\/EnvOptionOps.html#orElseT[B>:A](tb:monix.eval.Task[Option[B]]):tofu.env.Env[E,Option[B]]", "kind" : "def"}, {"label" : "orElseF", "tail" : "(eb: Env[E, Option[B]]): Env[E, Option[B]]", "member" : "tofu.env.EnvOptionOps.orElseF", "link" : "tofu\/env\/EnvOptionOps.html#orElseF[B>:A](eb:tofu.env.Env[E,Option[B]]):tofu.env.Env[E,Option[B]]", "kind" : "def"}, {"member" : "tofu.env.EnvOptionOps#<init>", "error" : "unsupported entity"}, {"label" : "ea", "tail" : ": Env[E, Option[A]]", "member" : "tofu.env.EnvOptionOps.ea", "link" : "tofu\/env\/EnvOptionOps.html#ea:tofu.env.Env[E,Option[A]]", "kind" : "val"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "tofu\/env\/EnvOptionOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "tofu\/env\/EnvOptionOps.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/env\/EnvOptionOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/env\/EnvOptionOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "tofu\/env\/EnvOptionOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "tofu\/env\/EnvOptionOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "tofu\/env\/EnvOptionOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "members_object" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/env\/EnvOptionOps$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/env\/EnvOptionOps$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/env\/EnvOptionOps$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/env\/EnvOptionOps$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/env\/EnvOptionOps$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/env\/EnvOptionOps$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/env\/EnvOptionOps$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/env\/EnvOptionOps$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/env\/EnvOptionOps$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/env\/EnvOptionOps$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/env\/EnvOptionOps$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/env\/EnvOptionOps$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/env\/EnvOptionOps$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/env\/EnvOptionOps$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/env\/EnvOptionOps$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/env\/EnvOptionOps$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/env\/EnvOptionOps$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/env\/EnvOptionOps$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/env\/EnvOptionOps$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "tofu\/env\/EnvOptionOps.html", "kind" : "class"}, {"name" : "tofu.env.EnvSpecializedFunctions", "trait" : "tofu\/env\/EnvSpecializedFunctions.html", "kind" : "trait", "members_trait" : [{"label" : "converters", "tail" : "", "member" : "tofu.env.EnvSpecializedFunctions.converters", "link" : "tofu\/env\/EnvSpecializedFunctions.html#converters", "kind" : "object"}, {"label" : "conversions", "tail" : "", "member" : "tofu.env.EnvSpecializedFunctions.conversions", "link" : "tofu\/env\/EnvSpecializedFunctions.html#conversions", "kind" : "object"}, {"label" : "parZip6", "tail" : "(fa1: Env[E, A1], fa2: Env[E, A2], fa3: Env[E, A3], fa4: Env[E, A4], fa5: Env[E, A5], fa6: Env[E, A6]): Env[E, (A1, A2, A3, A4, A5, A6)]", "member" : "tofu.env.EnvSpecializedFunctions.parZip6", "link" : "tofu\/env\/EnvSpecializedFunctions.html#parZip6[A1,A2,A3,A4,A5,A6](fa1:tofu.env.Env[E,A1],fa2:tofu.env.Env[E,A2],fa3:tofu.env.Env[E,A3],fa4:tofu.env.Env[E,A4],fa5:tofu.env.Env[E,A5],fa6:tofu.env.Env[E,A6]):tofu.env.Env[E,(A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "parZip5", "tail" : "(fa1: Env[E, A1], fa2: Env[E, A2], fa3: Env[E, A3], fa4: Env[E, A4], fa5: Env[E, A5]): Env[E, (A1, A2, A3, A4, A5)]", "member" : "tofu.env.EnvSpecializedFunctions.parZip5", "link" : "tofu\/env\/EnvSpecializedFunctions.html#parZip5[A1,A2,A3,A4,A5](fa1:tofu.env.Env[E,A1],fa2:tofu.env.Env[E,A2],fa3:tofu.env.Env[E,A3],fa4:tofu.env.Env[E,A4],fa5:tofu.env.Env[E,A5]):tofu.env.Env[E,(A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "parZip4", "tail" : "(fa1: Env[E, A1], fa2: Env[E, A2], fa3: Env[E, A3], fa4: Env[E, A4]): Env[E, (A1, A2, A3, A4)]", "member" : "tofu.env.EnvSpecializedFunctions.parZip4", "link" : "tofu\/env\/EnvSpecializedFunctions.html#parZip4[A1,A2,A3,A4](fa1:tofu.env.Env[E,A1],fa2:tofu.env.Env[E,A2],fa3:tofu.env.Env[E,A3],fa4:tofu.env.Env[E,A4]):tofu.env.Env[E,(A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "parZip3", "tail" : "(fa1: Env[E, A1], fa2: Env[E, A2], fa3: Env[E, A3]): Env[E, (A1, A2, A3)]", "member" : "tofu.env.EnvSpecializedFunctions.parZip3", "link" : "tofu\/env\/EnvSpecializedFunctions.html#parZip3[A1,A2,A3](fa1:tofu.env.Env[E,A1],fa2:tofu.env.Env[E,A2],fa3:tofu.env.Env[E,A3]):tofu.env.Env[E,(A1,A2,A3)]", "kind" : "def"}, {"label" : "parZip2", "tail" : "(fa1: Env[E, A1], fa2: Env[E, A2]): Env[E, (A1, A2)]", "member" : "tofu.env.EnvSpecializedFunctions.parZip2", "link" : "tofu\/env\/EnvSpecializedFunctions.html#parZip2[A1,A2](fa1:tofu.env.Env[E,A1],fa2:tofu.env.Env[E,A2]):tofu.env.Env[E,(A1,A2)]", "kind" : "def"}, {"label" : "map6", "tail" : "(fa1: Env[E, A1], fa2: Env[E, A2], fa3: Env[E, A3], fa4: Env[E, A4], fa5: Env[E, A5], fa6: Env[E, A6])(f: (A1, A2, A3, A4, A5, A6) => R): Env[E, R]", "member" : "tofu.env.EnvSpecializedFunctions.map6", "link" : "tofu\/env\/EnvSpecializedFunctions.html#map6[A1,A2,A3,A4,A5,A6,R](fa1:tofu.env.Env[E,A1],fa2:tofu.env.Env[E,A2],fa3:tofu.env.Env[E,A3],fa4:tofu.env.Env[E,A4],fa5:tofu.env.Env[E,A5],fa6:tofu.env.Env[E,A6])(f:(A1,A2,A3,A4,A5,A6)=>R):tofu.env.Env[E,R]", "kind" : "def"}, {"label" : "map5", "tail" : "(fa1: Env[E, A1], fa2: Env[E, A2], fa3: Env[E, A3], fa4: Env[E, A4], fa5: Env[E, A5])(f: (A1, A2, A3, A4, A5) => R): Env[E, R]", "member" : "tofu.env.EnvSpecializedFunctions.map5", "link" : "tofu\/env\/EnvSpecializedFunctions.html#map5[A1,A2,A3,A4,A5,R](fa1:tofu.env.Env[E,A1],fa2:tofu.env.Env[E,A2],fa3:tofu.env.Env[E,A3],fa4:tofu.env.Env[E,A4],fa5:tofu.env.Env[E,A5])(f:(A1,A2,A3,A4,A5)=>R):tofu.env.Env[E,R]", "kind" : "def"}, {"label" : "map4", "tail" : "(fa1: Env[E, A1], fa2: Env[E, A2], fa3: Env[E, A3], fa4: Env[E, A4])(f: (A1, A2, A3, A4) => R): Env[E, R]", "member" : "tofu.env.EnvSpecializedFunctions.map4", "link" : "tofu\/env\/EnvSpecializedFunctions.html#map4[A1,A2,A3,A4,R](fa1:tofu.env.Env[E,A1],fa2:tofu.env.Env[E,A2],fa3:tofu.env.Env[E,A3],fa4:tofu.env.Env[E,A4])(f:(A1,A2,A3,A4)=>R):tofu.env.Env[E,R]", "kind" : "def"}, {"label" : "map3", "tail" : "(fa1: Env[E, A1], fa2: Env[E, A2], fa3: Env[E, A3])(f: (A1, A2, A3) => R): Env[E, R]", "member" : "tofu.env.EnvSpecializedFunctions.map3", "link" : "tofu\/env\/EnvSpecializedFunctions.html#map3[A1,A2,A3,R](fa1:tofu.env.Env[E,A1],fa2:tofu.env.Env[E,A2],fa3:tofu.env.Env[E,A3])(f:(A1,A2,A3)=>R):tofu.env.Env[E,R]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa1: Env[E, A1], fa2: Env[E, A2])(f: (A1, A2) => R): Env[E, R]", "member" : "tofu.env.EnvSpecializedFunctions.map2", "link" : "tofu\/env\/EnvSpecializedFunctions.html#map2[A1,A2,R](fa1:tofu.env.Env[E,A1],fa2:tofu.env.Env[E,A2])(f:(A1,A2)=>R):tofu.env.Env[E,R]", "kind" : "def"}, {"label" : "parMap6", "tail" : "(fa1: Env[E, A1], fa2: Env[E, A2], fa3: Env[E, A3], fa4: Env[E, A4], fa5: Env[E, A5], fa6: Env[E, A6])(f: (A1, A2, A3, A4, A5, A6) => R): Env[E, R]", "member" : "tofu.env.EnvSpecializedFunctions.parMap6", "link" : "tofu\/env\/EnvSpecializedFunctions.html#parMap6[A1,A2,A3,A4,A5,A6,R](fa1:tofu.env.Env[E,A1],fa2:tofu.env.Env[E,A2],fa3:tofu.env.Env[E,A3],fa4:tofu.env.Env[E,A4],fa5:tofu.env.Env[E,A5],fa6:tofu.env.Env[E,A6])(f:(A1,A2,A3,A4,A5,A6)=>R):tofu.env.Env[E,R]", "kind" : "def"}, {"label" : "parMap5", "tail" : "(fa1: Env[E, A1], fa2: Env[E, A2], fa3: Env[E, A3], fa4: Env[E, A4], fa5: Env[E, A5])(f: (A1, A2, A3, A4, A5) => R): Env[E, R]", "member" : "tofu.env.EnvSpecializedFunctions.parMap5", "link" : "tofu\/env\/EnvSpecializedFunctions.html#parMap5[A1,A2,A3,A4,A5,R](fa1:tofu.env.Env[E,A1],fa2:tofu.env.Env[E,A2],fa3:tofu.env.Env[E,A3],fa4:tofu.env.Env[E,A4],fa5:tofu.env.Env[E,A5])(f:(A1,A2,A3,A4,A5)=>R):tofu.env.Env[E,R]", "kind" : "def"}, {"label" : "parMap4", "tail" : "(fa1: Env[E, A1], fa2: Env[E, A2], fa3: Env[E, A3], fa4: Env[E, A4])(f: (A1, A2, A3, A4) => R): Env[E, R]", "member" : "tofu.env.EnvSpecializedFunctions.parMap4", "link" : "tofu\/env\/EnvSpecializedFunctions.html#parMap4[A1,A2,A3,A4,R](fa1:tofu.env.Env[E,A1],fa2:tofu.env.Env[E,A2],fa3:tofu.env.Env[E,A3],fa4:tofu.env.Env[E,A4])(f:(A1,A2,A3,A4)=>R):tofu.env.Env[E,R]", "kind" : "def"}, {"label" : "parMap3", "tail" : "(fa1: Env[E, A1], fa2: Env[E, A2], fa3: Env[E, A3])(f: (A1, A2, A3) => R): Env[E, R]", "member" : "tofu.env.EnvSpecializedFunctions.parMap3", "link" : "tofu\/env\/EnvSpecializedFunctions.html#parMap3[A1,A2,A3,R](fa1:tofu.env.Env[E,A1],fa2:tofu.env.Env[E,A2],fa3:tofu.env.Env[E,A3])(f:(A1,A2,A3)=>R):tofu.env.Env[E,R]", "kind" : "def"}, {"label" : "parMap2", "tail" : "(fa1: Env[E, A1], fa2: Env[E, A2])(f: (A1, A2) => R): Env[E, R]", "member" : "tofu.env.EnvSpecializedFunctions.parMap2", "link" : "tofu\/env\/EnvSpecializedFunctions.html#parMap2[A1,A2,R](fa1:tofu.env.Env[E,A1],fa2:tofu.env.Env[E,A2])(f:(A1,A2)=>R):tofu.env.Env[E,R]", "kind" : "def"}, {"label" : "opt", "tail" : "", "member" : "tofu.env.EnvSpecializedFunctions.opt", "link" : "tofu\/env\/EnvSpecializedFunctions.html#opt", "kind" : "object"}, {"label" : "wanderUnordered", "tail" : "(in: M[A])(f: (A) => F[B]): F[List[B]]", "member" : "tofu.env.EnvSpecializedFunctions.wanderUnordered", "link" : "tofu\/env\/EnvSpecializedFunctions.html#wanderUnordered[A,B,M[X]<:Iterable[X]](in:M[A])(f:A=>EnvSpecializedFunctions.this.F[B]):EnvSpecializedFunctions.this.F[List[B]]", "kind" : "def"}, {"label" : "gatherUnordered", "tail" : "(in: Iterable[F[A]]): F[List[A]]", "member" : "tofu.env.EnvSpecializedFunctions.gatherUnordered", "link" : "tofu\/env\/EnvSpecializedFunctions.html#gatherUnordered[A](in:Iterable[EnvSpecializedFunctions.this.F[A]]):EnvSpecializedFunctions.this.F[List[A]]", "kind" : "def"}, {"label" : "wander", "tail" : "(in: M[A])(f: (A) => F[B])(cbf: BuildFrom[M[A], B, M[B]]): F[M[B]]", "member" : "tofu.env.EnvSpecializedFunctions.wander", "link" : "tofu\/env\/EnvSpecializedFunctions.html#wander[A,B,M[X]<:Iterable[X]](in:M[A])(f:A=>EnvSpecializedFunctions.this.F[B])(implicitcbf:monix.execution.compat.BuildFrom[M[A],B,M[B]]):EnvSpecializedFunctions.this.F[M[B]]", "kind" : "def"}, {"label" : "gather", "tail" : "(in: M[F[A]])(cbf: BuildFrom[M[F[A]], A, M[A]]): F[M[A]]", "member" : "tofu.env.EnvSpecializedFunctions.gather", "link" : "tofu\/env\/EnvSpecializedFunctions.html#gather[A,M[X]<:Iterable[X]](in:M[EnvSpecializedFunctions.this.F[A]])(implicitcbf:monix.execution.compat.BuildFrom[M[EnvSpecializedFunctions.this.F[A]],A,M[A]]):EnvSpecializedFunctions.this.F[M[A]]", "kind" : "def"}, {"label" : "traverse", "tail" : "(in: M[A])(f: (A) => F[B])(cbf: BuildFrom[M[A], B, M[B]]): F[M[B]]", "member" : "tofu.env.EnvSpecializedFunctions.traverse", "link" : "tofu\/env\/EnvSpecializedFunctions.html#traverse[A,B,M[X]<:Iterable[X]](in:M[A])(f:A=>EnvSpecializedFunctions.this.F[B])(implicitcbf:monix.execution.compat.BuildFrom[M[A],B,M[B]]):EnvSpecializedFunctions.this.F[M[B]]", "kind" : "def"}, {"label" : "sequence", "tail" : "(in: M[F[A]])(cbf: BuildFrom[M[F[A]], A, M[A]]): F[M[A]]", "member" : "tofu.env.EnvSpecializedFunctions.sequence", "link" : "tofu\/env\/EnvSpecializedFunctions.html#sequence[A,M[X]<:Iterable[X]](in:M[EnvSpecializedFunctions.this.F[A]])(implicitcbf:monix.execution.compat.BuildFrom[M[EnvSpecializedFunctions.this.F[A]],A,M[A]]):EnvSpecializedFunctions.this.F[M[A]]", "kind" : "def"}, {"label" : "racePair", "tail" : "(ta: F[A], tb: F[B]): F[Either[(A, Fiber[F, B]), (Fiber[F, A], B)]]", "member" : "tofu.env.EnvSpecializedFunctions.racePair", "link" : "tofu\/env\/EnvSpecializedFunctions.html#racePair[A,B](ta:EnvSpecializedFunctions.this.F[A],tb:EnvSpecializedFunctions.this.F[B]):EnvSpecializedFunctions.this.F[Either[(A,cats.effect.Fiber[EnvSpecializedFunctions.this.F,B]),(cats.effect.Fiber[EnvSpecializedFunctions.this.F,A],B)]]", "kind" : "def"}, {"label" : "raceMany", "tail" : "(tta: Iterable[F[A]]): F[A]", "member" : "tofu.env.EnvSpecializedFunctions.raceMany", "link" : "tofu\/env\/EnvSpecializedFunctions.html#raceMany[A](tta:Iterable[EnvSpecializedFunctions.this.F[A]]):EnvSpecializedFunctions.this.F[A]", "kind" : "def"}, {"label" : "race", "tail" : "(ta: F[A], tb: F[B]): F[Either[A, B]]", "member" : "tofu.env.EnvSpecializedFunctions.race", "link" : "tofu\/env\/EnvSpecializedFunctions.html#race[A,B](ta:EnvSpecializedFunctions.this.F[A],tb:EnvSpecializedFunctions.this.F[B]):EnvSpecializedFunctions.this.F[Either[A,B]]", "kind" : "def"}, {"label" : "tailRecM", "tail" : "(a: A)(f: (A) => F[Either[A, B]]): F[B]", "member" : "tofu.env.EnvSpecializedFunctions.tailRecM", "link" : "tofu\/env\/EnvSpecializedFunctions.html#tailRecM[A,B](a:A)(f:A=>EnvSpecializedFunctions.this.F[Either[A,B]]):EnvSpecializedFunctions.this.F[B]", "kind" : "def"}, {"label" : "fromCoevalFunc", "tail" : "(fca: (E) => Coeval[A]): F[A]", "member" : "tofu.env.EnvSpecializedFunctions.fromCoevalFunc", "link" : "tofu\/env\/EnvSpecializedFunctions.html#fromCoevalFunc[A](fca:E=>monix.eval.Coeval[A]):EnvSpecializedFunctions.this.F[A]", "kind" : "def"}, {"label" : "fromCoeval", "tail" : "(ca: Coeval[A]): F[A]", "member" : "tofu.env.EnvSpecializedFunctions.fromCoeval", "link" : "tofu\/env\/EnvSpecializedFunctions.html#fromCoeval[A](ca:monix.eval.Coeval[A]):EnvSpecializedFunctions.this.F[A]", "kind" : "def"}, {"label" : "fromIOFunc", "tail" : "(fioa: (E) => IO[A]): F[A]", "member" : "tofu.env.EnvSpecializedFunctions.fromIOFunc", "link" : "tofu\/env\/EnvSpecializedFunctions.html#fromIOFunc[A](fioa:E=>cats.effect.IO[A]):EnvSpecializedFunctions.this.F[A]", "kind" : "def"}, {"label" : "fromIO", "tail" : "(ioa: IO[A]): F[A]", "member" : "tofu.env.EnvSpecializedFunctions.fromIO", "link" : "tofu\/env\/EnvSpecializedFunctions.html#fromIO[A](ioa:cats.effect.IO[A]):EnvSpecializedFunctions.this.F[A]", "kind" : "def"}, {"label" : "fromEvalFunc", "tail" : "(fea: (E) => Eval[A]): F[A]", "member" : "tofu.env.EnvSpecializedFunctions.fromEvalFunc", "link" : "tofu\/env\/EnvSpecializedFunctions.html#fromEvalFunc[A](fea:E=>cats.Eval[A]):EnvSpecializedFunctions.this.F[A]", "kind" : "def"}, {"label" : "fromEval", "tail" : "(ea: Eval[A]): F[A]", "member" : "tofu.env.EnvSpecializedFunctions.fromEval", "link" : "tofu\/env\/EnvSpecializedFunctions.html#fromEval[A](ea:cats.Eval[A]):EnvSpecializedFunctions.this.F[A]", "kind" : "def"}, {"label" : "fromEffectFunc", "tail" : "(ffa: (E) => G[A])(arg0: Effect[G]): F[A]", "member" : "tofu.env.EnvSpecializedFunctions.fromEffectFunc", "link" : "tofu\/env\/EnvSpecializedFunctions.html#fromEffectFunc[G[_],A](ffa:E=>G[A])(implicitevidence$2:cats.effect.Effect[G]):EnvSpecializedFunctions.this.F[A]", "kind" : "def"}, {"label" : "fromEffect", "tail" : "(fa: G[A])(arg0: Effect[G]): F[A]", "member" : "tofu.env.EnvSpecializedFunctions.fromEffect", "link" : "tofu\/env\/EnvSpecializedFunctions.html#fromEffect[G[_],A](fa:G[A])(implicitevidence$1:cats.effect.Effect[G]):EnvSpecializedFunctions.this.F[A]", "kind" : "def"}, {"label" : "fromTryFunc", "tail" : "(ft: (E) => Try[A]): F[A]", "member" : "tofu.env.EnvSpecializedFunctions.fromTryFunc", "link" : "tofu\/env\/EnvSpecializedFunctions.html#fromTryFunc[A](ft:E=>scala.util.Try[A]):EnvSpecializedFunctions.this.F[A]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(e: Either[Throwable, A]): F[A]", "member" : "tofu.env.EnvSpecializedFunctions.fromEither", "link" : "tofu\/env\/EnvSpecializedFunctions.html#fromEither[A](e:Either[Throwable,A]):EnvSpecializedFunctions.this.F[A]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[A]): F[A]", "member" : "tofu.env.EnvSpecializedFunctions.fromTry", "link" : "tofu\/env\/EnvSpecializedFunctions.html#fromTry[A](t:scala.util.Try[A]):EnvSpecializedFunctions.this.F[A]", "kind" : "def"}, {"label" : "fromFunc", "tail" : "(f: (E) => A): F[A]", "member" : "tofu.env.EnvSpecializedFunctions.fromFunc", "link" : "tofu\/env\/EnvSpecializedFunctions.html#fromFunc[A](f:E=>A):EnvSpecializedFunctions.this.F[A]", "kind" : "def"}, {"label" : "fromFuture", "tail" : "(future: Future[A]): F[A]", "member" : "tofu.env.EnvSpecializedFunctions.fromFuture", "link" : "tofu\/env\/EnvSpecializedFunctions.html#fromFuture[A](future:scala.concurrent.Future[A]):EnvSpecializedFunctions.this.F[A]", "kind" : "def"}, {"label" : "fromReaderT", "tail" : "(reader: ReaderT[Task, E, A]): F[A]", "member" : "tofu.env.EnvSpecializedFunctions.fromReaderT", "link" : "tofu\/env\/EnvSpecializedFunctions.html#fromReaderT[A](reader:cats.data.ReaderT[monix.eval.Task,E,A]):EnvSpecializedFunctions.this.F[A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(f: F[A]): F[Either[Throwable, A]]", "member" : "tofu.env.EnvSpecializedFunctions.attempt", "link" : "tofu\/env\/EnvSpecializedFunctions.html#attempt[A](f:EnvSpecializedFunctions.this.F[A]):EnvSpecializedFunctions.this.F[Either[Throwable,A]]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(throwable: Throwable): F[A]", "member" : "tofu.env.EnvSpecializedFunctions.raiseError", "link" : "tofu\/env\/EnvSpecializedFunctions.html#raiseError[A](throwable:Throwable):EnvSpecializedFunctions.this.F[A]", "kind" : "def"}, {"label" : "deferFutureAction", "tail" : "(futAct: (Scheduler) => Future[A]): F[A]", "member" : "tofu.env.EnvSpecializedFunctions.deferFutureAction", "link" : "tofu\/env\/EnvSpecializedFunctions.html#deferFutureAction[A](futAct:monix.execution.Scheduler=>scala.concurrent.Future[A]):EnvSpecializedFunctions.this.F[A]", "kind" : "def"}, {"label" : "deferFutureContext", "tail" : "(future: (E) => Future[A]): F[A]", "member" : "tofu.env.EnvSpecializedFunctions.deferFutureContext", "link" : "tofu\/env\/EnvSpecializedFunctions.html#deferFutureContext[A](future:E=>scala.concurrent.Future[A]):EnvSpecializedFunctions.this.F[A]", "kind" : "def"}, {"label" : "deferFuture", "tail" : "(future: => Future[A]): F[A]", "member" : "tofu.env.EnvSpecializedFunctions.deferFuture", "link" : "tofu\/env\/EnvSpecializedFunctions.html#deferFuture[A](future:=>scala.concurrent.Future[A]):EnvSpecializedFunctions.this.F[A]", "kind" : "def"}, {"label" : "deferTask", "tail" : "(x: => Task[A]): F[A]", "member" : "tofu.env.EnvSpecializedFunctions.deferTask", "link" : "tofu\/env\/EnvSpecializedFunctions.html#deferTask[A](x:=>monix.eval.Task[A]):EnvSpecializedFunctions.this.F[A]", "kind" : "def"}, {"label" : "defer", "tail" : "(x: => F[A]): F[A]", "member" : "tofu.env.EnvSpecializedFunctions.defer", "link" : "tofu\/env\/EnvSpecializedFunctions.html#defer[A](x:=>EnvSpecializedFunctions.this.F[A]):EnvSpecializedFunctions.this.F[A]", "kind" : "def"}, {"label" : "delay", "tail" : "(x: => A): F[A]", "member" : "tofu.env.EnvSpecializedFunctions.delay", "link" : "tofu\/env\/EnvSpecializedFunctions.html#delay[A](x:=>A):EnvSpecializedFunctions.this.F[A]", "kind" : "def"}, {"label" : "fromTask", "tail" : "(task: Task[A]): F[A]", "member" : "tofu.env.EnvSpecializedFunctions.fromTask", "link" : "tofu\/env\/EnvSpecializedFunctions.html#fromTask[A](task:monix.eval.Task[A]):EnvSpecializedFunctions.this.F[A]", "kind" : "def"}, {"label" : "marMap2", "tail" : "(fa: F[A], fb: F[B])(f: (A, B) => C): F[C]", "member" : "tofu.env.EnvSpecializedFunctions.marMap2", "link" : "tofu\/env\/EnvSpecializedFunctions.html#marMap2[A,B,C](fa:EnvSpecializedFunctions.this.F[A],fb:EnvSpecializedFunctions.this.F[B])(f:(A,B)=>C):EnvSpecializedFunctions.this.F[C]", "kind" : "def"}, {"label" : "sleep", "tail" : "(duration: FiniteDuration): F[Unit]", "member" : "tofu.env.EnvSpecializedFunctions.sleep", "link" : "tofu\/env\/EnvSpecializedFunctions.html#sleep(duration:scala.concurrent.duration.FiniteDuration):EnvSpecializedFunctions.this.F[Unit]", "kind" : "def"}, {"label" : "shift", "tail" : "(ec: ExecutionContext): F[Unit]", "member" : "tofu.env.EnvSpecializedFunctions.shift", "link" : "tofu\/env\/EnvSpecializedFunctions.html#shift(ec:scala.concurrent.ExecutionContext):EnvSpecializedFunctions.this.F[Unit]", "kind" : "def"}, {"label" : "shift", "tail" : ": F[Unit]", "member" : "tofu.env.EnvSpecializedFunctions.shift", "link" : "tofu\/env\/EnvSpecializedFunctions.html#shift:EnvSpecializedFunctions.this.F[Unit]", "kind" : "val"}, {"label" : "millis", "tail" : ": F[Long]", "member" : "tofu.env.EnvSpecializedFunctions.millis", "link" : "tofu\/env\/EnvSpecializedFunctions.html#millis:EnvSpecializedFunctions.this.F[Long]", "kind" : "val"}, {"label" : "scheduler", "tail" : ": F[Scheduler]", "member" : "tofu.env.EnvSpecializedFunctions.scheduler", "link" : "tofu\/env\/EnvSpecializedFunctions.html#scheduler:EnvSpecializedFunctions.this.F[monix.execution.Scheduler]", "kind" : "val"}, {"label" : "unit", "tail" : ": F[Unit]", "member" : "tofu.env.EnvSpecializedFunctions.unit", "link" : "tofu\/env\/EnvSpecializedFunctions.html#unit:EnvSpecializedFunctions.this.F[Unit]", "kind" : "val"}, {"label" : "withContextDelay", "tail" : "(f: (E) => A): F[A]", "member" : "tofu.env.EnvSpecializedFunctions.withContextDelay", "link" : "tofu\/env\/EnvSpecializedFunctions.html#withContextDelay[A](f:E=>A):EnvSpecializedFunctions.this.F[A]", "kind" : "def"}, {"label" : "withContextFork", "tail" : "(f: (E) => A): F[A]", "member" : "tofu.env.EnvSpecializedFunctions.withContextFork", "link" : "tofu\/env\/EnvSpecializedFunctions.html#withContextFork[A](f:E=>A):EnvSpecializedFunctions.this.F[A]", "kind" : "def"}, {"label" : "withContextNow", "tail" : "(f: (E) => A): F[A]", "member" : "tofu.env.EnvSpecializedFunctions.withContextNow", "link" : "tofu\/env\/EnvSpecializedFunctions.html#withContextNow[A](f:E=>A):EnvSpecializedFunctions.this.F[A]", "kind" : "def"}, {"label" : "context", "tail" : ": F[E]", "member" : "tofu.env.EnvSpecializedFunctions.context", "link" : "tofu\/env\/EnvSpecializedFunctions.html#context:EnvSpecializedFunctions.this.F[E]", "kind" : "val"}, {"label" : "pure", "tail" : "(x: A): F[A]", "member" : "tofu.env.EnvSpecializedFunctions.pure", "link" : "tofu\/env\/EnvSpecializedFunctions.html#pure[A](x:A):EnvSpecializedFunctions.this.F[A]", "kind" : "def"}, {"label" : "later", "tail" : "(x: => A): F[A]", "member" : "tofu.env.EnvSpecializedFunctions.later", "link" : "tofu\/env\/EnvSpecializedFunctions.html#later[A](x:=>A):EnvSpecializedFunctions.this.F[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(f: (E) => Task[A]): F[A]", "member" : "tofu.env.EnvSpecializedFunctions.apply", "link" : "tofu\/env\/EnvSpecializedFunctions.html#apply[A](f:E=>monix.eval.Task[A]):EnvSpecializedFunctions.this.F[A]", "kind" : "def"}, {"label" : "F", "tail" : "", "member" : "tofu.env.EnvSpecializedFunctions.F", "link" : "tofu\/env\/EnvSpecializedFunctions.html#F[A]=tofu.env.Env[E,A]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/env\/EnvSpecializedFunctions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/env\/EnvSpecializedFunctions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/env\/EnvSpecializedFunctions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/env\/EnvSpecializedFunctions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/env\/EnvSpecializedFunctions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/env\/EnvSpecializedFunctions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/env\/EnvSpecializedFunctions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/env\/EnvSpecializedFunctions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/env\/EnvSpecializedFunctions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/env\/EnvSpecializedFunctions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/env\/EnvSpecializedFunctions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/env\/EnvSpecializedFunctions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/env\/EnvSpecializedFunctions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/env\/EnvSpecializedFunctions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/env\/EnvSpecializedFunctions.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/env\/EnvSpecializedFunctions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/env\/EnvSpecializedFunctions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/env\/EnvSpecializedFunctions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/env\/EnvSpecializedFunctions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "tofu.env.EnvTask", "shortDescription" : "Context independent variation of Env", "members_case class" : [{"label" : "split", "tail" : "(g: Env[B, C]): Env[(E, B), (A, C)]", "member" : "tofu.env.EnvTask.split", "link" : "tofu\/env\/EnvTask.html#split[B,C](g:tofu.env.Env[B,C]):tofu.env.Env[(E,B),(A,C)]", "kind" : "def"}, {"label" : "compose", "tail" : "(g: Env[B, E]): Env[B, A]", "member" : "tofu.env.EnvTask.compose", "link" : "tofu\/env\/EnvTask.html#compose[B](g:tofu.env.Env[B,E]):tofu.env.Env[B,A]", "kind" : "def"}, {"label" : "localP", "tail" : "(f: (E1) => E): Env[E1, A]", "member" : "tofu.env.EnvTask.localP", "link" : "tofu\/env\/EnvTask.html#localP[E1](f:E1=>E):tofu.env.Env[E1,A]", "kind" : "def"}, {"label" : "memoize", "tail" : "(): Env[E, A]", "member" : "tofu.env.EnvTask.memoize", "link" : "tofu\/env\/EnvTask.html#memoize:tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "memoizeOnSuccess", "tail" : "(): Env[E, A]", "member" : "tofu.env.EnvTask.memoizeOnSuccess", "link" : "tofu\/env\/EnvTask.html#memoizeOnSuccess:tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "map2", "tail" : "(eb: Env[E, B])(f: (A, B) => C): Env[E, C]", "member" : "tofu.env.EnvTask.map2", "link" : "tofu\/env\/EnvTask.html#map2[B,C](eb:tofu.env.Env[E,B])(f:(A,B)=>C):tofu.env.Env[E,C]", "kind" : "def"}, {"label" : "mapTask6", "tail" : "(e1: Env[E, B1], e2: Env[E, B2], e3: Env[E, B3], e4: Env[E, B4], e5: Env[E, B5])(f: (Task[A], Task[B1], Task[B2], Task[B3], Task[B4], Task[B5]) => Task[R]): Env[E, R]", "member" : "tofu.env.EnvTask.mapTask6", "link" : "tofu\/env\/EnvTask.html#mapTask6[B1,B2,B3,B4,B5,R](e1:tofu.env.Env[E,B1],e2:tofu.env.Env[E,B2],e3:tofu.env.Env[E,B3],e4:tofu.env.Env[E,B4],e5:tofu.env.Env[E,B5])(f:(monix.eval.Task[A],monix.eval.Task[B1],monix.eval.Task[B2],monix.eval.Task[B3],monix.eval.Task[B4],monix.eval.Task[B5])=>monix.eval.Task[R]):tofu.env.Env[E,R]", "kind" : "def"}, {"label" : "mapTask5", "tail" : "(e1: Env[E, B1], e2: Env[E, B2], e3: Env[E, B3], e4: Env[E, B4])(f: (Task[A], Task[B1], Task[B2], Task[B3], Task[B4]) => Task[R]): Env[E, R]", "member" : "tofu.env.EnvTask.mapTask5", "link" : "tofu\/env\/EnvTask.html#mapTask5[B1,B2,B3,B4,R](e1:tofu.env.Env[E,B1],e2:tofu.env.Env[E,B2],e3:tofu.env.Env[E,B3],e4:tofu.env.Env[E,B4])(f:(monix.eval.Task[A],monix.eval.Task[B1],monix.eval.Task[B2],monix.eval.Task[B3],monix.eval.Task[B4])=>monix.eval.Task[R]):tofu.env.Env[E,R]", "kind" : "def"}, {"label" : "mapTask4", "tail" : "(e1: Env[E, B1], e2: Env[E, B2], e3: Env[E, B3])(f: (Task[A], Task[B1], Task[B2], Task[B3]) => Task[R]): Env[E, R]", "member" : "tofu.env.EnvTask.mapTask4", "link" : "tofu\/env\/EnvTask.html#mapTask4[B1,B2,B3,R](e1:tofu.env.Env[E,B1],e2:tofu.env.Env[E,B2],e3:tofu.env.Env[E,B3])(f:(monix.eval.Task[A],monix.eval.Task[B1],monix.eval.Task[B2],monix.eval.Task[B3])=>monix.eval.Task[R]):tofu.env.Env[E,R]", "kind" : "def"}, {"label" : "mapTask3", "tail" : "(e1: Env[E, B1], e2: Env[E, B2])(f: (Task[A], Task[B1], Task[B2]) => Task[D]): Env[E, D]", "member" : "tofu.env.EnvTask.mapTask3", "link" : "tofu\/env\/EnvTask.html#mapTask3[B1,B2,D](e1:tofu.env.Env[E,B1],e2:tofu.env.Env[E,B2])(f:(monix.eval.Task[A],monix.eval.Task[B1],monix.eval.Task[B2])=>monix.eval.Task[D]):tofu.env.Env[E,D]", "kind" : "def"}, {"label" : "mapTask2", "tail" : "(eb: Env[E, B])(f: (Task[A], Task[B]) => Task[C]): Env[E, C]", "member" : "tofu.env.EnvTask.mapTask2", "link" : "tofu\/env\/EnvTask.html#mapTask2[B,C](eb:tofu.env.Env[E,B])(f:(monix.eval.Task[A],monix.eval.Task[B])=>monix.eval.Task[C]):tofu.env.Env[E,C]", "kind" : "def"}, {"label" : "mapTask", "tail" : "(f: (Task[A]) => Task[B]): Env[E, B]", "member" : "tofu.env.EnvTask.mapTask", "link" : "tofu\/env\/EnvTask.html#mapTask[B](f:monix.eval.Task[A]=>monix.eval.Task[B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "run", "tail" : "(ctx: E): Task[A]", "member" : "tofu.env.EnvTask.run", "link" : "tofu\/env\/EnvTask.html#run(ctx:E):monix.eval.Task[A]", "kind" : "def"}, {"member" : "tofu.env.EnvTask#<init>", "error" : "unsupported entity"}, {"label" : "ta", "tail" : ": Task[A]", "member" : "tofu.env.EnvTask.ta", "link" : "tofu\/env\/EnvTask.html#ta:monix.eval.Task[A]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "tofu\/env\/EnvTask.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "toReaderT", "tail" : "(): ReaderT[Task, E, A]", "member" : "tofu.env.Env.toReaderT", "link" : "tofu\/env\/EnvTask.html#toReaderT:cats.data.ReaderT[monix.eval.Task,E,A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "choice", "tail" : "(f: Env[E1, A]): Env[Either[E, E1], A]", "member" : "tofu.env.Env.choice", "link" : "tofu\/env\/EnvTask.html#choice[E1](f:tofu.env.Env[E1,A@scala.annotation.unchecked.uncheckedVariance]):tofu.env.Env[Either[E,E1],A]", "kind" : "def"}, {"label" : "right", "tail" : "(): Env[Either[B, E], Either[B, A]]", "member" : "tofu.env.Env.right", "link" : "tofu\/env\/EnvTask.html#right[B]:tofu.env.Env[Either[B,E],Either[B,A]]", "kind" : "def"}, {"label" : "left", "tail" : "(): Env[Either[E, B], Either[A, B]]", "member" : "tofu.env.Env.left", "link" : "tofu\/env\/EnvTask.html#left[B]:tofu.env.Env[Either[E,B],Either[A,B]]", "kind" : "def"}, {"label" : "dimap", "tail" : "(f: (B) => E)(g: (A) => C): Env[B, C]", "member" : "tofu.env.Env.dimap", "link" : "tofu\/env\/EnvTask.html#dimap[B,C](f:B=>E)(g:A=>C):tofu.env.Env[B,C]", "kind" : "def"}, {"label" : "second", "tail" : "(): Env[(B, E), (B, A)]", "member" : "tofu.env.Env.second", "link" : "tofu\/env\/EnvTask.html#second[B]:tofu.env.Env[(B,E),(B,A)]", "kind" : "def"}, {"label" : "first", "tail" : "(): Env[(E, B), (A, B)]", "member" : "tofu.env.Env.first", "link" : "tofu\/env\/EnvTask.html#first[B]:tofu.env.Env[(E,B),(A,B)]", "kind" : "def"}, {"label" : "choose", "tail" : "(g: Env[B, C]): Env[Either[E, B], Either[A, C]]", "member" : "tofu.env.Env.choose", "link" : "tofu\/env\/EnvTask.html#choose[B,C](g:tofu.env.Env[B,C]):tofu.env.Env[Either[E,B],Either[A,C]]", "kind" : "def"}, {"label" : "startAndForget", "tail" : "(): Env[E, Unit]", "member" : "tofu.env.Env.startAndForget", "link" : "tofu\/env\/EnvTask.html#startAndForget:tofu.env.Env[E,Unit]", "kind" : "def"}, {"label" : "forkAndForget", "tail" : "(): Env[E, Unit]", "member" : "tofu.env.Env.forkAndForget", "link" : "tofu\/env\/EnvTask.html#forkAndForget:tofu.env.Env[E,Unit]", "kind" : "def"}, {"label" : "fork", "tail" : "(): Env[E, Fiber[[β$1$]Env[E, β$1$], A]]", "member" : "tofu.env.Env.fork", "link" : "tofu\/env\/EnvTask.html#fork:tofu.env.Env[E,cats.effect.Fiber[[β$1$]tofu.env.Env[E,β$1$],A@scala.annotation.unchecked.uncheckedVariance]]", "kind" : "def"}, {"label" : "executeOn", "tail" : "(s: Scheduler, forceAsync: Boolean): Env[E, A]", "member" : "tofu.env.Env.executeOn", "link" : "tofu\/env\/EnvTask.html#executeOn(s:monix.execution.Scheduler,forceAsync:Boolean):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "executeAsync", "tail" : "(): Env[E, A]", "member" : "tofu.env.Env.executeAsync", "link" : "tofu\/env\/EnvTask.html#executeAsync:tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "asyncBoundary", "tail" : "(s: Scheduler): Env[E, A]", "member" : "tofu.env.Env.asyncBoundary", "link" : "tofu\/env\/EnvTask.html#asyncBoundary(s:monix.execution.Scheduler):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "asyncBoundary", "tail" : "(): Env[E, A]", "member" : "tofu.env.Env.asyncBoundary", "link" : "tofu\/env\/EnvTask.html#asyncBoundary:tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "uncancelable", "tail" : "(): Env[E, A]", "member" : "tofu.env.Env.uncancelable", "link" : "tofu\/env\/EnvTask.html#uncancelable:tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "cancelable", "tail" : "(): Env[E, A]", "member" : "tofu.env.Env.cancelable", "link" : "tofu\/env\/EnvTask.html#cancelable:tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "doOnFinish", "tail" : "(f: (Option[Throwable]) => Env[E, Unit]): Env[E, A]", "member" : "tofu.env.Env.doOnFinish", "link" : "tofu\/env\/EnvTask.html#doOnFinish(f:Option[Throwable]=>tofu.env.Env[E,Unit]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "bracketСase", "tail" : "(use: (A) => Env[E, B])(release: (A, ExitCase[Throwable]) => Env[E, Unit]): Env[E, B]", "member" : "tofu.env.Env.bracketСase", "link" : "tofu\/env\/EnvTask.html#bracketСase[B](use:A=>tofu.env.Env[E,B])(release:(A,cats.effect.ExitCase[Throwable])=>tofu.env.Env[E,Unit]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "bracketE", "tail" : "(use: (A) => Env[E, B])(release: (A, Either[Option[Throwable], B]) => Env[E, Unit]): Env[E, B]", "member" : "tofu.env.Env.bracketE", "link" : "tofu\/env\/EnvTask.html#bracketE[B](use:A=>tofu.env.Env[E,B])(release:(A,Either[Option[Throwable],B])=>tofu.env.Env[E,Unit]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "bracket", "tail" : "(use: (A) => Env[E, B])(release: (A) => Env[E, Unit]): Env[E, B]", "member" : "tofu.env.Env.bracket", "link" : "tofu\/env\/EnvTask.html#bracket[B](use:A=>tofu.env.Env[E,B])(release:A=>tofu.env.Env[E,Unit]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "start", "tail" : "(): Env[E, Fiber[[β$0$]Env[E, β$0$], A]]", "member" : "tofu.env.Env.start", "link" : "tofu\/env\/EnvTask.html#start:tofu.env.Env[E,cats.effect.Fiber[[β$0$]tofu.env.Env[E,β$0$],A@scala.annotation.unchecked.uncheckedVariance]]", "kind" : "def"}, {"label" : "onCancelRaiseError", "tail" : "(e: Throwable): Env[E, A]", "member" : "tofu.env.Env.onCancelRaiseError", "link" : "tofu\/env\/EnvTask.html#onCancelRaiseError(e:Throwable):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "doOnCancelT", "tail" : "(callback: Task[Unit]): Env[E, A]", "member" : "tofu.env.Env.doOnCancelT", "link" : "tofu\/env\/EnvTask.html#doOnCancelT(callback:monix.eval.Task[Unit]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "doOnCancel", "tail" : "(callback: Env[E, Unit]): Env[E, A]", "member" : "tofu.env.Env.doOnCancel", "link" : "tofu\/env\/EnvTask.html#doOnCancel(callback:tofu.env.Env[E,Unit]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "timed", "tail" : "(): Env[E, (FiniteDuration, A)]", "member" : "tofu.env.Env.timed", "link" : "tofu\/env\/EnvTask.html#timed:tofu.env.Env[E,(scala.concurrent.duration.FiniteDuration,A)]", "kind" : "def"}, {"label" : "timeoutTo", "tail" : "(dur: FiniteDuration, backup: Env[E, B]): Env[E, B]", "member" : "tofu.env.Env.timeoutTo", "link" : "tofu\/env\/EnvTask.html#timeoutTo[B>:A](dur:scala.concurrent.duration.FiniteDuration,backup:tofu.env.Env[E,B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "timeoutToTask", "tail" : "(dur: FiniteDuration, backup: Task[B]): Env[E, B]", "member" : "tofu.env.Env.timeoutToTask", "link" : "tofu\/env\/EnvTask.html#timeoutToTask[B>:A](dur:scala.concurrent.duration.FiniteDuration,backup:monix.eval.Task[B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "timeout", "tail" : "(dur: FiniteDuration): Env[E, A]", "member" : "tofu.env.Env.timeout", "link" : "tofu\/env\/EnvTask.html#timeout(dur:scala.concurrent.duration.FiniteDuration):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "delayResult", "tail" : "(dur: FiniteDuration): Env[E, A]", "member" : "tofu.env.Env.delayResult", "link" : "tofu\/env\/EnvTask.html#delayResult(dur:scala.concurrent.duration.FiniteDuration):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "delayExcecution", "tail" : "(dur: FiniteDuration): Env[E, A]", "member" : "tofu.env.Env.delayExcecution", "link" : "tofu\/env\/EnvTask.html#delayExcecution(dur:scala.concurrent.duration.FiniteDuration):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "memo", "tail" : "(): Env[E, Env[E, A]]", "member" : "tofu.env.Env.memo", "link" : "tofu\/env\/EnvTask.html#memo:tofu.env.Env[E,tofu.env.Env[E,A]]", "kind" : "def"}, {"label" : "memoSuccess", "tail" : "(): Env[E, Env[E, A]]", "member" : "tofu.env.Env.memoSuccess", "link" : "tofu\/env\/EnvTask.html#memoSuccess:tofu.env.Env[E,tofu.env.Env[E,A]]", "kind" : "def"}, {"label" : "memoizeTaskOnSuccess", "tail" : "(): Env[E, A]", "member" : "tofu.env.Env.memoizeTaskOnSuccess", "link" : "tofu\/env\/EnvTask.html#memoizeTaskOnSuccess:tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "memoizeTask", "tail" : "(): Env[E, A]", "member" : "tofu.env.Env.memoizeTask", "link" : "tofu\/env\/EnvTask.html#memoizeTask:tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "ensureOrCtx", "tail" : "(error: (E, A) => Throwable)(predicate: (A) => Boolean): Env[E, A]", "member" : "tofu.env.Env.ensureOrCtx", "link" : "tofu\/env\/EnvTask.html#ensureOrCtx(error:(E,A)=>Throwable)(predicate:A=>Boolean):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "ensureCtx", "tail" : "(error: (E) => Throwable)(predicate: (A) => Boolean): Env[E, A]", "member" : "tofu.env.Env.ensureCtx", "link" : "tofu\/env\/EnvTask.html#ensureCtx(error:E=>Throwable)(predicate:A=>Boolean):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "ensureOr", "tail" : "(error: (A) => Throwable)(predicate: (A) => Boolean): Env[E, A]", "member" : "tofu.env.Env.ensureOr", "link" : "tofu\/env\/EnvTask.html#ensureOr(error:A=>Throwable)(predicate:A=>Boolean):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "ensure", "tail" : "(error: => Throwable)(predicate: (A) => Boolean): Env[E, A]", "member" : "tofu.env.Env.ensure", "link" : "tofu\/env\/EnvTask.html#ensure(error:=>Throwable)(predicate:A=>Boolean):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(): Env[E, Either[Throwable, A]]", "member" : "tofu.env.Env.attempt", "link" : "tofu\/env\/EnvTask.html#attempt:tofu.env.Env[E,Either[Throwable,A]]", "kind" : "def"}, {"label" : "dematerialize", "tail" : "(_ev: <:<[A, Try[B]]): Env[E, B]", "member" : "tofu.env.Env.dematerialize", "link" : "tofu\/env\/EnvTask.html#dematerialize[B](implicit_ev:A<:<scala.util.Try[B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "materialize", "tail" : "(): Env[E, Try[A]]", "member" : "tofu.env.Env.materialize", "link" : "tofu\/env\/EnvTask.html#materialize:tofu.env.Env[E,scala.util.Try[A]]", "kind" : "def"}, {"label" : "failed", "tail" : "(): Env[E, Throwable]", "member" : "tofu.env.Env.failed", "link" : "tofu\/env\/EnvTask.html#failed:tofu.env.Env[E,Throwable]", "kind" : "def"}, {"label" : "onErrorFallbackTask", "tail" : "(that: Task[B]): Env[E, B]", "member" : "tofu.env.Env.onErrorFallbackTask", "link" : "tofu\/env\/EnvTask.html#onErrorFallbackTask[B>:A](that:monix.eval.Task[B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "onErrorFallbackTo", "tail" : "(that: Env[E, B]): Env[E, B]", "member" : "tofu.env.Env.onErrorFallbackTo", "link" : "tofu\/env\/EnvTask.html#onErrorFallbackTo[B>:A](that:tofu.env.Env[E,B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "onErrorRestartLoopTask", "tail" : "(initial: S)(f: (Throwable, S, (S) => Task[B]) => Task[B]): Env[E, B]", "member" : "tofu.env.Env.onErrorRestartLoopTask", "link" : "tofu\/env\/EnvTask.html#onErrorRestartLoopTask[S,B>:A](initial:S)(f:(Throwable,S,S=>monix.eval.Task[B])=>monix.eval.Task[B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "onErrorRestartLoop", "tail" : "(initial: S)(f: (Throwable, S, (S) => Env[E, B]) => Env[E, B]): Env[E, B]", "member" : "tofu.env.Env.onErrorRestartLoop", "link" : "tofu\/env\/EnvTask.html#onErrorRestartLoop[S,B>:A](initial:S)(f:(Throwable,S,S=>tofu.env.Env[E,B])=>tofu.env.Env[E,B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "onErrorRestartIfCtx", "tail" : "(f: (Throwable, E) => Boolean): Env[E, A]", "member" : "tofu.env.Env.onErrorRestartIfCtx", "link" : "tofu\/env\/EnvTask.html#onErrorRestartIfCtx(f:(Throwable,E)=>Boolean):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "onErrorRestartIf", "tail" : "(f: (Throwable) => Boolean): Env[E, A]", "member" : "tofu.env.Env.onErrorRestartIf", "link" : "tofu\/env\/EnvTask.html#onErrorRestartIf(f:Throwable=>Boolean):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "onErrorRestart", "tail" : "(maxRetries: Long): Env[E, A]", "member" : "tofu.env.Env.onErrorRestart", "link" : "tofu\/env\/EnvTask.html#onErrorRestart(maxRetries:Long):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "onErrorHandleWith", "tail" : "(f: (Throwable) => Env[E, B]): Env[E, B]", "member" : "tofu.env.Env.onErrorHandleWith", "link" : "tofu\/env\/EnvTask.html#onErrorHandleWith[B>:A](f:Throwable=>tofu.env.Env[E,B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "onErrorRecoverWithTask", "tail" : "(f: PartialFunction[Throwable, Task[B]]): Env[E, B]", "member" : "tofu.env.Env.onErrorRecoverWithTask", "link" : "tofu\/env\/EnvTask.html#onErrorRecoverWithTask[B>:A](f:PartialFunction[Throwable,monix.eval.Task[B]]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "onErrorRecoverWith", "tail" : "(f: PartialFunction[Throwable, Env[E, B]]): Env[E, B]", "member" : "tofu.env.Env.onErrorRecoverWith", "link" : "tofu\/env\/EnvTask.html#onErrorRecoverWith[B>:A](f:PartialFunction[Throwable,tofu.env.Env[E,B]]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "onErrorRecover", "tail" : "(f: PartialFunction[Throwable, B]): Env[E, B]", "member" : "tofu.env.Env.onErrorRecover", "link" : "tofu\/env\/EnvTask.html#onErrorRecover[B>:A](f:PartialFunction[Throwable,B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "onErrorHandleCtxTask", "tail" : "(f: (Throwable, E) => Task[B]): Env[E, B]", "member" : "tofu.env.Env.onErrorHandleCtxTask", "link" : "tofu\/env\/EnvTask.html#onErrorHandleCtxTask[B>:A](f:(Throwable,E)=>monix.eval.Task[B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "onErrorHandleCtx", "tail" : "(f: (Throwable, E) => B): Env[E, B]", "member" : "tofu.env.Env.onErrorHandleCtx", "link" : "tofu\/env\/EnvTask.html#onErrorHandleCtx[B>:A](f:(Throwable,E)=>B):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "onErrorHandle", "tail" : "(f: (Throwable) => B): Env[E, B]", "member" : "tofu.env.Env.onErrorHandle", "link" : "tofu\/env\/EnvTask.html#onErrorHandle[B>:A](f:Throwable=>B):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "void", "tail" : "(): Env[E, Unit]", "member" : "tofu.env.Env.void", "link" : "tofu\/env\/EnvTask.html#void:tofu.env.Env[E,Unit]", "kind" : "def"}, {"label" : "flattenT", "tail" : "(_ev: <:<[A, Task[B]]): Env[E, B]", "member" : "tofu.env.Env.flattenT", "link" : "tofu\/env\/EnvTask.html#flattenT[B](implicit_ev:A<:<monix.eval.Task[B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(_ev: <:<[A, Env[E, B]]): Env[E, B]", "member" : "tofu.env.Env.flatten", "link" : "tofu\/env\/EnvTask.html#flatten[B](implicit_ev:A<:<tofu.env.Env[E,B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "<&", "tail" : "(t: Env[E, B]): Env[E, A]", "member" : "tofu.env.Env.<&", "link" : "tofu\/env\/EnvTask.html#<&[B](t:tofu.env.Env[E,B]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "&>", "tail" : "(t: Env[E, B]): Env[E, B]", "member" : "tofu.env.Env.&>", "link" : "tofu\/env\/EnvTask.html#&>[B](t:tofu.env.Env[E,B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "<*", "tail" : "(t: Env[E, B]): Env[E, A]", "member" : "tofu.env.Env.<*", "link" : "tofu\/env\/EnvTask.html#<*[B](t:tofu.env.Env[E,B]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "*>", "tail" : "(t: Env[E, B]): Env[E, B]", "member" : "tofu.env.Env.*>", "link" : "tofu\/env\/EnvTask.html#*>[B](t:tofu.env.Env[E,B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "<<", "tail" : "(t: => Env[E, B]): Env[E, A]", "member" : "tofu.env.Env.<<", "link" : "tofu\/env\/EnvTask.html#<<[B](t:=>tofu.env.Env[E,B]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : ">>", "tail" : "(t: => Env[E, B]): Env[E, B]", "member" : "tofu.env.Env.>>", "link" : "tofu\/env\/EnvTask.html#>>[B](t:=>tofu.env.Env[E,B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "zip", "tail" : "(t: Env[E, B]): Env[E, (A, B)]", "member" : "tofu.env.Env.zip", "link" : "tofu\/env\/EnvTask.html#zip[B](t:tofu.env.Env[E,B]):tofu.env.Env[E,(A,B)]", "kind" : "def"}, {"label" : "parMap3", "tail" : "(eb: Env[E, B], ec: Env[E, C])(f: (A, B, C) => D): Env[E, D]", "member" : "tofu.env.Env.parMap3", "link" : "tofu\/env\/EnvTask.html#parMap3[B,C,D](eb:tofu.env.Env[E,B],ec:tofu.env.Env[E,C])(f:(A,B,C)=>D):tofu.env.Env[E,D]", "kind" : "def"}, {"label" : "parMap2", "tail" : "(eb: Env[E, B])(f: (A, B) => C): Env[E, C]", "member" : "tofu.env.Env.parMap2", "link" : "tofu\/env\/EnvTask.html#parMap2[B,C](eb:tofu.env.Env[E,B])(f:(A,B)=>C):tofu.env.Env[E,C]", "kind" : "def"}, {"label" : "map3", "tail" : "(eb: Env[E, B], ec: Env[E, C])(f: (A, B, C) => D): Env[E, D]", "member" : "tofu.env.Env.map3", "link" : "tofu\/env\/EnvTask.html#map3[B,C,D](eb:tofu.env.Env[E,B],ec:tofu.env.Env[E,C])(f:(A,B,C)=>D):tofu.env.Env[E,D]", "kind" : "def"}, {"label" : "flatTap", "tail" : "(f: (A) => Env[E, B]): Env[E, A]", "member" : "tofu.env.Env.flatTap", "link" : "tofu\/env\/EnvTask.html#flatTap[B](f:A=>tofu.env.Env[E,B]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) => Env[E, B]): Env[E, B]", "member" : "tofu.env.Env.flatMap", "link" : "tofu\/env\/EnvTask.html#flatMap[B](f:A=>tofu.env.Env[E,B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "mapAsync", "tail" : "(f: (A) => Task[B]): Env[E, B]", "member" : "tofu.env.Env.mapAsync", "link" : "tofu\/env\/EnvTask.html#mapAsync[B](f:A=>monix.eval.Task[B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) => B): Env[E, B]", "member" : "tofu.env.Env.map", "link" : "tofu\/env\/EnvTask.html#map[B](f:A=>B):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: Env[A, B]): Env[E, B]", "member" : "tofu.env.Env.andThen", "link" : "tofu\/env\/EnvTask.html#andThen[B](g:tofu.env.Env[A@scala.annotation.unchecked.uncheckedVariance,B]):tofu.env.Env[E,B]", "kind" : "def"}, {"label" : "localPT", "tail" : "(f: (E1) => Task[E]): Env[E1, A]", "member" : "tofu.env.Env.localPT", "link" : "tofu\/env\/EnvTask.html#localPT[E1](f:E1=>monix.eval.Task[E]):tofu.env.Env[E1,A]", "kind" : "def"}, {"label" : "localT", "tail" : "(f: (E) => Task[E]): Env[E, A]", "member" : "tofu.env.Env.localT", "link" : "tofu\/env\/EnvTask.html#localT(f:E=>monix.eval.Task[E]):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "local", "tail" : "(f: (E) => E): Env[E, A]", "member" : "tofu.env.Env.local", "link" : "tofu\/env\/EnvTask.html#local(f:E=>E):tofu.env.Env[E,A]", "kind" : "def"}, {"label" : "runOnComplete", "tail" : "(f: (Try[A]) => Unit)(ctx: E)(s: Scheduler): Cancelable", "member" : "tofu.env.Env.runOnComplete", "link" : "tofu\/env\/EnvTask.html#runOnComplete(f:scala.util.Try[A]=>Unit)(ctx:E)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "def"}, {"label" : "foreachEnv", "tail" : "(f: (A) => Unit): Env[E, Unit]", "member" : "tofu.env.Env.foreachEnv", "link" : "tofu\/env\/EnvTask.html#foreachEnv(f:A=>Unit):tofu.env.Env[E,Unit]", "kind" : "def"}, {"label" : "foreachL", "tail" : "(f: (A) => Unit)(ctx: E): Task[Unit]", "member" : "tofu.env.Env.foreachL", "link" : "tofu\/env\/EnvTask.html#foreachL(f:A=>Unit)(ctx:E):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (A) => Unit)(s: Scheduler, provide: ProvideEnv[E]): CancelableFuture[Unit]", "member" : "tofu.env.Env.foreach", "link" : "tofu\/env\/EnvTask.html#foreach(f:A=>Unit)(implicits:monix.execution.Scheduler,implicitprovide:tofu.env.ProvideEnv[E]):monix.execution.CancelableFuture[Unit]", "kind" : "def"}, {"label" : "runNew", "tail" : "(provideEnv: ProvideEnv[E]): Task[A]", "member" : "tofu.env.Env.runNew", "link" : "tofu\/env\/EnvTask.html#runNew(implicitprovideEnv:tofu.env.ProvideEnv[E]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/env\/EnvTask.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/env\/EnvTask.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/env\/EnvTask.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/env\/EnvTask.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/env\/EnvTask.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/env\/EnvTask.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/env\/EnvTask.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/env\/EnvTask.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/env\/EnvTask.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/env\/EnvTask.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/env\/EnvTask.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/env\/EnvTask.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/env\/EnvTask.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/env\/EnvTask.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/env\/EnvTask.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/env\/EnvTask.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "tofu\/env\/EnvTask.html", "kind" : "case class"}, {"name" : "tofu.env.Memoization", "shortDescription" : "", "object" : "tofu\/env\/Memoization$.html", "members_class" : [{"label" : "getOrElse", "tail" : "(x: Task[A]): Task[A]", "member" : "tofu.env.Memoization.getOrElse", "link" : "tofu\/env\/Memoization.html#getOrElse(x:monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/env\/Memoization.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/env\/Memoization.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/env\/Memoization.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/env\/Memoization.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/env\/Memoization.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/env\/Memoization.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/env\/Memoization.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/env\/Memoization.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/env\/Memoization.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/env\/Memoization.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/env\/Memoization.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/env\/Memoization.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/env\/Memoization.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/env\/Memoization.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/env\/Memoization.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/env\/Memoization.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/env\/Memoization.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/env\/Memoization.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/env\/Memoization.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "unsafe", "tail" : "(): Task[Memoization[A]]", "member" : "tofu.env.Memoization.unsafe", "link" : "tofu\/env\/Memoization$.html#unsafe[A]():monix.eval.Task[tofu.env.Memoization[A]]", "kind" : "def"}, {"label" : "apply", "tail" : "(): Task[Task[Memoization[A]]]", "member" : "tofu.env.Memoization.apply", "link" : "tofu\/env\/Memoization$.html#apply[A]:monix.eval.Task[monix.eval.Task[tofu.env.Memoization[A]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/env\/Memoization$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/env\/Memoization$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/env\/Memoization$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/env\/Memoization$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/env\/Memoization$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/env\/Memoization$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/env\/Memoization$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/env\/Memoization$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/env\/Memoization$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/env\/Memoization$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/env\/Memoization$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/env\/Memoization$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/env\/Memoization$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/env\/Memoization$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/env\/Memoization$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/env\/Memoization$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/env\/Memoization$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/env\/Memoization$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/env\/Memoization$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "tofu\/env\/Memoization.html", "kind" : "class"}, {"name" : "tofu.env.ProvideEnv", "trait" : "tofu\/env\/ProvideEnv.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/env\/ProvideEnv.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/env\/ProvideEnv.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/env\/ProvideEnv.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/env\/ProvideEnv.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/env\/ProvideEnv.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/env\/ProvideEnv.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/env\/ProvideEnv.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/env\/ProvideEnv.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/env\/ProvideEnv.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/env\/ProvideEnv.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/env\/ProvideEnv.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/env\/ProvideEnv.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/env\/ProvideEnv.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/env\/ProvideEnv.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/env\/ProvideEnv.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/env\/ProvideEnv.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/env\/ProvideEnv.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/env\/ProvideEnv.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/env\/ProvideEnv.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "provide", "tail" : "(): Task[E]", "member" : "tofu.env.ProvideEnv.provide", "link" : "tofu\/env\/ProvideEnv.html#provide:monix.eval.Task[E]", "kind" : "abstract def"}], "shortDescription" : ""}], "tofu.optics.macros.internal" : [{"name" : "tofu.optics.macros.internal.Macro", "shortDescription" : "", "object" : "tofu\/optics\/macros\/internal\/Macro$.html", "members_object" : [{"label" : "mkContains", "tail" : "(fieldName: String): PContains[S, T, A, B]", "member" : "tofu.optics.macros.internal.Macro.mkContains", "link" : "tofu\/optics\/macros\/internal\/Macro$.html#mkContains[S,T,A,B](fieldName:String):tofu.optics.PContains[S,T,A,B]", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/macros\/internal\/Macro$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/macros\/internal\/Macro$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/macros\/internal\/Macro$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/macros\/internal\/Macro$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/macros\/internal\/Macro$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/macros\/internal\/Macro$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/macros\/internal\/Macro$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/macros\/internal\/Macro$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/macros\/internal\/Macro$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/macros\/internal\/Macro$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/macros\/internal\/Macro$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/macros\/internal\/Macro$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/macros\/internal\/Macro$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/macros\/internal\/Macro$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/macros\/internal\/Macro$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/macros\/internal\/Macro$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/macros\/internal\/Macro$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/macros\/internal\/Macro$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/macros\/internal\/Macro$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "tofu.data" : [{"name" : "tofu.data.Calc", "object" : "tofu\/data\/Calc$.html", "members_object" : [{"label" : "CalcFunctorInstance", "tail" : "", "member" : "tofu.data.Calc.CalcFunctorInstance", "link" : "tofu\/data\/Calc$.html#CalcFunctorInstance[R,S,E]extendsMonadError[[ε$0$]tofu.data.Calc[R,S,S,E,ε$0$],E]withDefer[[ε$1$]tofu.data.Calc[R,S,S,E,ε$1$]]withStackSafeMonad[[ε$2$]tofu.data.Calc[R,S,S,E,ε$2$]]withBracket[[ε$3$]tofu.data.Calc[R,S,S,E,ε$3$],E]", "kind" : "class"}, {"label" : "calcInstance", "tail" : "(): CalcFunctorInstance[R, S, E]", "member" : "tofu.data.Calc.calcInstance", "link" : "tofu\/data\/Calc$.html#calcInstance[R,S,E]:tofu.data.Calc.CalcFunctorInstance[R,S,E]", "kind" : "implicit def"}, {"label" : "run", "tail" : "(calc: Calc[R, S1, S2, E, A], r: R, init: S1): (S2, Either[E, A])", "member" : "tofu.data.Calc.run", "link" : "tofu\/data\/Calc$.html#run[R,S1,S2,E,A](calc:tofu.data.Calc[R,S1,S2,E,A],r:R,init:S1):(S2,Either[E,A])", "kind" : "def"}, {"label" : "CalcFixedStateOps", "tail" : "", "member" : "tofu.data.Calc.CalcFixedStateOps", "link" : "tofu\/data\/Calc$.html#CalcFixedStateOps[R,S,E,A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "CalcUnsuccessfullOps", "tail" : "", "member" : "tofu.data.Calc.CalcUnsuccessfullOps", "link" : "tofu\/data\/Calc$.html#CalcUnsuccessfullOps[R,S1,S2,E]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "CalcSuccessfullOps", "tail" : "", "member" : "tofu.data.Calc.CalcSuccessfullOps", "link" : "tofu\/data\/Calc$.html#CalcSuccessfullOps[R,S1,S2,A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "invariantOps", "tail" : "", "member" : "tofu.data.Calc.invariantOps", "link" : "tofu\/data\/Calc$.html#invariantOps[R,S1,S2,E,A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "Cont", "tail" : "", "member" : "tofu.data.Calc.Cont", "link" : "tofu\/data\/Calc$.html#Cont[R,S1,S2,S3,E1,E2,A,B]extendsCalc[R,S1,S3,E2,B]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Defer", "tail" : "", "member" : "tofu.data.Calc.Defer", "link" : "tofu\/data\/Calc$.html#Defer[R,S1,S2,E,A]extendsCalc[R,S1,S2,E,A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Raise", "tail" : "", "member" : "tofu.data.Calc.Raise", "link" : "tofu\/data\/Calc$.html#Raise[S,E]extendsCalc.CalcRes[Any,S,S,E,Nothing]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Set", "tail" : "", "member" : "tofu.data.Calc.Set", "link" : "tofu\/data\/Calc$.html#Set[S]extendsCalc.CalcRes[Any,Any,S,Nothing,Unit]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Get", "tail" : "", "member" : "tofu.data.Calc.Get", "link" : "tofu\/data\/Calc$.html#Get[S]extendsCalc.CalcRes[Any,S,S,Nothing,S]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Read", "tail" : "", "member" : "tofu.data.Calc.Read", "link" : "tofu\/data\/Calc$.html#Read[S,R]extendsCalc.CalcRes[R,S,S,Nothing,R]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Pure", "tail" : "", "member" : "tofu.data.Calc.Pure", "link" : "tofu\/data\/Calc$.html#Pure[S,+A]extendsCalc.CalcRes[Any,S,S,Nothing,A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "CalcRes", "tail" : "", "member" : "tofu.data.Calc.CalcRes", "link" : "tofu\/data\/Calc$.html#CalcRes[-R,-S1,+S2,+E,+A]extendsCalc[R,S1,S2,E,A]", "kind" : "sealed trait"}, {"label" : "write", "tail" : "(s: S)(S: Monoid[S]): Calc[Any, S, S, Nothing, Unit]", "member" : "tofu.data.Calc.write", "link" : "tofu\/data\/Calc$.html#write[S](s:S)(implicitS:cats.Monoid[S]):tofu.data.Calc[Any,S,S,Nothing,Unit]", "kind" : "def"}, {"label" : "delay", "tail" : "(x: => A): Calc[Any, S, S, Nothing, A]", "member" : "tofu.data.Calc.delay", "link" : "tofu\/data\/Calc$.html#delay[S,A](x:=>A):tofu.data.Calc[Any,S,S,Nothing,A]", "kind" : "def"}, {"label" : "defer", "tail" : "(x: => Calc[R, S1, S2, E, A]): Defer[R, S1, S2, E, A]", "member" : "tofu.data.Calc.defer", "link" : "tofu\/data\/Calc$.html#defer[R,S1,S2,E,A](x:=>tofu.data.Calc[R,S1,S2,E,A]):tofu.data.Calc.Defer[R,S1,S2,E,A]", "kind" : "def"}, {"label" : "raise", "tail" : "(e: E): Calc[Any, S, S, E, Nothing]", "member" : "tofu.data.Calc.raise", "link" : "tofu\/data\/Calc$.html#raise[S,E](e:E):tofu.data.Calc[Any,S,S,E,Nothing]", "kind" : "def"}, {"label" : "update", "tail" : "(f: (S1) => S2): Calc[Any, S1, S2, Nothing, Unit]", "member" : "tofu.data.Calc.update", "link" : "tofu\/data\/Calc$.html#update[S1,S2](f:S1=>S2):tofu.data.Calc[Any,S1,S2,Nothing,Unit]", "kind" : "def"}, {"label" : "set", "tail" : "(s: S): Calc[Any, Any, S, Nothing, Unit]", "member" : "tofu.data.Calc.set", "link" : "tofu\/data\/Calc$.html#set[S](s:S):tofu.data.Calc[Any,Any,S,Nothing,Unit]", "kind" : "def"}, {"label" : "get", "tail" : "(): Calc[Any, S, S, Nothing, S]", "member" : "tofu.data.Calc.get", "link" : "tofu\/data\/Calc$.html#get[S]:tofu.data.Calc[Any,S,S,Nothing,S]", "kind" : "def"}, {"label" : "read", "tail" : "(): Calc[R, S, S, Nothing, R]", "member" : "tofu.data.Calc.read", "link" : "tofu\/data\/Calc$.html#read[S,R]:tofu.data.Calc[R,S,S,Nothing,R]", "kind" : "def"}, {"label" : "pure", "tail" : "(a: A): Calc[Any, S, S, Nothing, A]", "member" : "tofu.data.Calc.pure", "link" : "tofu\/data\/Calc$.html#pure[S,A](a:A):tofu.data.Calc[Any,S,S,Nothing,A]", "kind" : "def"}, {"label" : "unit", "tail" : "(): Calc[Any, S, S, Nothing, Unit]", "member" : "tofu.data.Calc.unit", "link" : "tofu\/data\/Calc$.html#unit[S]:tofu.data.Calc[Any,S,S,Nothing,Unit]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/data\/Calc$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/data\/Calc$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/data\/Calc$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/data\/Calc$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/data\/Calc$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/data\/Calc$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/data\/Calc$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/data\/Calc$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/data\/Calc$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/data\/Calc$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/data\/Calc$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/data\/Calc$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/data\/Calc$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/data\/Calc$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/data\/Calc$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/data\/Calc$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/data\/Calc$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/data\/Calc$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/data\/Calc$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/data\/Calc.html", "kind" : "trait", "members_trait" : [{"label" : "narrowRead", "tail" : "(): Calc[R1, S1, S2, E, A]", "member" : "tofu.data.Calc.narrowRead", "link" : "tofu\/data\/Calc.html#narrowRead[R1<:R]:tofu.data.Calc[R1,S1,S2,E,A]", "kind" : "def"}, {"label" : "runUnit", "tail" : "(init: S1)(ev: <:<[Unit, R]): (S2, Either[E, A])", "member" : "tofu.data.Calc.runUnit", "link" : "tofu\/data\/Calc.html#runUnit(init:S1)(implicitev:Unit<:<R):(S2,Either[E,A])", "kind" : "final def"}, {"label" : "run", "tail" : "(r: R, init: S1): (S2, Either[E, A])", "member" : "tofu.data.Calc.run", "link" : "tofu\/data\/Calc.html#run(r:R,init:S1):(S2,Either[E,A])", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/data\/Calc.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/data\/Calc.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/data\/Calc.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/data\/Calc.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/data\/Calc.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/data\/Calc.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/data\/Calc.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/data\/Calc.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/data\/Calc.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/data\/Calc.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/data\/Calc.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/data\/Calc.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/data\/Calc.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/data\/Calc.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/data\/Calc.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/data\/Calc.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/data\/Calc.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/data\/Calc.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/data\/Calc.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "tofu.data.Embedded", "shortDescription" : "", "object" : "tofu\/data\/Embedded$.html", "members_object" : [{"label" : "EmbedOps", "tail" : "", "member" : "tofu.data.Embedded.EmbedOps", "link" : "tofu\/data\/Embedded$.html#EmbedOps[F[+_],G[+_],A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "apply", "tail" : "(tfa: F[G[A]]): T[F, G, A]", "member" : "tofu.data.Embedded.apply", "link" : "tofu\/data\/Embedded$.html#apply[F[+_],G[+_],A](tfa:F[G[A]]):tofu.data.Embedded.T[F,G,A]", "kind" : "def"}, {"label" : "Base", "tail" : "", "member" : "tofu.data.Embedded.Base", "link" : "tofu\/data\/Embedded$.html#Base=Any{typeEmbedOpaque}", "kind" : "type"}, {"label" : "EmbedTag", "tail" : "", "member" : "tofu.data.Embedded.EmbedTag", "link" : "tofu\/data\/Embedded$.html#EmbedTagextendsAny", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/data\/Embedded$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/data\/Embedded$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/data\/Embedded$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/data\/Embedded$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/data\/Embedded$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/data\/Embedded$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/data\/Embedded$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/data\/Embedded$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/data\/Embedded$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/data\/Embedded$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/data\/Embedded$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/data\/Embedded$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/data\/Embedded$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/data\/Embedded$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/data\/Embedded$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/data\/Embedded$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/data\/Embedded$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/data\/Embedded$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/data\/Embedded$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"member" : "tofu.data.Embedded.T", "error" : "unsupported entity"}], "kind" : "object"}, {"name" : "tofu.data.Flux", "shortDescription" : "", "object" : "tofu\/data\/Flux$.html", "members_object" : [{"label" : "Stream", "tail" : "", "member" : "tofu.data.Flux.Stream", "link" : "tofu\/data\/Flux$.html#Stream", "kind" : "object"}, {"label" : "toStreamOps", "tail" : "(flux: Flux[F, Option, A]): FluxStreamOps[F, A]", "member" : "tofu.data.Flux.toStreamOps", "link" : "tofu\/data\/Flux$.html#toStreamOps[F[_],A](flux:tofu.data.Flux[F,Option,A]):tofu.data.FluxStreamOps[F,A]", "kind" : "implicit final def"}, {"label" : "toFluxOps", "tail" : "(flux: Flux[F, G, A]): FluxOps[F, G, A]", "member" : "tofu.data.Flux.toFluxOps", "link" : "tofu\/data\/Flux$.html#toFluxOps[F[_],G[_],A](flux:tofu.data.Flux[F,G,A]):tofu.data.FluxOps[F,G,A]", "kind" : "implicit final def"}, {"label" : "Accum", "tail" : "", "member" : "tofu.data.Flux.Accum", "link" : "tofu\/data\/Flux$.html#Accum[+F[_],+R,+A]=tofu.data.Flux[F,[+β$0$]scala.util.Either[R,β$0$],A]", "kind" : "type"}, {"label" : "Stream", "tail" : "", "member" : "tofu.data.Flux.Stream", "link" : "tofu\/data\/Flux$.html#Stream[+F[_],+A]=tofu.data.Flux[F,Option,A]", "kind" : "type"}, {"label" : "Infinite", "tail" : "", "member" : "tofu.data.Flux.Infinite", "link" : "tofu\/data\/Flux$.html#Infinite[+F[_],A]=tofu.data.Flux[F,tofu.data.Identity,A]", "kind" : "type"}, {"label" : "FluxValueExtract", "tail" : "", "member" : "tofu.data.Flux.FluxValueExtract", "link" : "tofu\/data\/Flux$.html#FluxValueExtract[F[_],G[_],A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "apply", "tail" : "(tfa: F[G[(A, Flux[F, G, A])]]): FluxRepr[F, G, A]", "member" : "tofu.data.Flux.apply", "link" : "tofu\/data\/Flux$.html#apply[F[_],G[_],A](tfa:F[G[(A,tofu.data.Flux[F,G,A])]]):tofu.data.Flux.FluxRepr[F,G,A]", "kind" : "def"}, {"label" : "Base", "tail" : "", "member" : "tofu.data.Flux.Base", "link" : "tofu\/data\/Flux$.html#Base=Any{typeFluxOpaque}", "kind" : "type"}, {"label" : "FluxTag", "tail" : "", "member" : "tofu.data.Flux.FluxTag", "link" : "tofu\/data\/Flux$.html#FluxTagextendsAny", "kind" : "trait"}, {"label" : "infiniteApplicative", "tail" : "(arg0: Applicative[F], arg1: Defer[F]): Applicative[[β$10$]FluxRepr[F, [+A]A, β$10$]]", "member" : "tofu.data.FluxInstances.infiniteApplicative", "link" : "tofu\/data\/Flux$.html#infiniteApplicative[F[_]](implicitevidence$10:cats.Applicative[F],implicitevidence$11:cats.Defer[F]):cats.Applicative[[β$10$]tofu.data.Flux.FluxRepr[F,[+A]A,β$10$]]", "kind" : "implicit def"}, {"label" : "accumMonad", "tail" : "(arg0: Monad[F], arg1: Monoid[R]): Monad[[γ$5$]FluxRepr[F, [+β$0$]Either[R, β$0$], γ$5$]] with Alternative[[γ$6$]FluxRepr[F, [+β$0$]Either[R, β$0$], γ$6$]]", "member" : "tofu.data.FluxInstances.accumMonad", "link" : "tofu\/data\/Flux$.html#accumMonad[F[_],R](implicitevidence$8:cats.Monad[F],implicitevidence$9:cats.Monoid[R]):cats.Monad[[γ$5$]tofu.data.Flux.FluxRepr[F,[+β$0$]scala.util.Either[R,β$0$],γ$5$]]withcats.Alternative[[γ$6$]tofu.data.Flux.FluxRepr[F,[+β$0$]scala.util.Either[R,β$0$],γ$6$]]", "kind" : "implicit def"}, {"label" : "streamMonad", "tail" : "(arg0: Monad[F]): Monad[[β$1$]FluxRepr[F, Option, β$1$]] with Alternative[[β$2$]FluxRepr[F, Option, β$2$]]", "member" : "tofu.data.FluxInstances.streamMonad", "link" : "tofu\/data\/Flux$.html#streamMonad[F[_]](implicitevidence$7:cats.Monad[F]):cats.Monad[[β$1$]tofu.data.Flux.FluxRepr[F,Option,β$1$]]withcats.Alternative[[β$2$]tofu.data.Flux.FluxRepr[F,Option,β$2$]]", "kind" : "implicit def"}, {"label" : "fluxFunctor", "tail" : "(arg0: Functor[F], arg1: Functor[G]): Functor[[γ$12$]FluxRepr[F, G, γ$12$]]", "member" : "tofu.data.FluxInstances1.fluxFunctor", "link" : "tofu\/data\/Flux$.html#fluxFunctor[F[_],G[_]](implicitevidence$12:cats.Functor[F],implicitevidence$13:cats.Functor[G]):cats.Functor[[γ$12$]tofu.data.Flux.FluxRepr[F,G,γ$12$]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/data\/Flux$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/data\/Flux$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/data\/Flux$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/data\/Flux$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/data\/Flux$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/data\/Flux$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/data\/Flux$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/data\/Flux$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/data\/Flux$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/data\/Flux$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/data\/Flux$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/data\/Flux$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/data\/Flux$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/data\/Flux$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/data\/Flux$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/data\/Flux$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/data\/Flux$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/data\/Flux$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/data\/Flux$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"member" : "tofu.data.Flux.FluxRepr", "error" : "unsupported entity"}], "kind" : "object"}, {"name" : "tofu.data.FluxFunctor", "shortDescription" : "", "members_class" : [{"label" : "map", "tail" : "(fa: Flux[F, G, A])(f: (A) => B): Flux[F, G, B]", "member" : "tofu.data.FluxFunctor.map", "link" : "tofu\/data\/FluxFunctor.html#map[A,B](fa:tofu.data.Flux[F,G,A])(f:A=>B):tofu.data.Flux[F,G,B]", "kind" : "def"}, {"member" : "tofu.data.FluxFunctor#<init>", "error" : "unsupported entity"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Contravariant[[α]FluxRepr[F, G, G[α]]]", "member" : "cats.Functor.composeContravariant", "link" : "tofu\/data\/FluxFunctor.html#composeContravariant[G[_]](implicitevidence$2:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Functor[G]): Functor[[α]FluxRepr[F, G, G[α]]]", "member" : "cats.Functor.compose", "link" : "tofu\/data\/FluxFunctor.html#compose[G[_]](implicitevidence$1:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "def"}, {"label" : "ifF", "tail" : "(fb: FluxRepr[F, G, Boolean])(ifTrue: => A, ifFalse: => A): FluxRepr[F, G, A]", "member" : "cats.Functor.ifF", "link" : "tofu\/data\/FluxFunctor.html#ifF[A](fb:F[Boolean])(ifTrue:=>A,ifFalse:=>A):F[A]", "kind" : "def"}, {"label" : "unzip", "tail" : "(fab: FluxRepr[F, G, (A, B)]): (FluxRepr[F, G, A], FluxRepr[F, G, B])", "member" : "cats.Functor.unzip", "link" : "tofu\/data\/FluxFunctor.html#unzip[A,B](fab:F[(A,B)]):(F[A],F[B])", "kind" : "def"}, {"label" : "tupleRight", "tail" : "(fa: FluxRepr[F, G, A], b: B): FluxRepr[F, G, (A, B)]", "member" : "cats.Functor.tupleRight", "link" : "tofu\/data\/FluxFunctor.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "def"}, {"label" : "tupleLeft", "tail" : "(fa: FluxRepr[F, G, A], b: B): FluxRepr[F, G, (B, A)]", "member" : "cats.Functor.tupleLeft", "link" : "tofu\/data\/FluxFunctor.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "def"}, {"label" : "as", "tail" : "(fa: FluxRepr[F, G, A], b: B): FluxRepr[F, G, B]", "member" : "cats.Functor.as", "link" : "tofu\/data\/FluxFunctor.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(fa: FluxRepr[F, G, A])(f: (A) => B): FluxRepr[F, G, (A, B)]", "member" : "cats.Functor.fproduct", "link" : "tofu\/data\/FluxFunctor.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "def"}, {"label" : "void", "tail" : "(fa: FluxRepr[F, G, A]): FluxRepr[F, G, Unit]", "member" : "cats.Functor.void", "link" : "tofu\/data\/FluxFunctor.html#void[A](fa:F[A]):F[Unit]", "kind" : "def"}, {"label" : "lift", "tail" : "(f: (A) => B): (FluxRepr[F, G, A]) => FluxRepr[F, G, B]", "member" : "cats.Functor.lift", "link" : "tofu\/data\/FluxFunctor.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "widen", "tail" : "(fa: FluxRepr[F, G, A]): FluxRepr[F, G, B]", "member" : "cats.Functor.widen", "link" : "tofu\/data\/FluxFunctor.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: FluxRepr[F, G, A])(f: (A) => B): FluxRepr[F, G, B]", "member" : "cats.Functor.fmap", "link" : "tofu\/data\/FluxFunctor.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: FluxRepr[F, G, A])(f: (A) => B)(g: (B) => A): FluxRepr[F, G, B]", "member" : "cats.Functor.imap", "link" : "tofu\/data\/FluxFunctor.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]FluxRepr[F, G, G[α]]]", "member" : "cats.Invariant.composeFunctor", "link" : "tofu\/data\/FluxFunctor.html#composeFunctor[G[_]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]FluxRepr[F, G, G[α]]]", "member" : "cats.Invariant.compose", "link" : "tofu\/data\/FluxFunctor.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/data\/FluxFunctor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/data\/FluxFunctor.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/data\/FluxFunctor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/data\/FluxFunctor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/data\/FluxFunctor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/data\/FluxFunctor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/data\/FluxFunctor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/data\/FluxFunctor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/data\/FluxFunctor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/data\/FluxFunctor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/data\/FluxFunctor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/data\/FluxFunctor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/data\/FluxFunctor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/data\/FluxFunctor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/data\/FluxFunctor.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/data\/FluxFunctor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/data\/FluxFunctor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/data\/FluxFunctor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/data\/FluxFunctor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "tofu\/data\/FluxFunctor.html", "kind" : "class"}, {"name" : "tofu.data.FluxInstances", "trait" : "tofu\/data\/FluxInstances.html", "kind" : "trait", "members_trait" : [{"label" : "infiniteApplicative", "tail" : "(arg0: Applicative[F], arg1: Defer[F]): Applicative[[β$10$]FluxRepr[F, [+A]A, β$10$]]", "member" : "tofu.data.FluxInstances.infiniteApplicative", "link" : "tofu\/data\/FluxInstances.html#infiniteApplicative[F[_]](implicitevidence$10:cats.Applicative[F],implicitevidence$11:cats.Defer[F]):cats.Applicative[[β$10$]tofu.data.Flux.FluxRepr[F,[+A]A,β$10$]]", "kind" : "implicit def"}, {"label" : "accumMonad", "tail" : "(arg0: Monad[F], arg1: Monoid[R]): Monad[[γ$5$]FluxRepr[F, [+β$0$]Either[R, β$0$], γ$5$]] with Alternative[[γ$6$]FluxRepr[F, [+β$0$]Either[R, β$0$], γ$6$]]", "member" : "tofu.data.FluxInstances.accumMonad", "link" : "tofu\/data\/FluxInstances.html#accumMonad[F[_],R](implicitevidence$8:cats.Monad[F],implicitevidence$9:cats.Monoid[R]):cats.Monad[[γ$5$]tofu.data.Flux.FluxRepr[F,[+β$0$]scala.util.Either[R,β$0$],γ$5$]]withcats.Alternative[[γ$6$]tofu.data.Flux.FluxRepr[F,[+β$0$]scala.util.Either[R,β$0$],γ$6$]]", "kind" : "implicit def"}, {"label" : "streamMonad", "tail" : "(arg0: Monad[F]): Monad[[β$1$]FluxRepr[F, Option, β$1$]] with Alternative[[β$2$]FluxRepr[F, Option, β$2$]]", "member" : "tofu.data.FluxInstances.streamMonad", "link" : "tofu\/data\/FluxInstances.html#streamMonad[F[_]](implicitevidence$7:cats.Monad[F]):cats.Monad[[β$1$]tofu.data.Flux.FluxRepr[F,Option,β$1$]]withcats.Alternative[[β$2$]tofu.data.Flux.FluxRepr[F,Option,β$2$]]", "kind" : "implicit def"}, {"label" : "fluxFunctor", "tail" : "(arg0: Functor[F], arg1: Functor[G]): Functor[[γ$12$]FluxRepr[F, G, γ$12$]]", "member" : "tofu.data.FluxInstances1.fluxFunctor", "link" : "tofu\/data\/FluxInstances.html#fluxFunctor[F[_],G[_]](implicitevidence$12:cats.Functor[F],implicitevidence$13:cats.Functor[G]):cats.Functor[[γ$12$]tofu.data.Flux.FluxRepr[F,G,γ$12$]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/data\/FluxInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/data\/FluxInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/data\/FluxInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/data\/FluxInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/data\/FluxInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/data\/FluxInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/data\/FluxInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/data\/FluxInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/data\/FluxInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/data\/FluxInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/data\/FluxInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/data\/FluxInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/data\/FluxInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/data\/FluxInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/data\/FluxInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/data\/FluxInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/data\/FluxInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/data\/FluxInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/data\/FluxInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "tofu.data.FluxInstances1", "trait" : "tofu\/data\/FluxInstances1.html", "kind" : "trait", "members_trait" : [{"label" : "fluxFunctor", "tail" : "(arg0: Functor[F], arg1: Functor[G]): Functor[[γ$12$]FluxRepr[F, G, γ$12$]]", "member" : "tofu.data.FluxInstances1.fluxFunctor", "link" : "tofu\/data\/FluxInstances1.html#fluxFunctor[F[_],G[_]](implicitevidence$12:cats.Functor[F],implicitevidence$13:cats.Functor[G]):cats.Functor[[γ$12$]tofu.data.Flux.FluxRepr[F,G,γ$12$]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/data\/FluxInstances1.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/data\/FluxInstances1.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/data\/FluxInstances1.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/data\/FluxInstances1.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/data\/FluxInstances1.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/data\/FluxInstances1.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/data\/FluxInstances1.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/data\/FluxInstances1.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/data\/FluxInstances1.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/data\/FluxInstances1.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/data\/FluxInstances1.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/data\/FluxInstances1.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/data\/FluxInstances1.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/data\/FluxInstances1.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/data\/FluxInstances1.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/data\/FluxInstances1.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/data\/FluxInstances1.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/data\/FluxInstances1.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/data\/FluxInstances1.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "tofu.data.FluxOps", "shortDescription" : "", "members_class" : [{"label" : "zipWithIndex", "tail" : "(F: Functor[F], G: Functor[G]): Flux[F, G, (A, Int)]", "member" : "tofu.data.FluxOps.zipWithIndex", "link" : "tofu\/data\/FluxOps.html#zipWithIndex(implicitF:cats.Functor[F],implicitG:cats.Functor[G]):tofu.data.Flux[F,G,(A,Int)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(starting: Int)(F: Functor[F], G: Functor[G]): Flux[F, G, (A, Int)]", "member" : "tofu.data.FluxOps.zipWithIndex", "link" : "tofu\/data\/FluxOps.html#zipWithIndex(starting:Int)(implicitF:cats.Functor[F],implicitG:cats.Functor[G]):tofu.data.Flux[F,G,(A,Int)]", "kind" : "def"}, {"label" : "flatMapF", "tail" : "(f: (A) => F[B])(F: Monad[F], G: Traverse[G]): Flux[F, G, B]", "member" : "tofu.data.FluxOps.flatMapF", "link" : "tofu\/data\/FluxOps.html#flatMapF[B](f:A=>F[B])(implicitF:cats.Monad[F],implicitG:cats.Traverse[G]):tofu.data.Flux[F,G,B]", "kind" : "def"}, {"label" : "mapK", "tail" : "(f: ~>[F, H])(arg0: Functor[H], G: Functor[G]): Flux[H, G, A]", "member" : "tofu.data.FluxOps.mapK", "link" : "tofu\/data\/FluxOps.html#mapK[H[_]](f:F~>H)(implicitevidence$6:cats.Functor[H],implicitG:cats.Functor[G]):tofu.data.Flux[H,G,A]", "kind" : "def"}, {"member" : "tofu.data.FluxOps#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "tofu\/data\/FluxOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "tofu\/data\/FluxOps.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/data\/FluxOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/data\/FluxOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "tofu\/data\/FluxOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "tofu\/data\/FluxOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "tofu\/data\/FluxOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "tofu\/data\/FluxOps.html", "kind" : "class"}, {"name" : "tofu.data.FluxStreamOps", "shortDescription" : "", "members_class" : [{"label" : "foldMapK", "tail" : "(f: (A) => M[B])(F: Monad[F], M: MonoidK[M]): F[M[B]]", "member" : "tofu.data.FluxStreamOps.foldMapK", "link" : "tofu\/data\/FluxStreamOps.html#foldMapK[M[_],B](f:A=>M[B])(implicitF:cats.Monad[F],implicitM:cats.MonoidK[M]):F[M[B]]", "kind" : "def"}, {"label" : "foldMap", "tail" : "(f: (A) => M)(M: Monoid[M], F: Monad[F]): F[M]", "member" : "tofu.data.FluxStreamOps.foldMap", "link" : "tofu\/data\/FluxStreamOps.html#foldMap[M](f:A=>M)(implicitM:cats.Monoid[M],implicitF:cats.Monad[F]):F[M]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(init: B)(f: (B, A) => B)(F: Monad[F]): F[B]", "member" : "tofu.data.FluxStreamOps.foldLeft", "link" : "tofu\/data\/FluxStreamOps.html#foldLeft[B](init:B)(f:(B,A)=>B)(implicitF:cats.Monad[F]):F[B]", "kind" : "def"}, {"label" : "foldLeftM", "tail" : "(init: F[B])(f: (B, A) => F[B])(F: Monad[F]): F[B]", "member" : "tofu.data.FluxStreamOps.foldLeftM", "link" : "tofu\/data\/FluxStreamOps.html#foldLeftM[B](init:F[B])(f:(B,A)=>F[B])(implicitF:cats.Monad[F]):F[B]", "kind" : "def"}, {"member" : "tofu.data.FluxStreamOps#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "tofu\/data\/FluxStreamOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "tofu\/data\/FluxStreamOps.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/data\/FluxStreamOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/data\/FluxStreamOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "tofu\/data\/FluxStreamOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "tofu\/data\/FluxStreamOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "tofu\/data\/FluxStreamOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "tofu\/data\/FluxStreamOps.html", "kind" : "class"}, {"name" : "tofu.data.PArray", "shortDescription" : "", "object" : "tofu\/data\/PArray$.html", "members_object" : [{"label" : "Tag", "tail" : "", "member" : "tofu.internal.Newtype1Covariant.Tag", "link" : "tofu\/internal\/Newtype1Covariant.html#TagextendsAny", "kind" : "trait"}, {"label" : "ArrInstance", "tail" : "", "member" : "tofu.data.PArray.ArrInstance", "link" : "tofu\/data\/PArray$.html#ArrInstanceextendsFoldable[tofu.data.PArray]withMonad[tofu.data.PArray]withMonoidK[tofu.data.PArray]", "kind" : "class"}, {"label" : "arrInstance", "tail" : ": ArrInstance", "member" : "tofu.data.PArray.arrInstance", "link" : "tofu\/data\/PArray$.html#arrInstance:tofu.data.PArray.ArrInstance", "kind" : "implicit val"}, {"label" : "ArrOps", "tail" : "", "member" : "tofu.data.PArray.ArrOps", "link" : "tofu\/data\/PArray$.html#ArrOps[A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "fromColl", "tail" : "(xs: TraversableOnce[A]): PArray[A]", "member" : "tofu.data.PArray.fromColl", "link" : "tofu\/data\/PArray$.html#fromColl[A](xs:TraversableOnce[A]):tofu.data.PArray[A]", "kind" : "def"}, {"label" : "fromFoldable", "tail" : "(fa: F[A])(arg0: Foldable[F]): PArray[A]", "member" : "tofu.data.PArray.fromFoldable", "link" : "tofu\/data\/PArray$.html#fromFoldable[F[_],A](fa:F[A])(implicitevidence$1:cats.Foldable[F]):tofu.data.PArray[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(xs: A*): Type[A]", "member" : "tofu.data.PArray.apply", "link" : "tofu\/data\/PArray$.html#apply[A](xs:A*):tofu.data.PArray.Type[A]", "kind" : "def"}, {"label" : "empty", "tail" : ": PArray[Nothing]", "member" : "tofu.data.PArray.empty", "link" : "tofu\/data\/PArray$.html#empty:tofu.data.PArray[Nothing]", "kind" : "val"}, {"label" : "Base", "tail" : "", "member" : "tofu.internal.Newtype1Covariant.Base", "link" : "tofu\/data\/PArray$.html#Base=Any{typenewTypeCovariant}", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/data\/PArray$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/data\/PArray$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/data\/PArray$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/data\/PArray$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/data\/PArray$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/data\/PArray$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/data\/PArray$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/data\/PArray$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/data\/PArray$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/data\/PArray$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/data\/PArray$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/data\/PArray$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/data\/PArray$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/data\/PArray$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/data\/PArray$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/data\/PArray$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/data\/PArray$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/data\/PArray$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/data\/PArray$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"member" : "tofu.internal.Newtype1Covariant.Type", "error" : "unsupported entity"}], "kind" : "object"}], "tofu.internal" : [{"name" : "tofu.internal.DataEffectComp", "trait" : "tofu\/internal\/DataEffectComp.html", "kind" : "trait", "members_trait" : [{"label" : "apply", "tail" : "(instance: TC[F, A]): TC[F, A]", "member" : "tofu.internal.DataEffectComp.apply", "link" : "tofu\/internal\/DataEffectComp.html#apply[F[_],A](implicitinstance:TC[F,A]):TC[F,A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/internal\/DataEffectComp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/internal\/DataEffectComp.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/internal\/DataEffectComp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/internal\/DataEffectComp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/internal\/DataEffectComp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/internal\/DataEffectComp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/internal\/DataEffectComp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/internal\/DataEffectComp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/internal\/DataEffectComp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/internal\/DataEffectComp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/internal\/DataEffectComp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/internal\/DataEffectComp.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/internal\/DataEffectComp.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/internal\/DataEffectComp.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/internal\/DataEffectComp.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/internal\/DataEffectComp.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/internal\/DataEffectComp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/internal\/DataEffectComp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/internal\/DataEffectComp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "tofu.internal.Newtype1Covariant", "trait" : "tofu\/internal\/Newtype1Covariant.html", "kind" : "trait", "members_trait" : [{"label" : "Tag", "tail" : "", "member" : "tofu.internal.Newtype1Covariant.Tag", "link" : "tofu\/internal\/Newtype1Covariant.html#TagextendsAny", "kind" : "trait"}, {"label" : "Base", "tail" : "", "member" : "tofu.internal.Newtype1Covariant.Base", "link" : "tofu\/internal\/Newtype1Covariant.html#Base=Any{typenewTypeCovariant}", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/internal\/Newtype1Covariant.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/internal\/Newtype1Covariant.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/internal\/Newtype1Covariant.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/internal\/Newtype1Covariant.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/internal\/Newtype1Covariant.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/internal\/Newtype1Covariant.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/internal\/Newtype1Covariant.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/internal\/Newtype1Covariant.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/internal\/Newtype1Covariant.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/internal\/Newtype1Covariant.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/internal\/Newtype1Covariant.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/internal\/Newtype1Covariant.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/internal\/Newtype1Covariant.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/internal\/Newtype1Covariant.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/internal\/Newtype1Covariant.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/internal\/Newtype1Covariant.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/internal\/Newtype1Covariant.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/internal\/Newtype1Covariant.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/internal\/Newtype1Covariant.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"member" : "tofu.internal.Newtype1Covariant.Type", "error" : "unsupported entity"}], "shortDescription" : ""}], "tofu.generate" : [{"name" : "tofu.generate.GenRandom", "object" : "tofu\/generate\/GenRandom$.html", "members_object" : [{"label" : "ops", "tail" : "", "member" : "tofu.generate.GenRandom.ops", "link" : "tofu\/generate\/GenRandom$.html#ops", "kind" : "object"}, {"label" : "AllOps", "tail" : "", "member" : "tofu.generate.GenRandom.AllOps", "link" : "tofu\/generate\/GenRandom$.html#AllOps[F[_],A]extendsGenRandom.Ops[F,A]", "kind" : "trait"}, {"label" : "nonInheritedOps", "tail" : "", "member" : "tofu.generate.GenRandom.nonInheritedOps", "link" : "tofu\/generate\/GenRandom$.html#nonInheritedOps", "kind" : "object"}, {"label" : "ToGenRandomOps", "tail" : "", "member" : "tofu.generate.GenRandom.ToGenRandomOps", "link" : "tofu\/generate\/GenRandom$.html#ToGenRandomOpsextendsAnyRef", "kind" : "trait"}, {"label" : "Ops", "tail" : "", "member" : "tofu.generate.GenRandom.Ops", "link" : "tofu\/generate\/GenRandom$.html#Ops[F[_],A]extendsAnyRef", "kind" : "trait"}, {"label" : "apply", "tail" : "(instance: GenRandom[F]): GenRandom[F]", "member" : "tofu.generate.GenRandom.apply", "link" : "tofu\/generate\/GenRandom$.html#apply[F[_]](implicitinstance:tofu.generate.GenRandom[F]):tofu.generate.GenRandom[F]", "kind" : "def"}, {"label" : "genRandomRepresentableK", "tail" : ": RepresentableK[GenRandom]", "member" : "tofu.generate.GenRandom.genRandomRepresentableK", "link" : "tofu\/generate\/GenRandom$.html#genRandomRepresentableK:tofu.higherKind.RepresentableK[tofu.generate.GenRandom]", "kind" : "implicit val"}, {"label" : "instance", "tail" : "(seed: Option[Long], secure: Boolean)(arg0: Sync[I], arg1: Sync[F]): I[GenRandom[F]]", "member" : "tofu.generate.GenRandom.instance", "link" : "tofu\/generate\/GenRandom$.html#instance[I[_],F[_]](seed:Option[Long],secure:Boolean)(implicitevidence$1:cats.effect.Sync[I],implicitevidence$2:cats.effect.Sync[F]):I[tofu.generate.GenRandom[F]]", "kind" : "def"}, {"label" : "nextInt", "tail" : "(n: Int)(g: GenRandom[F]): F[Int]", "member" : "tofu.generate.GenRandom.nextInt", "link" : "tofu\/generate\/GenRandom$.html#nextInt[F[_]](n:Int)(implicitg:tofu.generate.GenRandom[F]):F[Int]", "kind" : "def"}, {"label" : "nextLong", "tail" : "(g: GenRandom[F]): F[Long]", "member" : "tofu.generate.GenRandom.nextLong", "link" : "tofu\/generate\/GenRandom$.html#nextLong[F[_]](implicitg:tofu.generate.GenRandom[F]):F[Long]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/generate\/GenRandom$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/generate\/GenRandom$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/generate\/GenRandom$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/generate\/GenRandom$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/generate\/GenRandom$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/generate\/GenRandom$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/generate\/GenRandom$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/generate\/GenRandom$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/generate\/GenRandom$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/generate\/GenRandom$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/generate\/GenRandom$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/generate\/GenRandom$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/generate\/GenRandom$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/generate\/GenRandom$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/generate\/GenRandom$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/generate\/GenRandom$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/generate\/GenRandom$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/generate\/GenRandom$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/generate\/GenRandom$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/generate\/GenRandom.html", "kind" : "trait", "members_trait" : [{"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "tofu\/generate\/GenRandom.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/generate\/GenRandom.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/generate\/GenRandom.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "tofu\/generate\/GenRandom.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "tofu\/generate\/GenRandom.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "tofu\/generate\/GenRandom.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "tofu\/generate\/GenRandom.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "tofu\/generate\/GenRandom.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "nextInt", "tail" : "(n: Int): F[Int]", "member" : "tofu.generate.GenRandom.nextInt", "link" : "tofu\/generate\/GenRandom.html#nextInt(n:Int):F[Int]", "kind" : "abstract def"}, {"label" : "nextLong", "tail" : "(): F[Long]", "member" : "tofu.generate.GenRandom.nextLong", "link" : "tofu\/generate\/GenRandom.html#nextLong:F[Long]", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.Any.getClass", "link" : "tofu\/generate\/GenRandom.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.generate.GenUUID", "object" : "tofu\/generate\/GenUUID$.html", "members_object" : [{"label" : "ops", "tail" : "", "member" : "tofu.generate.GenUUID.ops", "link" : "tofu\/generate\/GenUUID$.html#ops", "kind" : "object"}, {"label" : "AllOps", "tail" : "", "member" : "tofu.generate.GenUUID.AllOps", "link" : "tofu\/generate\/GenUUID$.html#AllOps[F[_],A]extendsGenUUID.Ops[F,A]", "kind" : "trait"}, {"label" : "nonInheritedOps", "tail" : "", "member" : "tofu.generate.GenUUID.nonInheritedOps", "link" : "tofu\/generate\/GenUUID$.html#nonInheritedOps", "kind" : "object"}, {"label" : "ToGenUUIDOps", "tail" : "", "member" : "tofu.generate.GenUUID.ToGenUUIDOps", "link" : "tofu\/generate\/GenUUID$.html#ToGenUUIDOpsextendsAnyRef", "kind" : "trait"}, {"label" : "Ops", "tail" : "", "member" : "tofu.generate.GenUUID.Ops", "link" : "tofu\/generate\/GenUUID$.html#Ops[F[_],A]extendsAnyRef", "kind" : "trait"}, {"label" : "apply", "tail" : "(instance: GenUUID[F]): GenUUID[F]", "member" : "tofu.generate.GenUUID.apply", "link" : "tofu\/generate\/GenUUID$.html#apply[F[_]](implicitinstance:tofu.generate.GenUUID[F]):tofu.generate.GenUUID[F]", "kind" : "def"}, {"label" : "genUUIDRepresentableK", "tail" : ": RepresentableK[GenUUID]", "member" : "tofu.generate.GenUUID.genUUIDRepresentableK", "link" : "tofu\/generate\/GenUUID$.html#genUUIDRepresentableK:tofu.higherKind.RepresentableK[tofu.generate.GenUUID]", "kind" : "implicit val"}, {"label" : "syncGenUUID", "tail" : "(F: Sync[F]): GenUUID[F]", "member" : "tofu.generate.GenUUID.syncGenUUID", "link" : "tofu\/generate\/GenUUID$.html#syncGenUUID[F[_]](implicitF:cats.effect.Sync[F]):tofu.generate.GenUUID[F]", "kind" : "implicit def"}, {"label" : "randomString", "tail" : "(arg0: Functor[F], arg1: GenUUID[F]): F[String]", "member" : "tofu.generate.GenUUID.randomString", "link" : "tofu\/generate\/GenUUID$.html#randomString[F[_]](implicitevidence$1:cats.Functor[F],implicitevidence$2:tofu.generate.GenUUID[F]):F[String]", "kind" : "def"}, {"label" : "random", "tail" : "(gen: GenUUID[F]): F[UUID]", "member" : "tofu.generate.GenUUID.random", "link" : "tofu\/generate\/GenUUID$.html#random[F[_]](implicitgen:tofu.generate.GenUUID[F]):F[java.util.UUID]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/generate\/GenUUID$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/generate\/GenUUID$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/generate\/GenUUID$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/generate\/GenUUID$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/generate\/GenUUID$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/generate\/GenUUID$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/generate\/GenUUID$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/generate\/GenUUID$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/generate\/GenUUID$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/generate\/GenUUID$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/generate\/GenUUID$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/generate\/GenUUID$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/generate\/GenUUID$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/generate\/GenUUID$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/generate\/GenUUID$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/generate\/GenUUID$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/generate\/GenUUID$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/generate\/GenUUID$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/generate\/GenUUID$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/generate\/GenUUID.html", "kind" : "trait", "members_trait" : [{"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "tofu\/generate\/GenUUID.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/generate\/GenUUID.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/generate\/GenUUID.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "tofu\/generate\/GenUUID.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "tofu\/generate\/GenUUID.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "tofu\/generate\/GenUUID.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "tofu\/generate\/GenUUID.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "tofu\/generate\/GenUUID.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "randomUUID", "tail" : "(): F[UUID]", "member" : "tofu.generate.GenUUID.randomUUID", "link" : "tofu\/generate\/GenUUID.html#randomUUID:F[java.util.UUID]", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.Any.getClass", "link" : "tofu\/generate\/GenUUID.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : ""}], "tofu.control.impl" : [{"name" : "tofu.control.impl.ApplicativeDelegate", "trait" : "tofu\/control\/impl\/ApplicativeDelegate.html", "kind" : "trait", "members_trait" : [{"label" : "point", "tail" : "(a: A): F[A]", "member" : "tofu.control.impl.ApplicativeDelegate.point", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#point[A](a:A):F[A]", "kind" : "final def"}, {"label" : "whenA", "tail" : "(cond: Boolean)(f: => F[A]): F[Unit]", "member" : "tofu.control.impl.ApplicativeDelegate.whenA", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#whenA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "final def"}, {"label" : "unlessA", "tail" : "(cond: Boolean)(f: => F[A]): F[Unit]", "member" : "tofu.control.impl.ApplicativeDelegate.unlessA", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#unlessA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "final def"}, {"label" : "composeContravariantMonoidal", "tail" : "(arg0: ContravariantMonoidal[G]): ContravariantMonoidal[[α]F[G[α]]]", "member" : "tofu.control.impl.ApplicativeDelegate.composeContravariantMonoidal", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#composeContravariantMonoidal[G[_]](implicitevidence$2:cats.ContravariantMonoidal[G]):cats.ContravariantMonoidal[[α]F[G[α]]]", "kind" : "final def"}, {"label" : "compose", "tail" : "(arg0: Applicative[G]): Applicative[[α]F[G[α]]]", "member" : "tofu.control.impl.ApplicativeDelegate.compose", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#compose[G[_]](implicitevidence$1:cats.Applicative[G]):cats.Applicative[[α]F[G[α]]]", "kind" : "final def"}, {"label" : "replicateA", "tail" : "(n: Int, fa: F[A]): F[List[A]]", "member" : "tofu.control.impl.ApplicativeDelegate.replicateA", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#replicateA[A](n:Int,fa:F[A]):F[List[A]]", "kind" : "final def"}, {"label" : "unit", "tail" : "(): F[Unit]", "member" : "tofu.control.impl.ApplicativeDelegate.unit", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#unit:F[Unit]", "kind" : "final def"}, {"label" : "pure", "tail" : "(x: A): F[A]", "member" : "tofu.control.impl.ApplicativeDelegate.pure", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#pure[A](x:A):F[A]", "kind" : "final def"}, {"label" : "tuple22", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20], f21: F[A21]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "tofu.control.impl.ApplyDelegate.tuple22", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#tuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "final def"}, {"label" : "map22", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20], f21: F[A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map22", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#map22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap22", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20], f21: F[A21]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap22", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#ap22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[Z]", "kind" : "final def"}, {"label" : "tuple21", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "tofu.control.impl.ApplyDelegate.tuple21", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#tuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "final def"}, {"label" : "map21", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map21", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#map21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap21", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap21", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#ap21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[Z]", "kind" : "final def"}, {"label" : "tuple20", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "tofu.control.impl.ApplyDelegate.tuple20", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#tuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "final def"}, {"label" : "map20", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map20", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#map20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap20", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap20", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#ap20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[Z]", "kind" : "final def"}, {"label" : "tuple19", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "tofu.control.impl.ApplyDelegate.tuple19", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#tuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "final def"}, {"label" : "map19", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map19", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#map19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap19", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap19", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#ap19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[Z]", "kind" : "final def"}, {"label" : "tuple18", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "tofu.control.impl.ApplyDelegate.tuple18", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#tuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "final def"}, {"label" : "map18", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map18", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#map18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap18", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap18", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#ap18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[Z]", "kind" : "final def"}, {"label" : "tuple17", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "tofu.control.impl.ApplyDelegate.tuple17", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#tuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "final def"}, {"label" : "map17", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map17", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#map17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap17", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap17", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#ap17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[Z]", "kind" : "final def"}, {"label" : "tuple16", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "tofu.control.impl.ApplyDelegate.tuple16", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#tuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "final def"}, {"label" : "map16", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map16", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#map16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap16", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap16", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#ap16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[Z]", "kind" : "final def"}, {"label" : "tuple15", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "tofu.control.impl.ApplyDelegate.tuple15", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#tuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "final def"}, {"label" : "map15", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map15", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#map15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap15", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap15", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#ap15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[Z]", "kind" : "final def"}, {"label" : "tuple14", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "tofu.control.impl.ApplyDelegate.tuple14", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#tuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "final def"}, {"label" : "map14", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map14", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#map14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap14", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap14", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#ap14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[Z]", "kind" : "final def"}, {"label" : "tuple13", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "tofu.control.impl.ApplyDelegate.tuple13", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#tuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "final def"}, {"label" : "map13", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map13", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#map13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap13", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap13", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#ap13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[Z]", "kind" : "final def"}, {"label" : "tuple12", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "tofu.control.impl.ApplyDelegate.tuple12", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#tuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "final def"}, {"label" : "map12", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map12", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#map12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap12", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap12", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#ap12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[Z]", "kind" : "final def"}, {"label" : "tuple11", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "tofu.control.impl.ApplyDelegate.tuple11", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#tuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "final def"}, {"label" : "map11", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map11", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#map11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap11", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap11", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#ap11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[Z]", "kind" : "final def"}, {"label" : "tuple10", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "tofu.control.impl.ApplyDelegate.tuple10", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#tuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "final def"}, {"label" : "map10", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map10", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#map10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap10", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap10", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#ap10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[Z]", "kind" : "final def"}, {"label" : "tuple9", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "tofu.control.impl.ApplyDelegate.tuple9", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#tuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "final def"}, {"label" : "map9", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map9", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#map9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap9", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap9", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#ap9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[Z]", "kind" : "final def"}, {"label" : "tuple8", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7]): F[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "tofu.control.impl.ApplyDelegate.tuple8", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#tuple8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "final def"}, {"label" : "map8", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map8", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#map8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap8", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap8", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#ap8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[Z]", "kind" : "final def"}, {"label" : "tuple7", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6]): F[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "tofu.control.impl.ApplyDelegate.tuple7", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#tuple7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "final def"}, {"label" : "map7", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6])(f: (A0, A1, A2, A3, A4, A5, A6) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map7", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#map7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap7", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap7", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#ap7[A0,A1,A2,A3,A4,A5,A6,Z](f:F[(A0,A1,A2,A3,A4,A5,A6)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[Z]", "kind" : "final def"}, {"label" : "tuple6", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5]): F[(A0, A1, A2, A3, A4, A5)]", "member" : "tofu.control.impl.ApplyDelegate.tuple6", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#tuple6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[(A0,A1,A2,A3,A4,A5)]", "kind" : "final def"}, {"label" : "map6", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5])(f: (A0, A1, A2, A3, A4, A5) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map6", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#map6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5])(f:(A0,A1,A2,A3,A4,A5)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap6", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap6", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#ap6[A0,A1,A2,A3,A4,A5,Z](f:F[(A0,A1,A2,A3,A4,A5)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[Z]", "kind" : "final def"}, {"label" : "tuple5", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4]): F[(A0, A1, A2, A3, A4)]", "member" : "tofu.control.impl.ApplyDelegate.tuple5", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#tuple5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[(A0,A1,A2,A3,A4)]", "kind" : "final def"}, {"label" : "map5", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4])(f: (A0, A1, A2, A3, A4) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map5", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#map5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4])(f:(A0,A1,A2,A3,A4)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap5", "tail" : "(f: F[(A0, A1, A2, A3, A4) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap5", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#ap5[A0,A1,A2,A3,A4,Z](f:F[(A0,A1,A2,A3,A4)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[Z]", "kind" : "final def"}, {"label" : "tuple4", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3]): F[(A0, A1, A2, A3)]", "member" : "tofu.control.impl.ApplyDelegate.tuple4", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#tuple4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[(A0,A1,A2,A3)]", "kind" : "final def"}, {"label" : "map4", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3])(f: (A0, A1, A2, A3) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map4", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#map4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3])(f:(A0,A1,A2,A3)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap4", "tail" : "(f: F[(A0, A1, A2, A3) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap4", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#ap4[A0,A1,A2,A3,Z](f:F[(A0,A1,A2,A3)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[Z]", "kind" : "final def"}, {"label" : "tuple3", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2]): F[(A0, A1, A2)]", "member" : "tofu.control.impl.ApplyDelegate.tuple3", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#tuple3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2]):F[(A0,A1,A2)]", "kind" : "final def"}, {"label" : "map3", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2])(f: (A0, A1, A2) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map3", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#map3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2])(f:(A0,A1,A2)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap3", "tail" : "(f: F[(A0, A1, A2) => Z])(f0: F[A0], f1: F[A1], f2: F[A2]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap3", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#ap3[A0,A1,A2,Z](f:F[(A0,A1,A2)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2]):F[Z]", "kind" : "final def"}, {"label" : "tuple2", "tail" : "(f1: F[A], f2: F[B]): F[(A, B)]", "member" : "tofu.control.impl.ApplyDelegate.tuple2", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#tuple2[A,B](f1:F[A],f2:F[B]):F[(A,B)]", "kind" : "final def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]F[G[α]]]", "member" : "tofu.control.impl.ApplyDelegate.composeFunctor", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#composeFunctor[G[_]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "final def"}, {"label" : "composeApply", "tail" : "(G: Apply[G]): InvariantSemigroupal[[α]F[G[α]]]", "member" : "tofu.control.impl.ApplyDelegate.composeApply", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#composeApply[G[_]](implicitG:cats.Apply[G]):cats.InvariantSemigroupal[[α]F[G[α]]]", "kind" : "final def"}, {"label" : "map2Eval", "tail" : "(fa: F[A], fb: Eval[F[B]])(f: (A, B) => Z): Eval[F[Z]]", "member" : "tofu.control.impl.ApplyDelegate.map2Eval", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#map2Eval[A,B,Z](fa:F[A],fb:cats.Eval[F[B]])(f:(A,B)=>Z):cats.Eval[F[Z]]", "kind" : "final def"}, {"label" : "map2", "tail" : "(fa: F[A], fb: F[B])(f: (A, B) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map2", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#map2[A,B,Z](fa:F[A],fb:F[B])(f:(A,B)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap2", "tail" : "(ff: F[(A, B) => Z])(fa: F[A], fb: F[B]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap2", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#ap2[A,B,Z](ff:F[(A,B)=>Z])(fa:F[A],fb:F[B]):F[Z]", "kind" : "final def"}, {"label" : "product", "tail" : "(fa: F[A], fb: F[B]): F[(A, B)]", "member" : "tofu.control.impl.ApplyDelegate.product", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#product[A,B](fa:F[A],fb:F[B]):F[(A,B)]", "kind" : "final def"}, {"label" : "productL", "tail" : "(fa: F[A])(fb: F[B]): F[A]", "member" : "tofu.control.impl.ApplyDelegate.productL", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#productL[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "productR", "tail" : "(fa: F[A])(fb: F[B]): F[B]", "member" : "tofu.control.impl.ApplyDelegate.productR", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#productR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: F[A])(f: (A) => B)(g: (B) => A): F[B]", "member" : "tofu.control.impl.ApplyDelegate.imap", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "final def"}, {"label" : "ap", "tail" : "(ff: F[(A) => B])(fa: F[A]): F[B]", "member" : "tofu.control.impl.ApplyDelegate.ap", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#ap[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "composeContravariant", "tail" : "(G: Contravariant[G]): Contravariant[[α]F[G[α]]]", "member" : "tofu.control.impl.FunctorDelegate.composeContravariant", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#composeContravariant[G[_]](implicitG:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "final def"}, {"label" : "compose", "tail" : "(G: Functor[G]): Functor[[α]F[G[α]]]", "member" : "tofu.control.impl.FunctorDelegate.compose", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#compose[G[_]](implicitG:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "final def"}, {"label" : "tupleRight", "tail" : "(fa: F[A], b: B): F[(A, B)]", "member" : "tofu.control.impl.FunctorDelegate.tupleRight", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "final def"}, {"label" : "tupleLeft", "tail" : "(fa: F[A], b: B): F[(B, A)]", "member" : "tofu.control.impl.FunctorDelegate.tupleLeft", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "final def"}, {"label" : "as", "tail" : "(fa: F[A], b: B): F[B]", "member" : "tofu.control.impl.FunctorDelegate.as", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "final def"}, {"label" : "fproduct", "tail" : "(fa: F[A])(f: (A) => B): F[(A, B)]", "member" : "tofu.control.impl.FunctorDelegate.fproduct", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "final def"}, {"label" : "void", "tail" : "(fa: F[A]): F[Unit]", "member" : "tofu.control.impl.FunctorDelegate.void", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#void[A](fa:F[A]):F[Unit]", "kind" : "final def"}, {"label" : "lift", "tail" : "(f: (A) => B): (F[A]) => F[B]", "member" : "tofu.control.impl.FunctorDelegate.lift", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "final def"}, {"label" : "widen", "tail" : "(fa: F[A]): F[B]", "member" : "tofu.control.impl.FunctorDelegate.widen", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(fa: F[A])(f: (A) => B): F[B]", "member" : "tofu.control.impl.FunctorDelegate.map", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#map[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "ifA", "tail" : "(fcond: F[Boolean])(ifTrue: F[A], ifFalse: F[A]): F[A]", "member" : "cats.Apply.ifA", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#ifA[A](fcond:F[Boolean])(ifTrue:F[A],ifFalse:F[A]):F[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Apply[G]): Apply[[α]F[G[α]]]", "member" : "cats.Apply.compose", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#compose[G[_]](implicitevidence$1:cats.Apply[G]):cats.Apply[[α]F[G[α]]]", "kind" : "def"}, {"label" : "<*", "tail" : "(fa: F[A])(fb: F[B]): F[A]", "member" : "cats.Apply.<*", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#<*[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(fa: F[A])(fb: F[B]): F[B]", "member" : "cats.Apply.*>", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#*>[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(ff: F[(A) => B])(fa: F[A]): F[B]", "member" : "cats.Apply.<*>", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#<*>[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "ifF", "tail" : "(fb: F[Boolean])(ifTrue: => A, ifFalse: => A): F[A]", "member" : "cats.Functor.ifF", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#ifF[A](fb:F[Boolean])(ifTrue:=>A,ifFalse:=>A):F[A]", "kind" : "def"}, {"label" : "unzip", "tail" : "(fab: F[(A, B)]): (F[A], F[B])", "member" : "cats.Functor.unzip", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#unzip[A,B](fab:F[(A,B)]):(F[A],F[B])", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: F[A])(f: (A) => B): F[B]", "member" : "cats.Functor.fmap", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]F[G[α]]]", "member" : "cats.Invariant.compose", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "F", "tail" : ": Applicative[F]", "member" : "tofu.control.impl.ApplicativeDelegate.F", "link" : "tofu\/control\/impl\/ApplicativeDelegate.html#F:cats.Applicative[F]", "kind" : "abstract val"}], "shortDescription" : ""}, {"name" : "tofu.control.impl.ApplyDelegate", "trait" : "tofu\/control\/impl\/ApplyDelegate.html", "kind" : "trait", "members_trait" : [{"label" : "tuple22", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20], f21: F[A21]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "tofu.control.impl.ApplyDelegate.tuple22", "link" : "tofu\/control\/impl\/ApplyDelegate.html#tuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "final def"}, {"label" : "map22", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20], f21: F[A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map22", "link" : "tofu\/control\/impl\/ApplyDelegate.html#map22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap22", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20], f21: F[A21]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap22", "link" : "tofu\/control\/impl\/ApplyDelegate.html#ap22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[Z]", "kind" : "final def"}, {"label" : "tuple21", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "tofu.control.impl.ApplyDelegate.tuple21", "link" : "tofu\/control\/impl\/ApplyDelegate.html#tuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "final def"}, {"label" : "map21", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map21", "link" : "tofu\/control\/impl\/ApplyDelegate.html#map21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap21", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap21", "link" : "tofu\/control\/impl\/ApplyDelegate.html#ap21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[Z]", "kind" : "final def"}, {"label" : "tuple20", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "tofu.control.impl.ApplyDelegate.tuple20", "link" : "tofu\/control\/impl\/ApplyDelegate.html#tuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "final def"}, {"label" : "map20", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map20", "link" : "tofu\/control\/impl\/ApplyDelegate.html#map20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap20", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap20", "link" : "tofu\/control\/impl\/ApplyDelegate.html#ap20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[Z]", "kind" : "final def"}, {"label" : "tuple19", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "tofu.control.impl.ApplyDelegate.tuple19", "link" : "tofu\/control\/impl\/ApplyDelegate.html#tuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "final def"}, {"label" : "map19", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map19", "link" : "tofu\/control\/impl\/ApplyDelegate.html#map19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap19", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap19", "link" : "tofu\/control\/impl\/ApplyDelegate.html#ap19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[Z]", "kind" : "final def"}, {"label" : "tuple18", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "tofu.control.impl.ApplyDelegate.tuple18", "link" : "tofu\/control\/impl\/ApplyDelegate.html#tuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "final def"}, {"label" : "map18", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map18", "link" : "tofu\/control\/impl\/ApplyDelegate.html#map18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap18", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap18", "link" : "tofu\/control\/impl\/ApplyDelegate.html#ap18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[Z]", "kind" : "final def"}, {"label" : "tuple17", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "tofu.control.impl.ApplyDelegate.tuple17", "link" : "tofu\/control\/impl\/ApplyDelegate.html#tuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "final def"}, {"label" : "map17", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map17", "link" : "tofu\/control\/impl\/ApplyDelegate.html#map17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap17", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap17", "link" : "tofu\/control\/impl\/ApplyDelegate.html#ap17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[Z]", "kind" : "final def"}, {"label" : "tuple16", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "tofu.control.impl.ApplyDelegate.tuple16", "link" : "tofu\/control\/impl\/ApplyDelegate.html#tuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "final def"}, {"label" : "map16", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map16", "link" : "tofu\/control\/impl\/ApplyDelegate.html#map16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap16", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap16", "link" : "tofu\/control\/impl\/ApplyDelegate.html#ap16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[Z]", "kind" : "final def"}, {"label" : "tuple15", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "tofu.control.impl.ApplyDelegate.tuple15", "link" : "tofu\/control\/impl\/ApplyDelegate.html#tuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "final def"}, {"label" : "map15", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map15", "link" : "tofu\/control\/impl\/ApplyDelegate.html#map15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap15", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap15", "link" : "tofu\/control\/impl\/ApplyDelegate.html#ap15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[Z]", "kind" : "final def"}, {"label" : "tuple14", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "tofu.control.impl.ApplyDelegate.tuple14", "link" : "tofu\/control\/impl\/ApplyDelegate.html#tuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "final def"}, {"label" : "map14", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map14", "link" : "tofu\/control\/impl\/ApplyDelegate.html#map14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap14", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap14", "link" : "tofu\/control\/impl\/ApplyDelegate.html#ap14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[Z]", "kind" : "final def"}, {"label" : "tuple13", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "tofu.control.impl.ApplyDelegate.tuple13", "link" : "tofu\/control\/impl\/ApplyDelegate.html#tuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "final def"}, {"label" : "map13", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map13", "link" : "tofu\/control\/impl\/ApplyDelegate.html#map13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap13", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap13", "link" : "tofu\/control\/impl\/ApplyDelegate.html#ap13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[Z]", "kind" : "final def"}, {"label" : "tuple12", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "tofu.control.impl.ApplyDelegate.tuple12", "link" : "tofu\/control\/impl\/ApplyDelegate.html#tuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "final def"}, {"label" : "map12", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map12", "link" : "tofu\/control\/impl\/ApplyDelegate.html#map12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap12", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap12", "link" : "tofu\/control\/impl\/ApplyDelegate.html#ap12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[Z]", "kind" : "final def"}, {"label" : "tuple11", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "tofu.control.impl.ApplyDelegate.tuple11", "link" : "tofu\/control\/impl\/ApplyDelegate.html#tuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "final def"}, {"label" : "map11", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map11", "link" : "tofu\/control\/impl\/ApplyDelegate.html#map11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap11", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap11", "link" : "tofu\/control\/impl\/ApplyDelegate.html#ap11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[Z]", "kind" : "final def"}, {"label" : "tuple10", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "tofu.control.impl.ApplyDelegate.tuple10", "link" : "tofu\/control\/impl\/ApplyDelegate.html#tuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "final def"}, {"label" : "map10", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map10", "link" : "tofu\/control\/impl\/ApplyDelegate.html#map10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap10", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap10", "link" : "tofu\/control\/impl\/ApplyDelegate.html#ap10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[Z]", "kind" : "final def"}, {"label" : "tuple9", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "tofu.control.impl.ApplyDelegate.tuple9", "link" : "tofu\/control\/impl\/ApplyDelegate.html#tuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "final def"}, {"label" : "map9", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map9", "link" : "tofu\/control\/impl\/ApplyDelegate.html#map9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap9", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap9", "link" : "tofu\/control\/impl\/ApplyDelegate.html#ap9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[Z]", "kind" : "final def"}, {"label" : "tuple8", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7]): F[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "tofu.control.impl.ApplyDelegate.tuple8", "link" : "tofu\/control\/impl\/ApplyDelegate.html#tuple8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "final def"}, {"label" : "map8", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map8", "link" : "tofu\/control\/impl\/ApplyDelegate.html#map8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap8", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap8", "link" : "tofu\/control\/impl\/ApplyDelegate.html#ap8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[Z]", "kind" : "final def"}, {"label" : "tuple7", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6]): F[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "tofu.control.impl.ApplyDelegate.tuple7", "link" : "tofu\/control\/impl\/ApplyDelegate.html#tuple7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "final def"}, {"label" : "map7", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6])(f: (A0, A1, A2, A3, A4, A5, A6) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map7", "link" : "tofu\/control\/impl\/ApplyDelegate.html#map7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap7", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap7", "link" : "tofu\/control\/impl\/ApplyDelegate.html#ap7[A0,A1,A2,A3,A4,A5,A6,Z](f:F[(A0,A1,A2,A3,A4,A5,A6)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[Z]", "kind" : "final def"}, {"label" : "tuple6", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5]): F[(A0, A1, A2, A3, A4, A5)]", "member" : "tofu.control.impl.ApplyDelegate.tuple6", "link" : "tofu\/control\/impl\/ApplyDelegate.html#tuple6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[(A0,A1,A2,A3,A4,A5)]", "kind" : "final def"}, {"label" : "map6", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5])(f: (A0, A1, A2, A3, A4, A5) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map6", "link" : "tofu\/control\/impl\/ApplyDelegate.html#map6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5])(f:(A0,A1,A2,A3,A4,A5)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap6", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap6", "link" : "tofu\/control\/impl\/ApplyDelegate.html#ap6[A0,A1,A2,A3,A4,A5,Z](f:F[(A0,A1,A2,A3,A4,A5)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[Z]", "kind" : "final def"}, {"label" : "tuple5", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4]): F[(A0, A1, A2, A3, A4)]", "member" : "tofu.control.impl.ApplyDelegate.tuple5", "link" : "tofu\/control\/impl\/ApplyDelegate.html#tuple5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[(A0,A1,A2,A3,A4)]", "kind" : "final def"}, {"label" : "map5", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4])(f: (A0, A1, A2, A3, A4) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map5", "link" : "tofu\/control\/impl\/ApplyDelegate.html#map5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4])(f:(A0,A1,A2,A3,A4)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap5", "tail" : "(f: F[(A0, A1, A2, A3, A4) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap5", "link" : "tofu\/control\/impl\/ApplyDelegate.html#ap5[A0,A1,A2,A3,A4,Z](f:F[(A0,A1,A2,A3,A4)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[Z]", "kind" : "final def"}, {"label" : "tuple4", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3]): F[(A0, A1, A2, A3)]", "member" : "tofu.control.impl.ApplyDelegate.tuple4", "link" : "tofu\/control\/impl\/ApplyDelegate.html#tuple4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[(A0,A1,A2,A3)]", "kind" : "final def"}, {"label" : "map4", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3])(f: (A0, A1, A2, A3) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map4", "link" : "tofu\/control\/impl\/ApplyDelegate.html#map4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3])(f:(A0,A1,A2,A3)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap4", "tail" : "(f: F[(A0, A1, A2, A3) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap4", "link" : "tofu\/control\/impl\/ApplyDelegate.html#ap4[A0,A1,A2,A3,Z](f:F[(A0,A1,A2,A3)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[Z]", "kind" : "final def"}, {"label" : "tuple3", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2]): F[(A0, A1, A2)]", "member" : "tofu.control.impl.ApplyDelegate.tuple3", "link" : "tofu\/control\/impl\/ApplyDelegate.html#tuple3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2]):F[(A0,A1,A2)]", "kind" : "final def"}, {"label" : "map3", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2])(f: (A0, A1, A2) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map3", "link" : "tofu\/control\/impl\/ApplyDelegate.html#map3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2])(f:(A0,A1,A2)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap3", "tail" : "(f: F[(A0, A1, A2) => Z])(f0: F[A0], f1: F[A1], f2: F[A2]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap3", "link" : "tofu\/control\/impl\/ApplyDelegate.html#ap3[A0,A1,A2,Z](f:F[(A0,A1,A2)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2]):F[Z]", "kind" : "final def"}, {"label" : "tuple2", "tail" : "(f1: F[A], f2: F[B]): F[(A, B)]", "member" : "tofu.control.impl.ApplyDelegate.tuple2", "link" : "tofu\/control\/impl\/ApplyDelegate.html#tuple2[A,B](f1:F[A],f2:F[B]):F[(A,B)]", "kind" : "final def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]F[G[α]]]", "member" : "tofu.control.impl.ApplyDelegate.composeFunctor", "link" : "tofu\/control\/impl\/ApplyDelegate.html#composeFunctor[G[_]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "final def"}, {"label" : "composeApply", "tail" : "(G: Apply[G]): InvariantSemigroupal[[α]F[G[α]]]", "member" : "tofu.control.impl.ApplyDelegate.composeApply", "link" : "tofu\/control\/impl\/ApplyDelegate.html#composeApply[G[_]](implicitG:cats.Apply[G]):cats.InvariantSemigroupal[[α]F[G[α]]]", "kind" : "final def"}, {"label" : "map2Eval", "tail" : "(fa: F[A], fb: Eval[F[B]])(f: (A, B) => Z): Eval[F[Z]]", "member" : "tofu.control.impl.ApplyDelegate.map2Eval", "link" : "tofu\/control\/impl\/ApplyDelegate.html#map2Eval[A,B,Z](fa:F[A],fb:cats.Eval[F[B]])(f:(A,B)=>Z):cats.Eval[F[Z]]", "kind" : "final def"}, {"label" : "map2", "tail" : "(fa: F[A], fb: F[B])(f: (A, B) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map2", "link" : "tofu\/control\/impl\/ApplyDelegate.html#map2[A,B,Z](fa:F[A],fb:F[B])(f:(A,B)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap2", "tail" : "(ff: F[(A, B) => Z])(fa: F[A], fb: F[B]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap2", "link" : "tofu\/control\/impl\/ApplyDelegate.html#ap2[A,B,Z](ff:F[(A,B)=>Z])(fa:F[A],fb:F[B]):F[Z]", "kind" : "final def"}, {"label" : "product", "tail" : "(fa: F[A], fb: F[B]): F[(A, B)]", "member" : "tofu.control.impl.ApplyDelegate.product", "link" : "tofu\/control\/impl\/ApplyDelegate.html#product[A,B](fa:F[A],fb:F[B]):F[(A,B)]", "kind" : "final def"}, {"label" : "productL", "tail" : "(fa: F[A])(fb: F[B]): F[A]", "member" : "tofu.control.impl.ApplyDelegate.productL", "link" : "tofu\/control\/impl\/ApplyDelegate.html#productL[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "productR", "tail" : "(fa: F[A])(fb: F[B]): F[B]", "member" : "tofu.control.impl.ApplyDelegate.productR", "link" : "tofu\/control\/impl\/ApplyDelegate.html#productR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: F[A])(f: (A) => B)(g: (B) => A): F[B]", "member" : "tofu.control.impl.ApplyDelegate.imap", "link" : "tofu\/control\/impl\/ApplyDelegate.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "final def"}, {"label" : "ap", "tail" : "(ff: F[(A) => B])(fa: F[A]): F[B]", "member" : "tofu.control.impl.ApplyDelegate.ap", "link" : "tofu\/control\/impl\/ApplyDelegate.html#ap[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "composeContravariant", "tail" : "(G: Contravariant[G]): Contravariant[[α]F[G[α]]]", "member" : "tofu.control.impl.FunctorDelegate.composeContravariant", "link" : "tofu\/control\/impl\/ApplyDelegate.html#composeContravariant[G[_]](implicitG:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "final def"}, {"label" : "compose", "tail" : "(G: Functor[G]): Functor[[α]F[G[α]]]", "member" : "tofu.control.impl.FunctorDelegate.compose", "link" : "tofu\/control\/impl\/ApplyDelegate.html#compose[G[_]](implicitG:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "final def"}, {"label" : "tupleRight", "tail" : "(fa: F[A], b: B): F[(A, B)]", "member" : "tofu.control.impl.FunctorDelegate.tupleRight", "link" : "tofu\/control\/impl\/ApplyDelegate.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "final def"}, {"label" : "tupleLeft", "tail" : "(fa: F[A], b: B): F[(B, A)]", "member" : "tofu.control.impl.FunctorDelegate.tupleLeft", "link" : "tofu\/control\/impl\/ApplyDelegate.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "final def"}, {"label" : "as", "tail" : "(fa: F[A], b: B): F[B]", "member" : "tofu.control.impl.FunctorDelegate.as", "link" : "tofu\/control\/impl\/ApplyDelegate.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "final def"}, {"label" : "fproduct", "tail" : "(fa: F[A])(f: (A) => B): F[(A, B)]", "member" : "tofu.control.impl.FunctorDelegate.fproduct", "link" : "tofu\/control\/impl\/ApplyDelegate.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "final def"}, {"label" : "void", "tail" : "(fa: F[A]): F[Unit]", "member" : "tofu.control.impl.FunctorDelegate.void", "link" : "tofu\/control\/impl\/ApplyDelegate.html#void[A](fa:F[A]):F[Unit]", "kind" : "final def"}, {"label" : "lift", "tail" : "(f: (A) => B): (F[A]) => F[B]", "member" : "tofu.control.impl.FunctorDelegate.lift", "link" : "tofu\/control\/impl\/ApplyDelegate.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "final def"}, {"label" : "widen", "tail" : "(fa: F[A]): F[B]", "member" : "tofu.control.impl.FunctorDelegate.widen", "link" : "tofu\/control\/impl\/ApplyDelegate.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(fa: F[A])(f: (A) => B): F[B]", "member" : "tofu.control.impl.FunctorDelegate.map", "link" : "tofu\/control\/impl\/ApplyDelegate.html#map[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "ifA", "tail" : "(fcond: F[Boolean])(ifTrue: F[A], ifFalse: F[A]): F[A]", "member" : "cats.Apply.ifA", "link" : "tofu\/control\/impl\/ApplyDelegate.html#ifA[A](fcond:F[Boolean])(ifTrue:F[A],ifFalse:F[A]):F[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Apply[G]): Apply[[α]F[G[α]]]", "member" : "cats.Apply.compose", "link" : "tofu\/control\/impl\/ApplyDelegate.html#compose[G[_]](implicitevidence$1:cats.Apply[G]):cats.Apply[[α]F[G[α]]]", "kind" : "def"}, {"label" : "<*", "tail" : "(fa: F[A])(fb: F[B]): F[A]", "member" : "cats.Apply.<*", "link" : "tofu\/control\/impl\/ApplyDelegate.html#<*[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(fa: F[A])(fb: F[B]): F[B]", "member" : "cats.Apply.*>", "link" : "tofu\/control\/impl\/ApplyDelegate.html#*>[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(ff: F[(A) => B])(fa: F[A]): F[B]", "member" : "cats.Apply.<*>", "link" : "tofu\/control\/impl\/ApplyDelegate.html#<*>[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "ifF", "tail" : "(fb: F[Boolean])(ifTrue: => A, ifFalse: => A): F[A]", "member" : "cats.Functor.ifF", "link" : "tofu\/control\/impl\/ApplyDelegate.html#ifF[A](fb:F[Boolean])(ifTrue:=>A,ifFalse:=>A):F[A]", "kind" : "def"}, {"label" : "unzip", "tail" : "(fab: F[(A, B)]): (F[A], F[B])", "member" : "cats.Functor.unzip", "link" : "tofu\/control\/impl\/ApplyDelegate.html#unzip[A,B](fab:F[(A,B)]):(F[A],F[B])", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: F[A])(f: (A) => B): F[B]", "member" : "cats.Functor.fmap", "link" : "tofu\/control\/impl\/ApplyDelegate.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]F[G[α]]]", "member" : "cats.Invariant.compose", "link" : "tofu\/control\/impl\/ApplyDelegate.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/control\/impl\/ApplyDelegate.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/control\/impl\/ApplyDelegate.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/control\/impl\/ApplyDelegate.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/control\/impl\/ApplyDelegate.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/control\/impl\/ApplyDelegate.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/control\/impl\/ApplyDelegate.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/control\/impl\/ApplyDelegate.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/impl\/ApplyDelegate.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/impl\/ApplyDelegate.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/impl\/ApplyDelegate.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/control\/impl\/ApplyDelegate.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/control\/impl\/ApplyDelegate.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/control\/impl\/ApplyDelegate.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/control\/impl\/ApplyDelegate.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/control\/impl\/ApplyDelegate.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/control\/impl\/ApplyDelegate.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/control\/impl\/ApplyDelegate.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/control\/impl\/ApplyDelegate.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/control\/impl\/ApplyDelegate.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "F", "tail" : ": Apply[F]", "member" : "tofu.control.impl.ApplyDelegate.F", "link" : "tofu\/control\/impl\/ApplyDelegate.html#F:cats.Apply[F]", "kind" : "abstract val"}], "shortDescription" : ""}, {"name" : "tofu.control.impl.FunctorDelegate", "trait" : "tofu\/control\/impl\/FunctorDelegate.html", "kind" : "trait", "members_trait" : [{"label" : "composeContravariant", "tail" : "(G: Contravariant[G]): Contravariant[[α]F[G[α]]]", "member" : "tofu.control.impl.FunctorDelegate.composeContravariant", "link" : "tofu\/control\/impl\/FunctorDelegate.html#composeContravariant[G[_]](implicitG:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "final def"}, {"label" : "compose", "tail" : "(G: Functor[G]): Functor[[α]F[G[α]]]", "member" : "tofu.control.impl.FunctorDelegate.compose", "link" : "tofu\/control\/impl\/FunctorDelegate.html#compose[G[_]](implicitG:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "final def"}, {"label" : "tupleRight", "tail" : "(fa: F[A], b: B): F[(A, B)]", "member" : "tofu.control.impl.FunctorDelegate.tupleRight", "link" : "tofu\/control\/impl\/FunctorDelegate.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "final def"}, {"label" : "tupleLeft", "tail" : "(fa: F[A], b: B): F[(B, A)]", "member" : "tofu.control.impl.FunctorDelegate.tupleLeft", "link" : "tofu\/control\/impl\/FunctorDelegate.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "final def"}, {"label" : "as", "tail" : "(fa: F[A], b: B): F[B]", "member" : "tofu.control.impl.FunctorDelegate.as", "link" : "tofu\/control\/impl\/FunctorDelegate.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "final def"}, {"label" : "fproduct", "tail" : "(fa: F[A])(f: (A) => B): F[(A, B)]", "member" : "tofu.control.impl.FunctorDelegate.fproduct", "link" : "tofu\/control\/impl\/FunctorDelegate.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "final def"}, {"label" : "void", "tail" : "(fa: F[A]): F[Unit]", "member" : "tofu.control.impl.FunctorDelegate.void", "link" : "tofu\/control\/impl\/FunctorDelegate.html#void[A](fa:F[A]):F[Unit]", "kind" : "final def"}, {"label" : "lift", "tail" : "(f: (A) => B): (F[A]) => F[B]", "member" : "tofu.control.impl.FunctorDelegate.lift", "link" : "tofu\/control\/impl\/FunctorDelegate.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "final def"}, {"label" : "widen", "tail" : "(fa: F[A]): F[B]", "member" : "tofu.control.impl.FunctorDelegate.widen", "link" : "tofu\/control\/impl\/FunctorDelegate.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(fa: F[A])(f: (A) => B): F[B]", "member" : "tofu.control.impl.FunctorDelegate.map", "link" : "tofu\/control\/impl\/FunctorDelegate.html#map[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "ifF", "tail" : "(fb: F[Boolean])(ifTrue: => A, ifFalse: => A): F[A]", "member" : "cats.Functor.ifF", "link" : "tofu\/control\/impl\/FunctorDelegate.html#ifF[A](fb:F[Boolean])(ifTrue:=>A,ifFalse:=>A):F[A]", "kind" : "def"}, {"label" : "unzip", "tail" : "(fab: F[(A, B)]): (F[A], F[B])", "member" : "cats.Functor.unzip", "link" : "tofu\/control\/impl\/FunctorDelegate.html#unzip[A,B](fab:F[(A,B)]):(F[A],F[B])", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: F[A])(f: (A) => B): F[B]", "member" : "cats.Functor.fmap", "link" : "tofu\/control\/impl\/FunctorDelegate.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: F[A])(f: (A) => B)(g: (B) => A): F[B]", "member" : "cats.Functor.imap", "link" : "tofu\/control\/impl\/FunctorDelegate.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]F[G[α]]]", "member" : "cats.Invariant.composeFunctor", "link" : "tofu\/control\/impl\/FunctorDelegate.html#composeFunctor[G[_]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]F[G[α]]]", "member" : "cats.Invariant.compose", "link" : "tofu\/control\/impl\/FunctorDelegate.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/control\/impl\/FunctorDelegate.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/control\/impl\/FunctorDelegate.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/control\/impl\/FunctorDelegate.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/control\/impl\/FunctorDelegate.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/control\/impl\/FunctorDelegate.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/control\/impl\/FunctorDelegate.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/control\/impl\/FunctorDelegate.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/impl\/FunctorDelegate.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/impl\/FunctorDelegate.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/impl\/FunctorDelegate.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/control\/impl\/FunctorDelegate.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/control\/impl\/FunctorDelegate.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/control\/impl\/FunctorDelegate.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/control\/impl\/FunctorDelegate.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/control\/impl\/FunctorDelegate.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/control\/impl\/FunctorDelegate.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/control\/impl\/FunctorDelegate.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/control\/impl\/FunctorDelegate.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/control\/impl\/FunctorDelegate.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "F", "tail" : ": Functor[F]", "member" : "tofu.control.impl.FunctorDelegate.F", "link" : "tofu\/control\/impl\/FunctorDelegate.html#F:cats.Functor[F]", "kind" : "abstract val"}], "shortDescription" : ""}, {"name" : "tofu.control.impl.SelectiveEitherT", "shortDescription" : "", "members_class" : [{"label" : "pure", "tail" : "(x: A): EitherT[F, L, A]", "member" : "tofu.control.impl.SelectiveEitherT.pure", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#pure[A](x:A):cats.data.EitherT[F,L,A]", "kind" : "def"}, {"label" : "ap", "tail" : "(ff: EitherT[F, L, (A) => B])(fa: EitherT[F, L, A]): EitherT[F, L, B]", "member" : "tofu.control.impl.SelectiveEitherT.ap", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#ap[A,B](ff:cats.data.EitherT[F,L,A=>B])(fa:cats.data.EitherT[F,L,A]):cats.data.EitherT[F,L,B]", "kind" : "def"}, {"label" : "selectAp", "tail" : "(fe: EitherT[F, L, Either[A, B]])(ff: => EitherT[F, L, (A) => B]): EitherT[F, L, B]", "member" : "tofu.control.impl.SelectiveEitherT.selectAp", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#selectAp[A,B](fe:cats.data.EitherT[F,L,Either[A,B]])(ff:=>cats.data.EitherT[F,L,A=>B]):cats.data.EitherT[F,L,B]", "kind" : "def"}, {"member" : "tofu.control.impl.SelectiveEitherT#<init>", "error" : "unsupported entity"}, {"label" : "optionMonoid", "tail" : "(): Monoid[EitherT[F, L, Option[A]]]", "member" : "tofu.control.Selective.optionMonoid", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#optionMonoid[A]:cats.Monoid[F[Option[A]]]", "kind" : "def"}, {"label" : "unlesss_", "tail" : "(fb: EitherT[F, L, Boolean])(fa: => EitherT[F, L, A]): EitherT[F, L, Unit]", "member" : "tofu.control.Selective.unlesss_", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#unlesss_[A](fb:F[Boolean])(fa:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "whens_", "tail" : "(fb: EitherT[F, L, Boolean])(fa: => EitherT[F, L, A]): EitherT[F, L, Unit]", "member" : "tofu.control.Selective.whens_", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#whens_[A](fb:F[Boolean])(fa:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "unlesss", "tail" : "(fb: EitherT[F, L, Boolean])(fa: => EitherT[F, L, A]): EitherT[F, L, Option[A]]", "member" : "tofu.control.Selective.unlesss", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#unlesss[A](fb:F[Boolean])(fa:=>F[A]):F[Option[A]]", "kind" : "def"}, {"label" : "whens", "tail" : "(fb: EitherT[F, L, Boolean])(fa: => EitherT[F, L, A]): EitherT[F, L, Option[A]]", "member" : "tofu.control.Selective.whens", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#whens[A](fb:F[Boolean])(fa:=>F[A]):F[Option[A]]", "kind" : "def"}, {"label" : "orElses", "tail" : "(fx: EitherT[F, L, Option[A]])(fy: => EitherT[F, L, Option[A]]): EitherT[F, L, Option[A]]", "member" : "tofu.control.Selective.orElses", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#orElses[A](fx:F[Option[A]])(fy:=>F[Option[A]]):F[Option[A]]", "kind" : "def"}, {"label" : "selectRight", "tail" : "(fb: EitherT[F, L, A], fo: EitherT[F, L, Option[A]]): EitherT[F, L, A]", "member" : "tofu.control.Selective.selectRight", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#selectRight[A](fb:F[A],fo:F[Option[A]]):F[A]", "kind" : "def"}, {"label" : "select", "tail" : "(fo: EitherT[F, L, Option[A]])(fa: => EitherT[F, L, A]): EitherT[F, L, A]", "member" : "tofu.control.Selective.select", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#select[A](fo:F[Option[A]])(fa:=>F[A]):F[A]", "kind" : "def"}, {"label" : "whenA", "tail" : "(cond: Boolean)(f: => EitherT[F, L, A]): EitherT[F, L, Unit]", "member" : "cats.Applicative.whenA", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#whenA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "unlessA", "tail" : "(cond: Boolean)(f: => EitherT[F, L, A]): EitherT[F, L, Unit]", "member" : "cats.Applicative.unlessA", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#unlessA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "composeContravariantMonoidal", "tail" : "(arg0: ContravariantMonoidal[G]): ContravariantMonoidal[[α]EitherT[F, L, G[α]]]", "member" : "cats.Applicative.composeContravariantMonoidal", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#composeContravariantMonoidal[G[_]](implicitevidence$2:cats.ContravariantMonoidal[G]):cats.ContravariantMonoidal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Applicative[G]): Applicative[[α]EitherT[F, L, G[α]]]", "member" : "cats.Applicative.compose", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#compose[G[_]](implicitevidence$1:cats.Applicative[G]):cats.Applicative[[α]F[G[α]]]", "kind" : "def"}, {"label" : "replicateA", "tail" : "(n: Int, fa: EitherT[F, L, A]): EitherT[F, L, List[A]]", "member" : "cats.Applicative.replicateA", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#replicateA[A](n:Int,fa:F[A]):F[List[A]]", "kind" : "def"}, {"label" : "map", "tail" : "(fa: EitherT[F, L, A])(f: (A) => B): EitherT[F, L, B]", "member" : "cats.Applicative.map", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#map[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "def"}, {"label" : "unit", "tail" : "(): EitherT[F, L, Unit]", "member" : "cats.Applicative.unit", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#unit:F[Unit]", "kind" : "def"}, {"label" : "point", "tail" : "(a: A): EitherT[F, L, A]", "member" : "cats.InvariantMonoidal.point", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#point[A](a:A):F[A]", "kind" : "def"}, {"label" : "ifA", "tail" : "(fcond: EitherT[F, L, Boolean])(ifTrue: EitherT[F, L, A], ifFalse: EitherT[F, L, A]): EitherT[F, L, A]", "member" : "cats.Apply.ifA", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#ifA[A](fcond:F[Boolean])(ifTrue:F[A],ifFalse:F[A]):F[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Apply[G]): Apply[[α]EitherT[F, L, G[α]]]", "member" : "cats.Apply.compose", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#compose[G[_]](implicitevidence$1:cats.Apply[G]):cats.Apply[[α]F[G[α]]]", "kind" : "def"}, {"label" : "map2Eval", "tail" : "(fa: EitherT[F, L, A], fb: Eval[EitherT[F, L, B]])(f: (A, B) => Z): Eval[EitherT[F, L, Z]]", "member" : "cats.Apply.map2Eval", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#map2Eval[A,B,Z](fa:F[A],fb:cats.Eval[F[B]])(f:(A,B)=>Z):cats.Eval[F[Z]]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa: EitherT[F, L, A], fb: EitherT[F, L, B])(f: (A, B) => Z): EitherT[F, L, Z]", "member" : "cats.Apply.map2", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#map2[A,B,Z](fa:F[A],fb:F[B])(f:(A,B)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap2", "tail" : "(ff: EitherT[F, L, (A, B) => Z])(fa: EitherT[F, L, A], fb: EitherT[F, L, B]): EitherT[F, L, Z]", "member" : "cats.Apply.ap2", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#ap2[A,B,Z](ff:F[(A,B)=>Z])(fa:F[A],fb:F[B]):F[Z]", "kind" : "def"}, {"label" : "<*", "tail" : "(fa: EitherT[F, L, A])(fb: EitherT[F, L, B]): EitherT[F, L, A]", "member" : "cats.Apply.<*", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#<*[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(fa: EitherT[F, L, A])(fb: EitherT[F, L, B]): EitherT[F, L, B]", "member" : "cats.Apply.*>", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#*>[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(ff: EitherT[F, L, (A) => B])(fa: EitherT[F, L, A]): EitherT[F, L, B]", "member" : "cats.Apply.<*>", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#<*>[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "product", "tail" : "(fa: EitherT[F, L, A], fb: EitherT[F, L, B]): EitherT[F, L, (A, B)]", "member" : "cats.Apply.product", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#product[A,B](fa:F[A],fb:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "productL", "tail" : "(fa: EitherT[F, L, A])(fb: EitherT[F, L, B]): EitherT[F, L, A]", "member" : "cats.Apply.productL", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#productL[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "def"}, {"label" : "productR", "tail" : "(fa: EitherT[F, L, A])(fb: EitherT[F, L, B]): EitherT[F, L, B]", "member" : "cats.Apply.productR", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#productR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "def"}, {"label" : "tuple22", "tail" : "(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7], f8: EitherT[F, L, A8], f9: EitherT[F, L, A9], f10: EitherT[F, L, A10], f11: EitherT[F, L, A11], f12: EitherT[F, L, A12], f13: EitherT[F, L, A13], f14: EitherT[F, L, A14], f15: EitherT[F, L, A15], f16: EitherT[F, L, A16], f17: EitherT[F, L, A17], f18: EitherT[F, L, A18], f19: EitherT[F, L, A19], f20: EitherT[F, L, A20], f21: EitherT[F, L, A21]): EitherT[F, L, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.ApplyArityFunctions.tuple22", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#tuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "map22", "tail" : "(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7], f8: EitherT[F, L, A8], f9: EitherT[F, L, A9], f10: EitherT[F, L, A10], f11: EitherT[F, L, A11], f12: EitherT[F, L, A12], f13: EitherT[F, L, A13], f14: EitherT[F, L, A14], f15: EitherT[F, L, A15], f16: EitherT[F, L, A16], f17: EitherT[F, L, A17], f18: EitherT[F, L, A18], f19: EitherT[F, L, A19], f20: EitherT[F, L, A20], f21: EitherT[F, L, A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z): EitherT[F, L, Z]", "member" : "cats.ApplyArityFunctions.map22", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#map22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap22", "tail" : "(f: EitherT[F, L, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z])(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7], f8: EitherT[F, L, A8], f9: EitherT[F, L, A9], f10: EitherT[F, L, A10], f11: EitherT[F, L, A11], f12: EitherT[F, L, A12], f13: EitherT[F, L, A13], f14: EitherT[F, L, A14], f15: EitherT[F, L, A15], f16: EitherT[F, L, A16], f17: EitherT[F, L, A17], f18: EitherT[F, L, A18], f19: EitherT[F, L, A19], f20: EitherT[F, L, A20], f21: EitherT[F, L, A21]): EitherT[F, L, Z]", "member" : "cats.ApplyArityFunctions.ap22", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#ap22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[Z]", "kind" : "def"}, {"label" : "tuple21", "tail" : "(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7], f8: EitherT[F, L, A8], f9: EitherT[F, L, A9], f10: EitherT[F, L, A10], f11: EitherT[F, L, A11], f12: EitherT[F, L, A12], f13: EitherT[F, L, A13], f14: EitherT[F, L, A14], f15: EitherT[F, L, A15], f16: EitherT[F, L, A16], f17: EitherT[F, L, A17], f18: EitherT[F, L, A18], f19: EitherT[F, L, A19], f20: EitherT[F, L, A20]): EitherT[F, L, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.ApplyArityFunctions.tuple21", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#tuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "map21", "tail" : "(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7], f8: EitherT[F, L, A8], f9: EitherT[F, L, A9], f10: EitherT[F, L, A10], f11: EitherT[F, L, A11], f12: EitherT[F, L, A12], f13: EitherT[F, L, A13], f14: EitherT[F, L, A14], f15: EitherT[F, L, A15], f16: EitherT[F, L, A16], f17: EitherT[F, L, A17], f18: EitherT[F, L, A18], f19: EitherT[F, L, A19], f20: EitherT[F, L, A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z): EitherT[F, L, Z]", "member" : "cats.ApplyArityFunctions.map21", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#map21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap21", "tail" : "(f: EitherT[F, L, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z])(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7], f8: EitherT[F, L, A8], f9: EitherT[F, L, A9], f10: EitherT[F, L, A10], f11: EitherT[F, L, A11], f12: EitherT[F, L, A12], f13: EitherT[F, L, A13], f14: EitherT[F, L, A14], f15: EitherT[F, L, A15], f16: EitherT[F, L, A16], f17: EitherT[F, L, A17], f18: EitherT[F, L, A18], f19: EitherT[F, L, A19], f20: EitherT[F, L, A20]): EitherT[F, L, Z]", "member" : "cats.ApplyArityFunctions.ap21", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#ap21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[Z]", "kind" : "def"}, {"label" : "tuple20", "tail" : "(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7], f8: EitherT[F, L, A8], f9: EitherT[F, L, A9], f10: EitherT[F, L, A10], f11: EitherT[F, L, A11], f12: EitherT[F, L, A12], f13: EitherT[F, L, A13], f14: EitherT[F, L, A14], f15: EitherT[F, L, A15], f16: EitherT[F, L, A16], f17: EitherT[F, L, A17], f18: EitherT[F, L, A18], f19: EitherT[F, L, A19]): EitherT[F, L, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.ApplyArityFunctions.tuple20", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#tuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "map20", "tail" : "(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7], f8: EitherT[F, L, A8], f9: EitherT[F, L, A9], f10: EitherT[F, L, A10], f11: EitherT[F, L, A11], f12: EitherT[F, L, A12], f13: EitherT[F, L, A13], f14: EitherT[F, L, A14], f15: EitherT[F, L, A15], f16: EitherT[F, L, A16], f17: EitherT[F, L, A17], f18: EitherT[F, L, A18], f19: EitherT[F, L, A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z): EitherT[F, L, Z]", "member" : "cats.ApplyArityFunctions.map20", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#map20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap20", "tail" : "(f: EitherT[F, L, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z])(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7], f8: EitherT[F, L, A8], f9: EitherT[F, L, A9], f10: EitherT[F, L, A10], f11: EitherT[F, L, A11], f12: EitherT[F, L, A12], f13: EitherT[F, L, A13], f14: EitherT[F, L, A14], f15: EitherT[F, L, A15], f16: EitherT[F, L, A16], f17: EitherT[F, L, A17], f18: EitherT[F, L, A18], f19: EitherT[F, L, A19]): EitherT[F, L, Z]", "member" : "cats.ApplyArityFunctions.ap20", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#ap20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[Z]", "kind" : "def"}, {"label" : "tuple19", "tail" : "(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7], f8: EitherT[F, L, A8], f9: EitherT[F, L, A9], f10: EitherT[F, L, A10], f11: EitherT[F, L, A11], f12: EitherT[F, L, A12], f13: EitherT[F, L, A13], f14: EitherT[F, L, A14], f15: EitherT[F, L, A15], f16: EitherT[F, L, A16], f17: EitherT[F, L, A17], f18: EitherT[F, L, A18]): EitherT[F, L, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.ApplyArityFunctions.tuple19", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#tuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "map19", "tail" : "(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7], f8: EitherT[F, L, A8], f9: EitherT[F, L, A9], f10: EitherT[F, L, A10], f11: EitherT[F, L, A11], f12: EitherT[F, L, A12], f13: EitherT[F, L, A13], f14: EitherT[F, L, A14], f15: EitherT[F, L, A15], f16: EitherT[F, L, A16], f17: EitherT[F, L, A17], f18: EitherT[F, L, A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z): EitherT[F, L, Z]", "member" : "cats.ApplyArityFunctions.map19", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#map19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap19", "tail" : "(f: EitherT[F, L, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z])(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7], f8: EitherT[F, L, A8], f9: EitherT[F, L, A9], f10: EitherT[F, L, A10], f11: EitherT[F, L, A11], f12: EitherT[F, L, A12], f13: EitherT[F, L, A13], f14: EitherT[F, L, A14], f15: EitherT[F, L, A15], f16: EitherT[F, L, A16], f17: EitherT[F, L, A17], f18: EitherT[F, L, A18]): EitherT[F, L, Z]", "member" : "cats.ApplyArityFunctions.ap19", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#ap19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[Z]", "kind" : "def"}, {"label" : "tuple18", "tail" : "(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7], f8: EitherT[F, L, A8], f9: EitherT[F, L, A9], f10: EitherT[F, L, A10], f11: EitherT[F, L, A11], f12: EitherT[F, L, A12], f13: EitherT[F, L, A13], f14: EitherT[F, L, A14], f15: EitherT[F, L, A15], f16: EitherT[F, L, A16], f17: EitherT[F, L, A17]): EitherT[F, L, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.ApplyArityFunctions.tuple18", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#tuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "map18", "tail" : "(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7], f8: EitherT[F, L, A8], f9: EitherT[F, L, A9], f10: EitherT[F, L, A10], f11: EitherT[F, L, A11], f12: EitherT[F, L, A12], f13: EitherT[F, L, A13], f14: EitherT[F, L, A14], f15: EitherT[F, L, A15], f16: EitherT[F, L, A16], f17: EitherT[F, L, A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z): EitherT[F, L, Z]", "member" : "cats.ApplyArityFunctions.map18", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#map18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap18", "tail" : "(f: EitherT[F, L, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z])(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7], f8: EitherT[F, L, A8], f9: EitherT[F, L, A9], f10: EitherT[F, L, A10], f11: EitherT[F, L, A11], f12: EitherT[F, L, A12], f13: EitherT[F, L, A13], f14: EitherT[F, L, A14], f15: EitherT[F, L, A15], f16: EitherT[F, L, A16], f17: EitherT[F, L, A17]): EitherT[F, L, Z]", "member" : "cats.ApplyArityFunctions.ap18", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#ap18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[Z]", "kind" : "def"}, {"label" : "tuple17", "tail" : "(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7], f8: EitherT[F, L, A8], f9: EitherT[F, L, A9], f10: EitherT[F, L, A10], f11: EitherT[F, L, A11], f12: EitherT[F, L, A12], f13: EitherT[F, L, A13], f14: EitherT[F, L, A14], f15: EitherT[F, L, A15], f16: EitherT[F, L, A16]): EitherT[F, L, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.ApplyArityFunctions.tuple17", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#tuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "map17", "tail" : "(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7], f8: EitherT[F, L, A8], f9: EitherT[F, L, A9], f10: EitherT[F, L, A10], f11: EitherT[F, L, A11], f12: EitherT[F, L, A12], f13: EitherT[F, L, A13], f14: EitherT[F, L, A14], f15: EitherT[F, L, A15], f16: EitherT[F, L, A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z): EitherT[F, L, Z]", "member" : "cats.ApplyArityFunctions.map17", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#map17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap17", "tail" : "(f: EitherT[F, L, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z])(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7], f8: EitherT[F, L, A8], f9: EitherT[F, L, A9], f10: EitherT[F, L, A10], f11: EitherT[F, L, A11], f12: EitherT[F, L, A12], f13: EitherT[F, L, A13], f14: EitherT[F, L, A14], f15: EitherT[F, L, A15], f16: EitherT[F, L, A16]): EitherT[F, L, Z]", "member" : "cats.ApplyArityFunctions.ap17", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#ap17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[Z]", "kind" : "def"}, {"label" : "tuple16", "tail" : "(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7], f8: EitherT[F, L, A8], f9: EitherT[F, L, A9], f10: EitherT[F, L, A10], f11: EitherT[F, L, A11], f12: EitherT[F, L, A12], f13: EitherT[F, L, A13], f14: EitherT[F, L, A14], f15: EitherT[F, L, A15]): EitherT[F, L, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.ApplyArityFunctions.tuple16", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#tuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "map16", "tail" : "(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7], f8: EitherT[F, L, A8], f9: EitherT[F, L, A9], f10: EitherT[F, L, A10], f11: EitherT[F, L, A11], f12: EitherT[F, L, A12], f13: EitherT[F, L, A13], f14: EitherT[F, L, A14], f15: EitherT[F, L, A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z): EitherT[F, L, Z]", "member" : "cats.ApplyArityFunctions.map16", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#map16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap16", "tail" : "(f: EitherT[F, L, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z])(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7], f8: EitherT[F, L, A8], f9: EitherT[F, L, A9], f10: EitherT[F, L, A10], f11: EitherT[F, L, A11], f12: EitherT[F, L, A12], f13: EitherT[F, L, A13], f14: EitherT[F, L, A14], f15: EitherT[F, L, A15]): EitherT[F, L, Z]", "member" : "cats.ApplyArityFunctions.ap16", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#ap16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[Z]", "kind" : "def"}, {"label" : "tuple15", "tail" : "(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7], f8: EitherT[F, L, A8], f9: EitherT[F, L, A9], f10: EitherT[F, L, A10], f11: EitherT[F, L, A11], f12: EitherT[F, L, A12], f13: EitherT[F, L, A13], f14: EitherT[F, L, A14]): EitherT[F, L, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.ApplyArityFunctions.tuple15", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#tuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "map15", "tail" : "(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7], f8: EitherT[F, L, A8], f9: EitherT[F, L, A9], f10: EitherT[F, L, A10], f11: EitherT[F, L, A11], f12: EitherT[F, L, A12], f13: EitherT[F, L, A13], f14: EitherT[F, L, A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z): EitherT[F, L, Z]", "member" : "cats.ApplyArityFunctions.map15", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#map15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap15", "tail" : "(f: EitherT[F, L, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z])(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7], f8: EitherT[F, L, A8], f9: EitherT[F, L, A9], f10: EitherT[F, L, A10], f11: EitherT[F, L, A11], f12: EitherT[F, L, A12], f13: EitherT[F, L, A13], f14: EitherT[F, L, A14]): EitherT[F, L, Z]", "member" : "cats.ApplyArityFunctions.ap15", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#ap15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[Z]", "kind" : "def"}, {"label" : "tuple14", "tail" : "(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7], f8: EitherT[F, L, A8], f9: EitherT[F, L, A9], f10: EitherT[F, L, A10], f11: EitherT[F, L, A11], f12: EitherT[F, L, A12], f13: EitherT[F, L, A13]): EitherT[F, L, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.ApplyArityFunctions.tuple14", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#tuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "map14", "tail" : "(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7], f8: EitherT[F, L, A8], f9: EitherT[F, L, A9], f10: EitherT[F, L, A10], f11: EitherT[F, L, A11], f12: EitherT[F, L, A12], f13: EitherT[F, L, A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z): EitherT[F, L, Z]", "member" : "cats.ApplyArityFunctions.map14", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#map14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap14", "tail" : "(f: EitherT[F, L, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z])(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7], f8: EitherT[F, L, A8], f9: EitherT[F, L, A9], f10: EitherT[F, L, A10], f11: EitherT[F, L, A11], f12: EitherT[F, L, A12], f13: EitherT[F, L, A13]): EitherT[F, L, Z]", "member" : "cats.ApplyArityFunctions.ap14", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#ap14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[Z]", "kind" : "def"}, {"label" : "tuple13", "tail" : "(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7], f8: EitherT[F, L, A8], f9: EitherT[F, L, A9], f10: EitherT[F, L, A10], f11: EitherT[F, L, A11], f12: EitherT[F, L, A12]): EitherT[F, L, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.ApplyArityFunctions.tuple13", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#tuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "map13", "tail" : "(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7], f8: EitherT[F, L, A8], f9: EitherT[F, L, A9], f10: EitherT[F, L, A10], f11: EitherT[F, L, A11], f12: EitherT[F, L, A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z): EitherT[F, L, Z]", "member" : "cats.ApplyArityFunctions.map13", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#map13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap13", "tail" : "(f: EitherT[F, L, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z])(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7], f8: EitherT[F, L, A8], f9: EitherT[F, L, A9], f10: EitherT[F, L, A10], f11: EitherT[F, L, A11], f12: EitherT[F, L, A12]): EitherT[F, L, Z]", "member" : "cats.ApplyArityFunctions.ap13", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#ap13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[Z]", "kind" : "def"}, {"label" : "tuple12", "tail" : "(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7], f8: EitherT[F, L, A8], f9: EitherT[F, L, A9], f10: EitherT[F, L, A10], f11: EitherT[F, L, A11]): EitherT[F, L, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.ApplyArityFunctions.tuple12", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#tuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "map12", "tail" : "(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7], f8: EitherT[F, L, A8], f9: EitherT[F, L, A9], f10: EitherT[F, L, A10], f11: EitherT[F, L, A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z): EitherT[F, L, Z]", "member" : "cats.ApplyArityFunctions.map12", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#map12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap12", "tail" : "(f: EitherT[F, L, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z])(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7], f8: EitherT[F, L, A8], f9: EitherT[F, L, A9], f10: EitherT[F, L, A10], f11: EitherT[F, L, A11]): EitherT[F, L, Z]", "member" : "cats.ApplyArityFunctions.ap12", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#ap12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[Z]", "kind" : "def"}, {"label" : "tuple11", "tail" : "(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7], f8: EitherT[F, L, A8], f9: EitherT[F, L, A9], f10: EitherT[F, L, A10]): EitherT[F, L, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.ApplyArityFunctions.tuple11", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#tuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "map11", "tail" : "(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7], f8: EitherT[F, L, A8], f9: EitherT[F, L, A9], f10: EitherT[F, L, A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z): EitherT[F, L, Z]", "member" : "cats.ApplyArityFunctions.map11", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#map11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap11", "tail" : "(f: EitherT[F, L, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z])(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7], f8: EitherT[F, L, A8], f9: EitherT[F, L, A9], f10: EitherT[F, L, A10]): EitherT[F, L, Z]", "member" : "cats.ApplyArityFunctions.ap11", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#ap11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[Z]", "kind" : "def"}, {"label" : "tuple10", "tail" : "(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7], f8: EitherT[F, L, A8], f9: EitherT[F, L, A9]): EitherT[F, L, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.ApplyArityFunctions.tuple10", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#tuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "map10", "tail" : "(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7], f8: EitherT[F, L, A8], f9: EitherT[F, L, A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z): EitherT[F, L, Z]", "member" : "cats.ApplyArityFunctions.map10", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#map10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap10", "tail" : "(f: EitherT[F, L, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z])(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7], f8: EitherT[F, L, A8], f9: EitherT[F, L, A9]): EitherT[F, L, Z]", "member" : "cats.ApplyArityFunctions.ap10", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#ap10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[Z]", "kind" : "def"}, {"label" : "tuple9", "tail" : "(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7], f8: EitherT[F, L, A8]): EitherT[F, L, (A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.ApplyArityFunctions.tuple9", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#tuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "map9", "tail" : "(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7], f8: EitherT[F, L, A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z): EitherT[F, L, Z]", "member" : "cats.ApplyArityFunctions.map9", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#map9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap9", "tail" : "(f: EitherT[F, L, (A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z])(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7], f8: EitherT[F, L, A8]): EitherT[F, L, Z]", "member" : "cats.ApplyArityFunctions.ap9", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#ap9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[Z]", "kind" : "def"}, {"label" : "tuple8", "tail" : "(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7]): EitherT[F, L, (A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.ApplyArityFunctions.tuple8", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#tuple8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "map8", "tail" : "(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) => Z): EitherT[F, L, Z]", "member" : "cats.ApplyArityFunctions.map8", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#map8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap8", "tail" : "(f: EitherT[F, L, (A0, A1, A2, A3, A4, A5, A6, A7) => Z])(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6], f7: EitherT[F, L, A7]): EitherT[F, L, Z]", "member" : "cats.ApplyArityFunctions.ap8", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#ap8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[Z]", "kind" : "def"}, {"label" : "tuple7", "tail" : "(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6]): EitherT[F, L, (A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.ApplyArityFunctions.tuple7", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#tuple7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "map7", "tail" : "(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6])(f: (A0, A1, A2, A3, A4, A5, A6) => Z): EitherT[F, L, Z]", "member" : "cats.ApplyArityFunctions.map7", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#map7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap7", "tail" : "(f: EitherT[F, L, (A0, A1, A2, A3, A4, A5, A6) => Z])(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5], f6: EitherT[F, L, A6]): EitherT[F, L, Z]", "member" : "cats.ApplyArityFunctions.ap7", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#ap7[A0,A1,A2,A3,A4,A5,A6,Z](f:F[(A0,A1,A2,A3,A4,A5,A6)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[Z]", "kind" : "def"}, {"label" : "tuple6", "tail" : "(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5]): EitherT[F, L, (A0, A1, A2, A3, A4, A5)]", "member" : "cats.ApplyArityFunctions.tuple6", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#tuple6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[(A0,A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "map6", "tail" : "(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5])(f: (A0, A1, A2, A3, A4, A5) => Z): EitherT[F, L, Z]", "member" : "cats.ApplyArityFunctions.map6", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#map6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5])(f:(A0,A1,A2,A3,A4,A5)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap6", "tail" : "(f: EitherT[F, L, (A0, A1, A2, A3, A4, A5) => Z])(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4], f5: EitherT[F, L, A5]): EitherT[F, L, Z]", "member" : "cats.ApplyArityFunctions.ap6", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#ap6[A0,A1,A2,A3,A4,A5,Z](f:F[(A0,A1,A2,A3,A4,A5)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[Z]", "kind" : "def"}, {"label" : "tuple5", "tail" : "(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4]): EitherT[F, L, (A0, A1, A2, A3, A4)]", "member" : "cats.ApplyArityFunctions.tuple5", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#tuple5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[(A0,A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "map5", "tail" : "(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4])(f: (A0, A1, A2, A3, A4) => Z): EitherT[F, L, Z]", "member" : "cats.ApplyArityFunctions.map5", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#map5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4])(f:(A0,A1,A2,A3,A4)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap5", "tail" : "(f: EitherT[F, L, (A0, A1, A2, A3, A4) => Z])(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3], f4: EitherT[F, L, A4]): EitherT[F, L, Z]", "member" : "cats.ApplyArityFunctions.ap5", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#ap5[A0,A1,A2,A3,A4,Z](f:F[(A0,A1,A2,A3,A4)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[Z]", "kind" : "def"}, {"label" : "tuple4", "tail" : "(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3]): EitherT[F, L, (A0, A1, A2, A3)]", "member" : "cats.ApplyArityFunctions.tuple4", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#tuple4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[(A0,A1,A2,A3)]", "kind" : "def"}, {"label" : "map4", "tail" : "(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3])(f: (A0, A1, A2, A3) => Z): EitherT[F, L, Z]", "member" : "cats.ApplyArityFunctions.map4", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#map4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3])(f:(A0,A1,A2,A3)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap4", "tail" : "(f: EitherT[F, L, (A0, A1, A2, A3) => Z])(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2], f3: EitherT[F, L, A3]): EitherT[F, L, Z]", "member" : "cats.ApplyArityFunctions.ap4", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#ap4[A0,A1,A2,A3,Z](f:F[(A0,A1,A2,A3)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[Z]", "kind" : "def"}, {"label" : "tuple3", "tail" : "(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2]): EitherT[F, L, (A0, A1, A2)]", "member" : "cats.ApplyArityFunctions.tuple3", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#tuple3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2]):F[(A0,A1,A2)]", "kind" : "def"}, {"label" : "map3", "tail" : "(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2])(f: (A0, A1, A2) => Z): EitherT[F, L, Z]", "member" : "cats.ApplyArityFunctions.map3", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#map3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2])(f:(A0,A1,A2)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap3", "tail" : "(f: EitherT[F, L, (A0, A1, A2) => Z])(f0: EitherT[F, L, A0], f1: EitherT[F, L, A1], f2: EitherT[F, L, A2]): EitherT[F, L, Z]", "member" : "cats.ApplyArityFunctions.ap3", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#ap3[A0,A1,A2,Z](f:F[(A0,A1,A2)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2]):F[Z]", "kind" : "def"}, {"label" : "tuple2", "tail" : "(f1: EitherT[F, L, A], f2: EitherT[F, L, B]): EitherT[F, L, (A, B)]", "member" : "cats.ApplyArityFunctions.tuple2", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#tuple2[A,B](f1:F[A],f2:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "composeApply", "tail" : "(arg0: Apply[G]): InvariantSemigroupal[[α]EitherT[F, L, G[α]]]", "member" : "cats.InvariantSemigroupal.composeApply", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#composeApply[G[_]](implicitevidence$1:cats.Apply[G]):cats.InvariantSemigroupal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Contravariant[[α]EitherT[F, L, G[α]]]", "member" : "cats.Functor.composeContravariant", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#composeContravariant[G[_]](implicitevidence$2:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Functor[G]): Functor[[α]EitherT[F, L, G[α]]]", "member" : "cats.Functor.compose", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#compose[G[_]](implicitevidence$1:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "def"}, {"label" : "ifF", "tail" : "(fb: EitherT[F, L, Boolean])(ifTrue: => A, ifFalse: => A): EitherT[F, L, A]", "member" : "cats.Functor.ifF", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#ifF[A](fb:F[Boolean])(ifTrue:=>A,ifFalse:=>A):F[A]", "kind" : "def"}, {"label" : "unzip", "tail" : "(fab: EitherT[F, L, (A, B)]): (EitherT[F, L, A], EitherT[F, L, B])", "member" : "cats.Functor.unzip", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#unzip[A,B](fab:F[(A,B)]):(F[A],F[B])", "kind" : "def"}, {"label" : "tupleRight", "tail" : "(fa: EitherT[F, L, A], b: B): EitherT[F, L, (A, B)]", "member" : "cats.Functor.tupleRight", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "def"}, {"label" : "tupleLeft", "tail" : "(fa: EitherT[F, L, A], b: B): EitherT[F, L, (B, A)]", "member" : "cats.Functor.tupleLeft", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "def"}, {"label" : "as", "tail" : "(fa: EitherT[F, L, A], b: B): EitherT[F, L, B]", "member" : "cats.Functor.as", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(fa: EitherT[F, L, A])(f: (A) => B): EitherT[F, L, (A, B)]", "member" : "cats.Functor.fproduct", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "def"}, {"label" : "void", "tail" : "(fa: EitherT[F, L, A]): EitherT[F, L, Unit]", "member" : "cats.Functor.void", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#void[A](fa:F[A]):F[Unit]", "kind" : "def"}, {"label" : "lift", "tail" : "(f: (A) => B): (EitherT[F, L, A]) => EitherT[F, L, B]", "member" : "cats.Functor.lift", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "widen", "tail" : "(fa: EitherT[F, L, A]): EitherT[F, L, B]", "member" : "cats.Functor.widen", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: EitherT[F, L, A])(f: (A) => B): EitherT[F, L, B]", "member" : "cats.Functor.fmap", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: EitherT[F, L, A])(f: (A) => B)(g: (B) => A): EitherT[F, L, B]", "member" : "cats.Functor.imap", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]EitherT[F, L, G[α]]]", "member" : "cats.Invariant.composeFunctor", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#composeFunctor[G[_]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]EitherT[F, L, G[α]]]", "member" : "cats.Invariant.compose", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/control\/impl\/SelectiveEitherT.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/control\/impl\/SelectiveEitherT.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "tofu\/control\/impl\/SelectiveEitherT.html", "kind" : "class"}, {"name" : "tofu.control.impl.SelectiveOptionT", "shortDescription" : "", "members_class" : [{"label" : "pure", "tail" : "(x: A): OptionT[F, A]", "member" : "tofu.control.impl.SelectiveOptionT.pure", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#pure[A](x:A):cats.data.OptionT[F,A]", "kind" : "def"}, {"label" : "ap", "tail" : "(ff: OptionT[F, (A) => B])(fa: OptionT[F, A]): OptionT[F, B]", "member" : "tofu.control.impl.SelectiveOptionT.ap", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#ap[A,B](ff:cats.data.OptionT[F,A=>B])(fa:cats.data.OptionT[F,A]):cats.data.OptionT[F,B]", "kind" : "def"}, {"label" : "selectAp", "tail" : "(fe: OptionT[F, Either[A, B]])(ff: => OptionT[F, (A) => B]): OptionT[F, B]", "member" : "tofu.control.impl.SelectiveOptionT.selectAp", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#selectAp[A,B](fe:cats.data.OptionT[F,Either[A,B]])(ff:=>cats.data.OptionT[F,A=>B]):cats.data.OptionT[F,B]", "kind" : "def"}, {"member" : "tofu.control.impl.SelectiveOptionT#<init>", "error" : "unsupported entity"}, {"label" : "optionMonoid", "tail" : "(): Monoid[OptionT[F, Option[A]]]", "member" : "tofu.control.Selective.optionMonoid", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#optionMonoid[A]:cats.Monoid[F[Option[A]]]", "kind" : "def"}, {"label" : "unlesss_", "tail" : "(fb: OptionT[F, Boolean])(fa: => OptionT[F, A]): OptionT[F, Unit]", "member" : "tofu.control.Selective.unlesss_", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#unlesss_[A](fb:F[Boolean])(fa:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "whens_", "tail" : "(fb: OptionT[F, Boolean])(fa: => OptionT[F, A]): OptionT[F, Unit]", "member" : "tofu.control.Selective.whens_", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#whens_[A](fb:F[Boolean])(fa:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "unlesss", "tail" : "(fb: OptionT[F, Boolean])(fa: => OptionT[F, A]): OptionT[F, Option[A]]", "member" : "tofu.control.Selective.unlesss", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#unlesss[A](fb:F[Boolean])(fa:=>F[A]):F[Option[A]]", "kind" : "def"}, {"label" : "whens", "tail" : "(fb: OptionT[F, Boolean])(fa: => OptionT[F, A]): OptionT[F, Option[A]]", "member" : "tofu.control.Selective.whens", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#whens[A](fb:F[Boolean])(fa:=>F[A]):F[Option[A]]", "kind" : "def"}, {"label" : "orElses", "tail" : "(fx: OptionT[F, Option[A]])(fy: => OptionT[F, Option[A]]): OptionT[F, Option[A]]", "member" : "tofu.control.Selective.orElses", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#orElses[A](fx:F[Option[A]])(fy:=>F[Option[A]]):F[Option[A]]", "kind" : "def"}, {"label" : "selectRight", "tail" : "(fb: OptionT[F, A], fo: OptionT[F, Option[A]]): OptionT[F, A]", "member" : "tofu.control.Selective.selectRight", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#selectRight[A](fb:F[A],fo:F[Option[A]]):F[A]", "kind" : "def"}, {"label" : "select", "tail" : "(fo: OptionT[F, Option[A]])(fa: => OptionT[F, A]): OptionT[F, A]", "member" : "tofu.control.Selective.select", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#select[A](fo:F[Option[A]])(fa:=>F[A]):F[A]", "kind" : "def"}, {"label" : "whenA", "tail" : "(cond: Boolean)(f: => OptionT[F, A]): OptionT[F, Unit]", "member" : "cats.Applicative.whenA", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#whenA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "unlessA", "tail" : "(cond: Boolean)(f: => OptionT[F, A]): OptionT[F, Unit]", "member" : "cats.Applicative.unlessA", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#unlessA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "composeContravariantMonoidal", "tail" : "(arg0: ContravariantMonoidal[G]): ContravariantMonoidal[[α]OptionT[F, G[α]]]", "member" : "cats.Applicative.composeContravariantMonoidal", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#composeContravariantMonoidal[G[_]](implicitevidence$2:cats.ContravariantMonoidal[G]):cats.ContravariantMonoidal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Applicative[G]): Applicative[[α]OptionT[F, G[α]]]", "member" : "cats.Applicative.compose", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#compose[G[_]](implicitevidence$1:cats.Applicative[G]):cats.Applicative[[α]F[G[α]]]", "kind" : "def"}, {"label" : "replicateA", "tail" : "(n: Int, fa: OptionT[F, A]): OptionT[F, List[A]]", "member" : "cats.Applicative.replicateA", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#replicateA[A](n:Int,fa:F[A]):F[List[A]]", "kind" : "def"}, {"label" : "map", "tail" : "(fa: OptionT[F, A])(f: (A) => B): OptionT[F, B]", "member" : "cats.Applicative.map", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#map[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "def"}, {"label" : "unit", "tail" : "(): OptionT[F, Unit]", "member" : "cats.Applicative.unit", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#unit:F[Unit]", "kind" : "def"}, {"label" : "point", "tail" : "(a: A): OptionT[F, A]", "member" : "cats.InvariantMonoidal.point", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#point[A](a:A):F[A]", "kind" : "def"}, {"label" : "ifA", "tail" : "(fcond: OptionT[F, Boolean])(ifTrue: OptionT[F, A], ifFalse: OptionT[F, A]): OptionT[F, A]", "member" : "cats.Apply.ifA", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#ifA[A](fcond:F[Boolean])(ifTrue:F[A],ifFalse:F[A]):F[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Apply[G]): Apply[[α]OptionT[F, G[α]]]", "member" : "cats.Apply.compose", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#compose[G[_]](implicitevidence$1:cats.Apply[G]):cats.Apply[[α]F[G[α]]]", "kind" : "def"}, {"label" : "map2Eval", "tail" : "(fa: OptionT[F, A], fb: Eval[OptionT[F, B]])(f: (A, B) => Z): Eval[OptionT[F, Z]]", "member" : "cats.Apply.map2Eval", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#map2Eval[A,B,Z](fa:F[A],fb:cats.Eval[F[B]])(f:(A,B)=>Z):cats.Eval[F[Z]]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa: OptionT[F, A], fb: OptionT[F, B])(f: (A, B) => Z): OptionT[F, Z]", "member" : "cats.Apply.map2", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#map2[A,B,Z](fa:F[A],fb:F[B])(f:(A,B)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap2", "tail" : "(ff: OptionT[F, (A, B) => Z])(fa: OptionT[F, A], fb: OptionT[F, B]): OptionT[F, Z]", "member" : "cats.Apply.ap2", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#ap2[A,B,Z](ff:F[(A,B)=>Z])(fa:F[A],fb:F[B]):F[Z]", "kind" : "def"}, {"label" : "<*", "tail" : "(fa: OptionT[F, A])(fb: OptionT[F, B]): OptionT[F, A]", "member" : "cats.Apply.<*", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#<*[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(fa: OptionT[F, A])(fb: OptionT[F, B]): OptionT[F, B]", "member" : "cats.Apply.*>", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#*>[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(ff: OptionT[F, (A) => B])(fa: OptionT[F, A]): OptionT[F, B]", "member" : "cats.Apply.<*>", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#<*>[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "product", "tail" : "(fa: OptionT[F, A], fb: OptionT[F, B]): OptionT[F, (A, B)]", "member" : "cats.Apply.product", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#product[A,B](fa:F[A],fb:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "productL", "tail" : "(fa: OptionT[F, A])(fb: OptionT[F, B]): OptionT[F, A]", "member" : "cats.Apply.productL", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#productL[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "def"}, {"label" : "productR", "tail" : "(fa: OptionT[F, A])(fb: OptionT[F, B]): OptionT[F, B]", "member" : "cats.Apply.productR", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#productR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "def"}, {"label" : "tuple22", "tail" : "(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7], f8: OptionT[F, A8], f9: OptionT[F, A9], f10: OptionT[F, A10], f11: OptionT[F, A11], f12: OptionT[F, A12], f13: OptionT[F, A13], f14: OptionT[F, A14], f15: OptionT[F, A15], f16: OptionT[F, A16], f17: OptionT[F, A17], f18: OptionT[F, A18], f19: OptionT[F, A19], f20: OptionT[F, A20], f21: OptionT[F, A21]): OptionT[F, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.ApplyArityFunctions.tuple22", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#tuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "map22", "tail" : "(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7], f8: OptionT[F, A8], f9: OptionT[F, A9], f10: OptionT[F, A10], f11: OptionT[F, A11], f12: OptionT[F, A12], f13: OptionT[F, A13], f14: OptionT[F, A14], f15: OptionT[F, A15], f16: OptionT[F, A16], f17: OptionT[F, A17], f18: OptionT[F, A18], f19: OptionT[F, A19], f20: OptionT[F, A20], f21: OptionT[F, A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z): OptionT[F, Z]", "member" : "cats.ApplyArityFunctions.map22", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#map22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap22", "tail" : "(f: OptionT[F, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z])(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7], f8: OptionT[F, A8], f9: OptionT[F, A9], f10: OptionT[F, A10], f11: OptionT[F, A11], f12: OptionT[F, A12], f13: OptionT[F, A13], f14: OptionT[F, A14], f15: OptionT[F, A15], f16: OptionT[F, A16], f17: OptionT[F, A17], f18: OptionT[F, A18], f19: OptionT[F, A19], f20: OptionT[F, A20], f21: OptionT[F, A21]): OptionT[F, Z]", "member" : "cats.ApplyArityFunctions.ap22", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#ap22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[Z]", "kind" : "def"}, {"label" : "tuple21", "tail" : "(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7], f8: OptionT[F, A8], f9: OptionT[F, A9], f10: OptionT[F, A10], f11: OptionT[F, A11], f12: OptionT[F, A12], f13: OptionT[F, A13], f14: OptionT[F, A14], f15: OptionT[F, A15], f16: OptionT[F, A16], f17: OptionT[F, A17], f18: OptionT[F, A18], f19: OptionT[F, A19], f20: OptionT[F, A20]): OptionT[F, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.ApplyArityFunctions.tuple21", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#tuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "map21", "tail" : "(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7], f8: OptionT[F, A8], f9: OptionT[F, A9], f10: OptionT[F, A10], f11: OptionT[F, A11], f12: OptionT[F, A12], f13: OptionT[F, A13], f14: OptionT[F, A14], f15: OptionT[F, A15], f16: OptionT[F, A16], f17: OptionT[F, A17], f18: OptionT[F, A18], f19: OptionT[F, A19], f20: OptionT[F, A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z): OptionT[F, Z]", "member" : "cats.ApplyArityFunctions.map21", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#map21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap21", "tail" : "(f: OptionT[F, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z])(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7], f8: OptionT[F, A8], f9: OptionT[F, A9], f10: OptionT[F, A10], f11: OptionT[F, A11], f12: OptionT[F, A12], f13: OptionT[F, A13], f14: OptionT[F, A14], f15: OptionT[F, A15], f16: OptionT[F, A16], f17: OptionT[F, A17], f18: OptionT[F, A18], f19: OptionT[F, A19], f20: OptionT[F, A20]): OptionT[F, Z]", "member" : "cats.ApplyArityFunctions.ap21", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#ap21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[Z]", "kind" : "def"}, {"label" : "tuple20", "tail" : "(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7], f8: OptionT[F, A8], f9: OptionT[F, A9], f10: OptionT[F, A10], f11: OptionT[F, A11], f12: OptionT[F, A12], f13: OptionT[F, A13], f14: OptionT[F, A14], f15: OptionT[F, A15], f16: OptionT[F, A16], f17: OptionT[F, A17], f18: OptionT[F, A18], f19: OptionT[F, A19]): OptionT[F, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.ApplyArityFunctions.tuple20", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#tuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "map20", "tail" : "(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7], f8: OptionT[F, A8], f9: OptionT[F, A9], f10: OptionT[F, A10], f11: OptionT[F, A11], f12: OptionT[F, A12], f13: OptionT[F, A13], f14: OptionT[F, A14], f15: OptionT[F, A15], f16: OptionT[F, A16], f17: OptionT[F, A17], f18: OptionT[F, A18], f19: OptionT[F, A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z): OptionT[F, Z]", "member" : "cats.ApplyArityFunctions.map20", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#map20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap20", "tail" : "(f: OptionT[F, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z])(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7], f8: OptionT[F, A8], f9: OptionT[F, A9], f10: OptionT[F, A10], f11: OptionT[F, A11], f12: OptionT[F, A12], f13: OptionT[F, A13], f14: OptionT[F, A14], f15: OptionT[F, A15], f16: OptionT[F, A16], f17: OptionT[F, A17], f18: OptionT[F, A18], f19: OptionT[F, A19]): OptionT[F, Z]", "member" : "cats.ApplyArityFunctions.ap20", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#ap20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[Z]", "kind" : "def"}, {"label" : "tuple19", "tail" : "(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7], f8: OptionT[F, A8], f9: OptionT[F, A9], f10: OptionT[F, A10], f11: OptionT[F, A11], f12: OptionT[F, A12], f13: OptionT[F, A13], f14: OptionT[F, A14], f15: OptionT[F, A15], f16: OptionT[F, A16], f17: OptionT[F, A17], f18: OptionT[F, A18]): OptionT[F, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.ApplyArityFunctions.tuple19", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#tuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "map19", "tail" : "(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7], f8: OptionT[F, A8], f9: OptionT[F, A9], f10: OptionT[F, A10], f11: OptionT[F, A11], f12: OptionT[F, A12], f13: OptionT[F, A13], f14: OptionT[F, A14], f15: OptionT[F, A15], f16: OptionT[F, A16], f17: OptionT[F, A17], f18: OptionT[F, A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z): OptionT[F, Z]", "member" : "cats.ApplyArityFunctions.map19", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#map19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap19", "tail" : "(f: OptionT[F, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z])(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7], f8: OptionT[F, A8], f9: OptionT[F, A9], f10: OptionT[F, A10], f11: OptionT[F, A11], f12: OptionT[F, A12], f13: OptionT[F, A13], f14: OptionT[F, A14], f15: OptionT[F, A15], f16: OptionT[F, A16], f17: OptionT[F, A17], f18: OptionT[F, A18]): OptionT[F, Z]", "member" : "cats.ApplyArityFunctions.ap19", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#ap19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[Z]", "kind" : "def"}, {"label" : "tuple18", "tail" : "(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7], f8: OptionT[F, A8], f9: OptionT[F, A9], f10: OptionT[F, A10], f11: OptionT[F, A11], f12: OptionT[F, A12], f13: OptionT[F, A13], f14: OptionT[F, A14], f15: OptionT[F, A15], f16: OptionT[F, A16], f17: OptionT[F, A17]): OptionT[F, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.ApplyArityFunctions.tuple18", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#tuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "map18", "tail" : "(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7], f8: OptionT[F, A8], f9: OptionT[F, A9], f10: OptionT[F, A10], f11: OptionT[F, A11], f12: OptionT[F, A12], f13: OptionT[F, A13], f14: OptionT[F, A14], f15: OptionT[F, A15], f16: OptionT[F, A16], f17: OptionT[F, A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z): OptionT[F, Z]", "member" : "cats.ApplyArityFunctions.map18", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#map18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap18", "tail" : "(f: OptionT[F, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z])(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7], f8: OptionT[F, A8], f9: OptionT[F, A9], f10: OptionT[F, A10], f11: OptionT[F, A11], f12: OptionT[F, A12], f13: OptionT[F, A13], f14: OptionT[F, A14], f15: OptionT[F, A15], f16: OptionT[F, A16], f17: OptionT[F, A17]): OptionT[F, Z]", "member" : "cats.ApplyArityFunctions.ap18", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#ap18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[Z]", "kind" : "def"}, {"label" : "tuple17", "tail" : "(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7], f8: OptionT[F, A8], f9: OptionT[F, A9], f10: OptionT[F, A10], f11: OptionT[F, A11], f12: OptionT[F, A12], f13: OptionT[F, A13], f14: OptionT[F, A14], f15: OptionT[F, A15], f16: OptionT[F, A16]): OptionT[F, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.ApplyArityFunctions.tuple17", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#tuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "map17", "tail" : "(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7], f8: OptionT[F, A8], f9: OptionT[F, A9], f10: OptionT[F, A10], f11: OptionT[F, A11], f12: OptionT[F, A12], f13: OptionT[F, A13], f14: OptionT[F, A14], f15: OptionT[F, A15], f16: OptionT[F, A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z): OptionT[F, Z]", "member" : "cats.ApplyArityFunctions.map17", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#map17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap17", "tail" : "(f: OptionT[F, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z])(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7], f8: OptionT[F, A8], f9: OptionT[F, A9], f10: OptionT[F, A10], f11: OptionT[F, A11], f12: OptionT[F, A12], f13: OptionT[F, A13], f14: OptionT[F, A14], f15: OptionT[F, A15], f16: OptionT[F, A16]): OptionT[F, Z]", "member" : "cats.ApplyArityFunctions.ap17", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#ap17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[Z]", "kind" : "def"}, {"label" : "tuple16", "tail" : "(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7], f8: OptionT[F, A8], f9: OptionT[F, A9], f10: OptionT[F, A10], f11: OptionT[F, A11], f12: OptionT[F, A12], f13: OptionT[F, A13], f14: OptionT[F, A14], f15: OptionT[F, A15]): OptionT[F, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.ApplyArityFunctions.tuple16", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#tuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "map16", "tail" : "(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7], f8: OptionT[F, A8], f9: OptionT[F, A9], f10: OptionT[F, A10], f11: OptionT[F, A11], f12: OptionT[F, A12], f13: OptionT[F, A13], f14: OptionT[F, A14], f15: OptionT[F, A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z): OptionT[F, Z]", "member" : "cats.ApplyArityFunctions.map16", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#map16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap16", "tail" : "(f: OptionT[F, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z])(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7], f8: OptionT[F, A8], f9: OptionT[F, A9], f10: OptionT[F, A10], f11: OptionT[F, A11], f12: OptionT[F, A12], f13: OptionT[F, A13], f14: OptionT[F, A14], f15: OptionT[F, A15]): OptionT[F, Z]", "member" : "cats.ApplyArityFunctions.ap16", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#ap16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[Z]", "kind" : "def"}, {"label" : "tuple15", "tail" : "(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7], f8: OptionT[F, A8], f9: OptionT[F, A9], f10: OptionT[F, A10], f11: OptionT[F, A11], f12: OptionT[F, A12], f13: OptionT[F, A13], f14: OptionT[F, A14]): OptionT[F, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.ApplyArityFunctions.tuple15", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#tuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "map15", "tail" : "(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7], f8: OptionT[F, A8], f9: OptionT[F, A9], f10: OptionT[F, A10], f11: OptionT[F, A11], f12: OptionT[F, A12], f13: OptionT[F, A13], f14: OptionT[F, A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z): OptionT[F, Z]", "member" : "cats.ApplyArityFunctions.map15", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#map15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap15", "tail" : "(f: OptionT[F, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z])(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7], f8: OptionT[F, A8], f9: OptionT[F, A9], f10: OptionT[F, A10], f11: OptionT[F, A11], f12: OptionT[F, A12], f13: OptionT[F, A13], f14: OptionT[F, A14]): OptionT[F, Z]", "member" : "cats.ApplyArityFunctions.ap15", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#ap15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[Z]", "kind" : "def"}, {"label" : "tuple14", "tail" : "(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7], f8: OptionT[F, A8], f9: OptionT[F, A9], f10: OptionT[F, A10], f11: OptionT[F, A11], f12: OptionT[F, A12], f13: OptionT[F, A13]): OptionT[F, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.ApplyArityFunctions.tuple14", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#tuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "map14", "tail" : "(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7], f8: OptionT[F, A8], f9: OptionT[F, A9], f10: OptionT[F, A10], f11: OptionT[F, A11], f12: OptionT[F, A12], f13: OptionT[F, A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z): OptionT[F, Z]", "member" : "cats.ApplyArityFunctions.map14", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#map14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap14", "tail" : "(f: OptionT[F, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z])(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7], f8: OptionT[F, A8], f9: OptionT[F, A9], f10: OptionT[F, A10], f11: OptionT[F, A11], f12: OptionT[F, A12], f13: OptionT[F, A13]): OptionT[F, Z]", "member" : "cats.ApplyArityFunctions.ap14", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#ap14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[Z]", "kind" : "def"}, {"label" : "tuple13", "tail" : "(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7], f8: OptionT[F, A8], f9: OptionT[F, A9], f10: OptionT[F, A10], f11: OptionT[F, A11], f12: OptionT[F, A12]): OptionT[F, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.ApplyArityFunctions.tuple13", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#tuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "map13", "tail" : "(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7], f8: OptionT[F, A8], f9: OptionT[F, A9], f10: OptionT[F, A10], f11: OptionT[F, A11], f12: OptionT[F, A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z): OptionT[F, Z]", "member" : "cats.ApplyArityFunctions.map13", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#map13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap13", "tail" : "(f: OptionT[F, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z])(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7], f8: OptionT[F, A8], f9: OptionT[F, A9], f10: OptionT[F, A10], f11: OptionT[F, A11], f12: OptionT[F, A12]): OptionT[F, Z]", "member" : "cats.ApplyArityFunctions.ap13", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#ap13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[Z]", "kind" : "def"}, {"label" : "tuple12", "tail" : "(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7], f8: OptionT[F, A8], f9: OptionT[F, A9], f10: OptionT[F, A10], f11: OptionT[F, A11]): OptionT[F, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.ApplyArityFunctions.tuple12", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#tuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "map12", "tail" : "(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7], f8: OptionT[F, A8], f9: OptionT[F, A9], f10: OptionT[F, A10], f11: OptionT[F, A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z): OptionT[F, Z]", "member" : "cats.ApplyArityFunctions.map12", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#map12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap12", "tail" : "(f: OptionT[F, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z])(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7], f8: OptionT[F, A8], f9: OptionT[F, A9], f10: OptionT[F, A10], f11: OptionT[F, A11]): OptionT[F, Z]", "member" : "cats.ApplyArityFunctions.ap12", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#ap12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[Z]", "kind" : "def"}, {"label" : "tuple11", "tail" : "(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7], f8: OptionT[F, A8], f9: OptionT[F, A9], f10: OptionT[F, A10]): OptionT[F, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.ApplyArityFunctions.tuple11", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#tuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "map11", "tail" : "(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7], f8: OptionT[F, A8], f9: OptionT[F, A9], f10: OptionT[F, A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z): OptionT[F, Z]", "member" : "cats.ApplyArityFunctions.map11", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#map11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap11", "tail" : "(f: OptionT[F, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z])(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7], f8: OptionT[F, A8], f9: OptionT[F, A9], f10: OptionT[F, A10]): OptionT[F, Z]", "member" : "cats.ApplyArityFunctions.ap11", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#ap11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[Z]", "kind" : "def"}, {"label" : "tuple10", "tail" : "(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7], f8: OptionT[F, A8], f9: OptionT[F, A9]): OptionT[F, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.ApplyArityFunctions.tuple10", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#tuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "map10", "tail" : "(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7], f8: OptionT[F, A8], f9: OptionT[F, A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z): OptionT[F, Z]", "member" : "cats.ApplyArityFunctions.map10", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#map10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap10", "tail" : "(f: OptionT[F, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z])(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7], f8: OptionT[F, A8], f9: OptionT[F, A9]): OptionT[F, Z]", "member" : "cats.ApplyArityFunctions.ap10", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#ap10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[Z]", "kind" : "def"}, {"label" : "tuple9", "tail" : "(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7], f8: OptionT[F, A8]): OptionT[F, (A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.ApplyArityFunctions.tuple9", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#tuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "map9", "tail" : "(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7], f8: OptionT[F, A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z): OptionT[F, Z]", "member" : "cats.ApplyArityFunctions.map9", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#map9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap9", "tail" : "(f: OptionT[F, (A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z])(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7], f8: OptionT[F, A8]): OptionT[F, Z]", "member" : "cats.ApplyArityFunctions.ap9", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#ap9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[Z]", "kind" : "def"}, {"label" : "tuple8", "tail" : "(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7]): OptionT[F, (A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.ApplyArityFunctions.tuple8", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#tuple8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "map8", "tail" : "(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) => Z): OptionT[F, Z]", "member" : "cats.ApplyArityFunctions.map8", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#map8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap8", "tail" : "(f: OptionT[F, (A0, A1, A2, A3, A4, A5, A6, A7) => Z])(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6], f7: OptionT[F, A7]): OptionT[F, Z]", "member" : "cats.ApplyArityFunctions.ap8", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#ap8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[Z]", "kind" : "def"}, {"label" : "tuple7", "tail" : "(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6]): OptionT[F, (A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.ApplyArityFunctions.tuple7", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#tuple7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "map7", "tail" : "(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6])(f: (A0, A1, A2, A3, A4, A5, A6) => Z): OptionT[F, Z]", "member" : "cats.ApplyArityFunctions.map7", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#map7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap7", "tail" : "(f: OptionT[F, (A0, A1, A2, A3, A4, A5, A6) => Z])(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5], f6: OptionT[F, A6]): OptionT[F, Z]", "member" : "cats.ApplyArityFunctions.ap7", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#ap7[A0,A1,A2,A3,A4,A5,A6,Z](f:F[(A0,A1,A2,A3,A4,A5,A6)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[Z]", "kind" : "def"}, {"label" : "tuple6", "tail" : "(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5]): OptionT[F, (A0, A1, A2, A3, A4, A5)]", "member" : "cats.ApplyArityFunctions.tuple6", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#tuple6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[(A0,A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "map6", "tail" : "(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5])(f: (A0, A1, A2, A3, A4, A5) => Z): OptionT[F, Z]", "member" : "cats.ApplyArityFunctions.map6", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#map6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5])(f:(A0,A1,A2,A3,A4,A5)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap6", "tail" : "(f: OptionT[F, (A0, A1, A2, A3, A4, A5) => Z])(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4], f5: OptionT[F, A5]): OptionT[F, Z]", "member" : "cats.ApplyArityFunctions.ap6", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#ap6[A0,A1,A2,A3,A4,A5,Z](f:F[(A0,A1,A2,A3,A4,A5)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[Z]", "kind" : "def"}, {"label" : "tuple5", "tail" : "(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4]): OptionT[F, (A0, A1, A2, A3, A4)]", "member" : "cats.ApplyArityFunctions.tuple5", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#tuple5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[(A0,A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "map5", "tail" : "(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4])(f: (A0, A1, A2, A3, A4) => Z): OptionT[F, Z]", "member" : "cats.ApplyArityFunctions.map5", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#map5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4])(f:(A0,A1,A2,A3,A4)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap5", "tail" : "(f: OptionT[F, (A0, A1, A2, A3, A4) => Z])(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3], f4: OptionT[F, A4]): OptionT[F, Z]", "member" : "cats.ApplyArityFunctions.ap5", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#ap5[A0,A1,A2,A3,A4,Z](f:F[(A0,A1,A2,A3,A4)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[Z]", "kind" : "def"}, {"label" : "tuple4", "tail" : "(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3]): OptionT[F, (A0, A1, A2, A3)]", "member" : "cats.ApplyArityFunctions.tuple4", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#tuple4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[(A0,A1,A2,A3)]", "kind" : "def"}, {"label" : "map4", "tail" : "(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3])(f: (A0, A1, A2, A3) => Z): OptionT[F, Z]", "member" : "cats.ApplyArityFunctions.map4", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#map4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3])(f:(A0,A1,A2,A3)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap4", "tail" : "(f: OptionT[F, (A0, A1, A2, A3) => Z])(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2], f3: OptionT[F, A3]): OptionT[F, Z]", "member" : "cats.ApplyArityFunctions.ap4", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#ap4[A0,A1,A2,A3,Z](f:F[(A0,A1,A2,A3)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[Z]", "kind" : "def"}, {"label" : "tuple3", "tail" : "(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2]): OptionT[F, (A0, A1, A2)]", "member" : "cats.ApplyArityFunctions.tuple3", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#tuple3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2]):F[(A0,A1,A2)]", "kind" : "def"}, {"label" : "map3", "tail" : "(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2])(f: (A0, A1, A2) => Z): OptionT[F, Z]", "member" : "cats.ApplyArityFunctions.map3", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#map3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2])(f:(A0,A1,A2)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap3", "tail" : "(f: OptionT[F, (A0, A1, A2) => Z])(f0: OptionT[F, A0], f1: OptionT[F, A1], f2: OptionT[F, A2]): OptionT[F, Z]", "member" : "cats.ApplyArityFunctions.ap3", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#ap3[A0,A1,A2,Z](f:F[(A0,A1,A2)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2]):F[Z]", "kind" : "def"}, {"label" : "tuple2", "tail" : "(f1: OptionT[F, A], f2: OptionT[F, B]): OptionT[F, (A, B)]", "member" : "cats.ApplyArityFunctions.tuple2", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#tuple2[A,B](f1:F[A],f2:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "composeApply", "tail" : "(arg0: Apply[G]): InvariantSemigroupal[[α]OptionT[F, G[α]]]", "member" : "cats.InvariantSemigroupal.composeApply", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#composeApply[G[_]](implicitevidence$1:cats.Apply[G]):cats.InvariantSemigroupal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Contravariant[[α]OptionT[F, G[α]]]", "member" : "cats.Functor.composeContravariant", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#composeContravariant[G[_]](implicitevidence$2:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Functor[G]): Functor[[α]OptionT[F, G[α]]]", "member" : "cats.Functor.compose", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#compose[G[_]](implicitevidence$1:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "def"}, {"label" : "ifF", "tail" : "(fb: OptionT[F, Boolean])(ifTrue: => A, ifFalse: => A): OptionT[F, A]", "member" : "cats.Functor.ifF", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#ifF[A](fb:F[Boolean])(ifTrue:=>A,ifFalse:=>A):F[A]", "kind" : "def"}, {"label" : "unzip", "tail" : "(fab: OptionT[F, (A, B)]): (OptionT[F, A], OptionT[F, B])", "member" : "cats.Functor.unzip", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#unzip[A,B](fab:F[(A,B)]):(F[A],F[B])", "kind" : "def"}, {"label" : "tupleRight", "tail" : "(fa: OptionT[F, A], b: B): OptionT[F, (A, B)]", "member" : "cats.Functor.tupleRight", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "def"}, {"label" : "tupleLeft", "tail" : "(fa: OptionT[F, A], b: B): OptionT[F, (B, A)]", "member" : "cats.Functor.tupleLeft", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "def"}, {"label" : "as", "tail" : "(fa: OptionT[F, A], b: B): OptionT[F, B]", "member" : "cats.Functor.as", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(fa: OptionT[F, A])(f: (A) => B): OptionT[F, (A, B)]", "member" : "cats.Functor.fproduct", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "def"}, {"label" : "void", "tail" : "(fa: OptionT[F, A]): OptionT[F, Unit]", "member" : "cats.Functor.void", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#void[A](fa:F[A]):F[Unit]", "kind" : "def"}, {"label" : "lift", "tail" : "(f: (A) => B): (OptionT[F, A]) => OptionT[F, B]", "member" : "cats.Functor.lift", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "widen", "tail" : "(fa: OptionT[F, A]): OptionT[F, B]", "member" : "cats.Functor.widen", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: OptionT[F, A])(f: (A) => B): OptionT[F, B]", "member" : "cats.Functor.fmap", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: OptionT[F, A])(f: (A) => B)(g: (B) => A): OptionT[F, B]", "member" : "cats.Functor.imap", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]OptionT[F, G[α]]]", "member" : "cats.Invariant.composeFunctor", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#composeFunctor[G[_]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]OptionT[F, G[α]]]", "member" : "cats.Invariant.compose", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/control\/impl\/SelectiveOptionT.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/control\/impl\/SelectiveOptionT.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "tofu\/control\/impl\/SelectiveOptionT.html", "kind" : "class"}, {"name" : "tofu.control.impl.SelectiveOverMonad", "shortDescription" : "", "members_class" : [{"label" : "unlesss_", "tail" : "(fb: F[Boolean])(fa: => F[A]): F[Unit]", "member" : "tofu.control.impl.SelectiveOverMonad.unlesss_", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#unlesss_[A](fb:F[Boolean])(fa:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "whens_", "tail" : "(fb: F[Boolean])(fa: => F[A]): F[Unit]", "member" : "tofu.control.impl.SelectiveOverMonad.whens_", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#whens_[A](fb:F[Boolean])(fa:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "unlesss", "tail" : "(fb: F[Boolean])(fa: => F[A]): F[Option[A]]", "member" : "tofu.control.impl.SelectiveOverMonad.unlesss", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#unlesss[A](fb:F[Boolean])(fa:=>F[A]):F[Option[A]]", "kind" : "def"}, {"label" : "whens", "tail" : "(fb: F[Boolean])(fa: => F[A]): F[Option[A]]", "member" : "tofu.control.impl.SelectiveOverMonad.whens", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#whens[A](fb:F[Boolean])(fa:=>F[A]):F[Option[A]]", "kind" : "def"}, {"label" : "select", "tail" : "(fo: F[Option[A]])(fa: => F[A]): F[A]", "member" : "tofu.control.impl.SelectiveOverMonad.select", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#select[A](fo:F[Option[A]])(fa:=>F[A]):F[A]", "kind" : "def"}, {"label" : "selectAp", "tail" : "(fe: F[Either[A, B]])(ff: => F[(A) => B]): F[B]", "member" : "tofu.control.impl.SelectiveOverMonad.selectAp", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#selectAp[A,B](fe:F[Either[A,B]])(ff:=>F[A=>B]):F[B]", "kind" : "def"}, {"member" : "tofu.control.impl.SelectiveOverMonad#<init>", "error" : "unsupported entity"}, {"label" : "F", "tail" : ": Monad[F]", "member" : "tofu.control.impl.SelectiveOverMonad.F", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#F:cats.Monad[F]", "kind" : "implicit val"}, {"label" : "point", "tail" : "(a: A): F[A]", "member" : "tofu.control.impl.ApplicativeDelegate.point", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#point[A](a:A):F[A]", "kind" : "final def"}, {"label" : "whenA", "tail" : "(cond: Boolean)(f: => F[A]): F[Unit]", "member" : "tofu.control.impl.ApplicativeDelegate.whenA", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#whenA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "final def"}, {"label" : "unlessA", "tail" : "(cond: Boolean)(f: => F[A]): F[Unit]", "member" : "tofu.control.impl.ApplicativeDelegate.unlessA", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#unlessA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "final def"}, {"label" : "composeContravariantMonoidal", "tail" : "(arg0: ContravariantMonoidal[G]): ContravariantMonoidal[[α]F[G[α]]]", "member" : "tofu.control.impl.ApplicativeDelegate.composeContravariantMonoidal", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#composeContravariantMonoidal[G[_]](implicitevidence$2:cats.ContravariantMonoidal[G]):cats.ContravariantMonoidal[[α]F[G[α]]]", "kind" : "final def"}, {"label" : "compose", "tail" : "(arg0: Applicative[G]): Applicative[[α]F[G[α]]]", "member" : "tofu.control.impl.ApplicativeDelegate.compose", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#compose[G[_]](implicitevidence$1:cats.Applicative[G]):cats.Applicative[[α]F[G[α]]]", "kind" : "final def"}, {"label" : "replicateA", "tail" : "(n: Int, fa: F[A]): F[List[A]]", "member" : "tofu.control.impl.ApplicativeDelegate.replicateA", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#replicateA[A](n:Int,fa:F[A]):F[List[A]]", "kind" : "final def"}, {"label" : "unit", "tail" : "(): F[Unit]", "member" : "tofu.control.impl.ApplicativeDelegate.unit", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#unit:F[Unit]", "kind" : "final def"}, {"label" : "pure", "tail" : "(x: A): F[A]", "member" : "tofu.control.impl.ApplicativeDelegate.pure", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#pure[A](x:A):F[A]", "kind" : "final def"}, {"label" : "tuple22", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20], f21: F[A21]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "tofu.control.impl.ApplyDelegate.tuple22", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#tuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "final def"}, {"label" : "map22", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20], f21: F[A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map22", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#map22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap22", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20], f21: F[A21]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap22", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#ap22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[Z]", "kind" : "final def"}, {"label" : "tuple21", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "tofu.control.impl.ApplyDelegate.tuple21", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#tuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "final def"}, {"label" : "map21", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map21", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#map21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap21", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap21", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#ap21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[Z]", "kind" : "final def"}, {"label" : "tuple20", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "tofu.control.impl.ApplyDelegate.tuple20", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#tuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "final def"}, {"label" : "map20", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map20", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#map20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap20", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap20", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#ap20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[Z]", "kind" : "final def"}, {"label" : "tuple19", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "tofu.control.impl.ApplyDelegate.tuple19", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#tuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "final def"}, {"label" : "map19", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map19", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#map19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap19", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap19", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#ap19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[Z]", "kind" : "final def"}, {"label" : "tuple18", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "tofu.control.impl.ApplyDelegate.tuple18", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#tuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "final def"}, {"label" : "map18", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map18", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#map18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap18", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap18", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#ap18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[Z]", "kind" : "final def"}, {"label" : "tuple17", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "tofu.control.impl.ApplyDelegate.tuple17", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#tuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "final def"}, {"label" : "map17", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map17", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#map17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap17", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap17", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#ap17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[Z]", "kind" : "final def"}, {"label" : "tuple16", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "tofu.control.impl.ApplyDelegate.tuple16", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#tuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "final def"}, {"label" : "map16", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map16", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#map16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap16", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap16", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#ap16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[Z]", "kind" : "final def"}, {"label" : "tuple15", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "tofu.control.impl.ApplyDelegate.tuple15", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#tuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "final def"}, {"label" : "map15", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map15", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#map15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap15", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap15", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#ap15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[Z]", "kind" : "final def"}, {"label" : "tuple14", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "tofu.control.impl.ApplyDelegate.tuple14", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#tuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "final def"}, {"label" : "map14", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map14", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#map14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap14", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap14", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#ap14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[Z]", "kind" : "final def"}, {"label" : "tuple13", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "tofu.control.impl.ApplyDelegate.tuple13", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#tuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "final def"}, {"label" : "map13", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map13", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#map13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap13", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap13", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#ap13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[Z]", "kind" : "final def"}, {"label" : "tuple12", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "tofu.control.impl.ApplyDelegate.tuple12", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#tuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "final def"}, {"label" : "map12", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map12", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#map12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap12", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap12", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#ap12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[Z]", "kind" : "final def"}, {"label" : "tuple11", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "tofu.control.impl.ApplyDelegate.tuple11", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#tuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "final def"}, {"label" : "map11", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map11", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#map11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap11", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap11", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#ap11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[Z]", "kind" : "final def"}, {"label" : "tuple10", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "tofu.control.impl.ApplyDelegate.tuple10", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#tuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "final def"}, {"label" : "map10", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map10", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#map10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap10", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap10", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#ap10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[Z]", "kind" : "final def"}, {"label" : "tuple9", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "tofu.control.impl.ApplyDelegate.tuple9", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#tuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "final def"}, {"label" : "map9", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map9", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#map9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap9", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap9", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#ap9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[Z]", "kind" : "final def"}, {"label" : "tuple8", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7]): F[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "tofu.control.impl.ApplyDelegate.tuple8", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#tuple8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "final def"}, {"label" : "map8", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map8", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#map8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap8", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap8", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#ap8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[Z]", "kind" : "final def"}, {"label" : "tuple7", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6]): F[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "tofu.control.impl.ApplyDelegate.tuple7", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#tuple7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "final def"}, {"label" : "map7", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6])(f: (A0, A1, A2, A3, A4, A5, A6) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map7", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#map7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap7", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap7", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#ap7[A0,A1,A2,A3,A4,A5,A6,Z](f:F[(A0,A1,A2,A3,A4,A5,A6)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[Z]", "kind" : "final def"}, {"label" : "tuple6", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5]): F[(A0, A1, A2, A3, A4, A5)]", "member" : "tofu.control.impl.ApplyDelegate.tuple6", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#tuple6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[(A0,A1,A2,A3,A4,A5)]", "kind" : "final def"}, {"label" : "map6", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5])(f: (A0, A1, A2, A3, A4, A5) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map6", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#map6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5])(f:(A0,A1,A2,A3,A4,A5)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap6", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap6", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#ap6[A0,A1,A2,A3,A4,A5,Z](f:F[(A0,A1,A2,A3,A4,A5)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[Z]", "kind" : "final def"}, {"label" : "tuple5", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4]): F[(A0, A1, A2, A3, A4)]", "member" : "tofu.control.impl.ApplyDelegate.tuple5", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#tuple5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[(A0,A1,A2,A3,A4)]", "kind" : "final def"}, {"label" : "map5", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4])(f: (A0, A1, A2, A3, A4) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map5", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#map5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4])(f:(A0,A1,A2,A3,A4)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap5", "tail" : "(f: F[(A0, A1, A2, A3, A4) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap5", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#ap5[A0,A1,A2,A3,A4,Z](f:F[(A0,A1,A2,A3,A4)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[Z]", "kind" : "final def"}, {"label" : "tuple4", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3]): F[(A0, A1, A2, A3)]", "member" : "tofu.control.impl.ApplyDelegate.tuple4", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#tuple4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[(A0,A1,A2,A3)]", "kind" : "final def"}, {"label" : "map4", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3])(f: (A0, A1, A2, A3) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map4", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#map4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3])(f:(A0,A1,A2,A3)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap4", "tail" : "(f: F[(A0, A1, A2, A3) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap4", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#ap4[A0,A1,A2,A3,Z](f:F[(A0,A1,A2,A3)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[Z]", "kind" : "final def"}, {"label" : "tuple3", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2]): F[(A0, A1, A2)]", "member" : "tofu.control.impl.ApplyDelegate.tuple3", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#tuple3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2]):F[(A0,A1,A2)]", "kind" : "final def"}, {"label" : "map3", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2])(f: (A0, A1, A2) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map3", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#map3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2])(f:(A0,A1,A2)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap3", "tail" : "(f: F[(A0, A1, A2) => Z])(f0: F[A0], f1: F[A1], f2: F[A2]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap3", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#ap3[A0,A1,A2,Z](f:F[(A0,A1,A2)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2]):F[Z]", "kind" : "final def"}, {"label" : "tuple2", "tail" : "(f1: F[A], f2: F[B]): F[(A, B)]", "member" : "tofu.control.impl.ApplyDelegate.tuple2", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#tuple2[A,B](f1:F[A],f2:F[B]):F[(A,B)]", "kind" : "final def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]F[G[α]]]", "member" : "tofu.control.impl.ApplyDelegate.composeFunctor", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#composeFunctor[G[_]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "final def"}, {"label" : "composeApply", "tail" : "(G: Apply[G]): InvariantSemigroupal[[α]F[G[α]]]", "member" : "tofu.control.impl.ApplyDelegate.composeApply", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#composeApply[G[_]](implicitG:cats.Apply[G]):cats.InvariantSemigroupal[[α]F[G[α]]]", "kind" : "final def"}, {"label" : "map2Eval", "tail" : "(fa: F[A], fb: Eval[F[B]])(f: (A, B) => Z): Eval[F[Z]]", "member" : "tofu.control.impl.ApplyDelegate.map2Eval", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#map2Eval[A,B,Z](fa:F[A],fb:cats.Eval[F[B]])(f:(A,B)=>Z):cats.Eval[F[Z]]", "kind" : "final def"}, {"label" : "map2", "tail" : "(fa: F[A], fb: F[B])(f: (A, B) => Z): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.map2", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#map2[A,B,Z](fa:F[A],fb:F[B])(f:(A,B)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap2", "tail" : "(ff: F[(A, B) => Z])(fa: F[A], fb: F[B]): F[Z]", "member" : "tofu.control.impl.ApplyDelegate.ap2", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#ap2[A,B,Z](ff:F[(A,B)=>Z])(fa:F[A],fb:F[B]):F[Z]", "kind" : "final def"}, {"label" : "product", "tail" : "(fa: F[A], fb: F[B]): F[(A, B)]", "member" : "tofu.control.impl.ApplyDelegate.product", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#product[A,B](fa:F[A],fb:F[B]):F[(A,B)]", "kind" : "final def"}, {"label" : "productL", "tail" : "(fa: F[A])(fb: F[B]): F[A]", "member" : "tofu.control.impl.ApplyDelegate.productL", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#productL[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "productR", "tail" : "(fa: F[A])(fb: F[B]): F[B]", "member" : "tofu.control.impl.ApplyDelegate.productR", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#productR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: F[A])(f: (A) => B)(g: (B) => A): F[B]", "member" : "tofu.control.impl.ApplyDelegate.imap", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "final def"}, {"label" : "ap", "tail" : "(ff: F[(A) => B])(fa: F[A]): F[B]", "member" : "tofu.control.impl.ApplyDelegate.ap", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#ap[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "composeContravariant", "tail" : "(G: Contravariant[G]): Contravariant[[α]F[G[α]]]", "member" : "tofu.control.impl.FunctorDelegate.composeContravariant", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#composeContravariant[G[_]](implicitG:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "final def"}, {"label" : "compose", "tail" : "(G: Functor[G]): Functor[[α]F[G[α]]]", "member" : "tofu.control.impl.FunctorDelegate.compose", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#compose[G[_]](implicitG:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "final def"}, {"label" : "tupleRight", "tail" : "(fa: F[A], b: B): F[(A, B)]", "member" : "tofu.control.impl.FunctorDelegate.tupleRight", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "final def"}, {"label" : "tupleLeft", "tail" : "(fa: F[A], b: B): F[(B, A)]", "member" : "tofu.control.impl.FunctorDelegate.tupleLeft", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "final def"}, {"label" : "as", "tail" : "(fa: F[A], b: B): F[B]", "member" : "tofu.control.impl.FunctorDelegate.as", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "final def"}, {"label" : "fproduct", "tail" : "(fa: F[A])(f: (A) => B): F[(A, B)]", "member" : "tofu.control.impl.FunctorDelegate.fproduct", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "final def"}, {"label" : "void", "tail" : "(fa: F[A]): F[Unit]", "member" : "tofu.control.impl.FunctorDelegate.void", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#void[A](fa:F[A]):F[Unit]", "kind" : "final def"}, {"label" : "lift", "tail" : "(f: (A) => B): (F[A]) => F[B]", "member" : "tofu.control.impl.FunctorDelegate.lift", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "final def"}, {"label" : "widen", "tail" : "(fa: F[A]): F[B]", "member" : "tofu.control.impl.FunctorDelegate.widen", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(fa: F[A])(f: (A) => B): F[B]", "member" : "tofu.control.impl.FunctorDelegate.map", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#map[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "optionMonoid", "tail" : "(): Monoid[F[Option[A]]]", "member" : "tofu.control.Selective.optionMonoid", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#optionMonoid[A]:cats.Monoid[F[Option[A]]]", "kind" : "def"}, {"label" : "orElses", "tail" : "(fx: F[Option[A]])(fy: => F[Option[A]]): F[Option[A]]", "member" : "tofu.control.Selective.orElses", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#orElses[A](fx:F[Option[A]])(fy:=>F[Option[A]]):F[Option[A]]", "kind" : "def"}, {"label" : "selectRight", "tail" : "(fb: F[A], fo: F[Option[A]]): F[A]", "member" : "tofu.control.Selective.selectRight", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#selectRight[A](fb:F[A],fo:F[Option[A]]):F[A]", "kind" : "def"}, {"label" : "ifA", "tail" : "(fcond: F[Boolean])(ifTrue: F[A], ifFalse: F[A]): F[A]", "member" : "cats.Apply.ifA", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#ifA[A](fcond:F[Boolean])(ifTrue:F[A],ifFalse:F[A]):F[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Apply[G]): Apply[[α]F[G[α]]]", "member" : "cats.Apply.compose", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#compose[G[_]](implicitevidence$1:cats.Apply[G]):cats.Apply[[α]F[G[α]]]", "kind" : "def"}, {"label" : "<*", "tail" : "(fa: F[A])(fb: F[B]): F[A]", "member" : "cats.Apply.<*", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#<*[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(fa: F[A])(fb: F[B]): F[B]", "member" : "cats.Apply.*>", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#*>[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(ff: F[(A) => B])(fa: F[A]): F[B]", "member" : "cats.Apply.<*>", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#<*>[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "ifF", "tail" : "(fb: F[Boolean])(ifTrue: => A, ifFalse: => A): F[A]", "member" : "cats.Functor.ifF", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#ifF[A](fb:F[Boolean])(ifTrue:=>A,ifFalse:=>A):F[A]", "kind" : "def"}, {"label" : "unzip", "tail" : "(fab: F[(A, B)]): (F[A], F[B])", "member" : "cats.Functor.unzip", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#unzip[A,B](fab:F[(A,B)]):(F[A],F[B])", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: F[A])(f: (A) => B): F[B]", "member" : "cats.Functor.fmap", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]F[G[α]]]", "member" : "cats.Invariant.compose", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/control\/impl\/SelectiveOverMonad.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "tofu\/control\/impl\/SelectiveOverMonad.html", "kind" : "class"}, {"name" : "tofu.control.impl.SelectiveReaderT", "shortDescription" : "", "members_class" : [{"label" : "selectAp", "tail" : "(fe: ReaderT[F, R, Either[A, B]])(ff: => ReaderT[F, R, (A) => B]): ReaderT[F, R, B]", "member" : "tofu.control.impl.SelectiveReaderT.selectAp", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#selectAp[A,B](fe:cats.data.ReaderT[F,R,Either[A,B]])(ff:=>cats.data.ReaderT[F,R,A=>B]):cats.data.ReaderT[F,R,B]", "kind" : "def"}, {"label" : "F", "tail" : ": Applicative[[γ$4$]Kleisli[F, R, γ$4$]]", "member" : "tofu.control.impl.SelectiveReaderT.F", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#F:cats.Applicative[[γ$4$]cats.data.Kleisli[F,R,γ$4$]]", "kind" : "val"}, {"member" : "tofu.control.impl.SelectiveReaderT#<init>", "error" : "unsupported entity"}, {"label" : "point", "tail" : "(a: A): Kleisli[F, R, A]", "member" : "tofu.control.impl.ApplicativeDelegate.point", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#point[A](a:A):F[A]", "kind" : "final def"}, {"label" : "whenA", "tail" : "(cond: Boolean)(f: => Kleisli[F, R, A]): Kleisli[F, R, Unit]", "member" : "tofu.control.impl.ApplicativeDelegate.whenA", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#whenA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "final def"}, {"label" : "unlessA", "tail" : "(cond: Boolean)(f: => Kleisli[F, R, A]): Kleisli[F, R, Unit]", "member" : "tofu.control.impl.ApplicativeDelegate.unlessA", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#unlessA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "final def"}, {"label" : "composeContravariantMonoidal", "tail" : "(arg0: ContravariantMonoidal[G]): ContravariantMonoidal[[α]Kleisli[F, R, G[α]]]", "member" : "tofu.control.impl.ApplicativeDelegate.composeContravariantMonoidal", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#composeContravariantMonoidal[G[_]](implicitevidence$2:cats.ContravariantMonoidal[G]):cats.ContravariantMonoidal[[α]F[G[α]]]", "kind" : "final def"}, {"label" : "compose", "tail" : "(arg0: Applicative[G]): Applicative[[α]Kleisli[F, R, G[α]]]", "member" : "tofu.control.impl.ApplicativeDelegate.compose", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#compose[G[_]](implicitevidence$1:cats.Applicative[G]):cats.Applicative[[α]F[G[α]]]", "kind" : "final def"}, {"label" : "replicateA", "tail" : "(n: Int, fa: Kleisli[F, R, A]): Kleisli[F, R, List[A]]", "member" : "tofu.control.impl.ApplicativeDelegate.replicateA", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#replicateA[A](n:Int,fa:F[A]):F[List[A]]", "kind" : "final def"}, {"label" : "unit", "tail" : "(): Kleisli[F, R, Unit]", "member" : "tofu.control.impl.ApplicativeDelegate.unit", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#unit:F[Unit]", "kind" : "final def"}, {"label" : "pure", "tail" : "(x: A): Kleisli[F, R, A]", "member" : "tofu.control.impl.ApplicativeDelegate.pure", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#pure[A](x:A):F[A]", "kind" : "final def"}, {"label" : "tuple22", "tail" : "(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7], f8: Kleisli[F, R, A8], f9: Kleisli[F, R, A9], f10: Kleisli[F, R, A10], f11: Kleisli[F, R, A11], f12: Kleisli[F, R, A12], f13: Kleisli[F, R, A13], f14: Kleisli[F, R, A14], f15: Kleisli[F, R, A15], f16: Kleisli[F, R, A16], f17: Kleisli[F, R, A17], f18: Kleisli[F, R, A18], f19: Kleisli[F, R, A19], f20: Kleisli[F, R, A20], f21: Kleisli[F, R, A21]): Kleisli[F, R, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "tofu.control.impl.ApplyDelegate.tuple22", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#tuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "final def"}, {"label" : "map22", "tail" : "(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7], f8: Kleisli[F, R, A8], f9: Kleisli[F, R, A9], f10: Kleisli[F, R, A10], f11: Kleisli[F, R, A11], f12: Kleisli[F, R, A12], f13: Kleisli[F, R, A13], f14: Kleisli[F, R, A14], f15: Kleisli[F, R, A15], f16: Kleisli[F, R, A16], f17: Kleisli[F, R, A17], f18: Kleisli[F, R, A18], f19: Kleisli[F, R, A19], f20: Kleisli[F, R, A20], f21: Kleisli[F, R, A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z): Kleisli[F, R, Z]", "member" : "tofu.control.impl.ApplyDelegate.map22", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#map22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap22", "tail" : "(f: Kleisli[F, R, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z])(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7], f8: Kleisli[F, R, A8], f9: Kleisli[F, R, A9], f10: Kleisli[F, R, A10], f11: Kleisli[F, R, A11], f12: Kleisli[F, R, A12], f13: Kleisli[F, R, A13], f14: Kleisli[F, R, A14], f15: Kleisli[F, R, A15], f16: Kleisli[F, R, A16], f17: Kleisli[F, R, A17], f18: Kleisli[F, R, A18], f19: Kleisli[F, R, A19], f20: Kleisli[F, R, A20], f21: Kleisli[F, R, A21]): Kleisli[F, R, Z]", "member" : "tofu.control.impl.ApplyDelegate.ap22", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#ap22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[Z]", "kind" : "final def"}, {"label" : "tuple21", "tail" : "(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7], f8: Kleisli[F, R, A8], f9: Kleisli[F, R, A9], f10: Kleisli[F, R, A10], f11: Kleisli[F, R, A11], f12: Kleisli[F, R, A12], f13: Kleisli[F, R, A13], f14: Kleisli[F, R, A14], f15: Kleisli[F, R, A15], f16: Kleisli[F, R, A16], f17: Kleisli[F, R, A17], f18: Kleisli[F, R, A18], f19: Kleisli[F, R, A19], f20: Kleisli[F, R, A20]): Kleisli[F, R, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "tofu.control.impl.ApplyDelegate.tuple21", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#tuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "final def"}, {"label" : "map21", "tail" : "(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7], f8: Kleisli[F, R, A8], f9: Kleisli[F, R, A9], f10: Kleisli[F, R, A10], f11: Kleisli[F, R, A11], f12: Kleisli[F, R, A12], f13: Kleisli[F, R, A13], f14: Kleisli[F, R, A14], f15: Kleisli[F, R, A15], f16: Kleisli[F, R, A16], f17: Kleisli[F, R, A17], f18: Kleisli[F, R, A18], f19: Kleisli[F, R, A19], f20: Kleisli[F, R, A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z): Kleisli[F, R, Z]", "member" : "tofu.control.impl.ApplyDelegate.map21", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#map21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap21", "tail" : "(f: Kleisli[F, R, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z])(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7], f8: Kleisli[F, R, A8], f9: Kleisli[F, R, A9], f10: Kleisli[F, R, A10], f11: Kleisli[F, R, A11], f12: Kleisli[F, R, A12], f13: Kleisli[F, R, A13], f14: Kleisli[F, R, A14], f15: Kleisli[F, R, A15], f16: Kleisli[F, R, A16], f17: Kleisli[F, R, A17], f18: Kleisli[F, R, A18], f19: Kleisli[F, R, A19], f20: Kleisli[F, R, A20]): Kleisli[F, R, Z]", "member" : "tofu.control.impl.ApplyDelegate.ap21", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#ap21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[Z]", "kind" : "final def"}, {"label" : "tuple20", "tail" : "(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7], f8: Kleisli[F, R, A8], f9: Kleisli[F, R, A9], f10: Kleisli[F, R, A10], f11: Kleisli[F, R, A11], f12: Kleisli[F, R, A12], f13: Kleisli[F, R, A13], f14: Kleisli[F, R, A14], f15: Kleisli[F, R, A15], f16: Kleisli[F, R, A16], f17: Kleisli[F, R, A17], f18: Kleisli[F, R, A18], f19: Kleisli[F, R, A19]): Kleisli[F, R, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "tofu.control.impl.ApplyDelegate.tuple20", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#tuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "final def"}, {"label" : "map20", "tail" : "(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7], f8: Kleisli[F, R, A8], f9: Kleisli[F, R, A9], f10: Kleisli[F, R, A10], f11: Kleisli[F, R, A11], f12: Kleisli[F, R, A12], f13: Kleisli[F, R, A13], f14: Kleisli[F, R, A14], f15: Kleisli[F, R, A15], f16: Kleisli[F, R, A16], f17: Kleisli[F, R, A17], f18: Kleisli[F, R, A18], f19: Kleisli[F, R, A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z): Kleisli[F, R, Z]", "member" : "tofu.control.impl.ApplyDelegate.map20", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#map20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap20", "tail" : "(f: Kleisli[F, R, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z])(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7], f8: Kleisli[F, R, A8], f9: Kleisli[F, R, A9], f10: Kleisli[F, R, A10], f11: Kleisli[F, R, A11], f12: Kleisli[F, R, A12], f13: Kleisli[F, R, A13], f14: Kleisli[F, R, A14], f15: Kleisli[F, R, A15], f16: Kleisli[F, R, A16], f17: Kleisli[F, R, A17], f18: Kleisli[F, R, A18], f19: Kleisli[F, R, A19]): Kleisli[F, R, Z]", "member" : "tofu.control.impl.ApplyDelegate.ap20", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#ap20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[Z]", "kind" : "final def"}, {"label" : "tuple19", "tail" : "(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7], f8: Kleisli[F, R, A8], f9: Kleisli[F, R, A9], f10: Kleisli[F, R, A10], f11: Kleisli[F, R, A11], f12: Kleisli[F, R, A12], f13: Kleisli[F, R, A13], f14: Kleisli[F, R, A14], f15: Kleisli[F, R, A15], f16: Kleisli[F, R, A16], f17: Kleisli[F, R, A17], f18: Kleisli[F, R, A18]): Kleisli[F, R, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "tofu.control.impl.ApplyDelegate.tuple19", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#tuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "final def"}, {"label" : "map19", "tail" : "(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7], f8: Kleisli[F, R, A8], f9: Kleisli[F, R, A9], f10: Kleisli[F, R, A10], f11: Kleisli[F, R, A11], f12: Kleisli[F, R, A12], f13: Kleisli[F, R, A13], f14: Kleisli[F, R, A14], f15: Kleisli[F, R, A15], f16: Kleisli[F, R, A16], f17: Kleisli[F, R, A17], f18: Kleisli[F, R, A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z): Kleisli[F, R, Z]", "member" : "tofu.control.impl.ApplyDelegate.map19", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#map19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap19", "tail" : "(f: Kleisli[F, R, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z])(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7], f8: Kleisli[F, R, A8], f9: Kleisli[F, R, A9], f10: Kleisli[F, R, A10], f11: Kleisli[F, R, A11], f12: Kleisli[F, R, A12], f13: Kleisli[F, R, A13], f14: Kleisli[F, R, A14], f15: Kleisli[F, R, A15], f16: Kleisli[F, R, A16], f17: Kleisli[F, R, A17], f18: Kleisli[F, R, A18]): Kleisli[F, R, Z]", "member" : "tofu.control.impl.ApplyDelegate.ap19", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#ap19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[Z]", "kind" : "final def"}, {"label" : "tuple18", "tail" : "(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7], f8: Kleisli[F, R, A8], f9: Kleisli[F, R, A9], f10: Kleisli[F, R, A10], f11: Kleisli[F, R, A11], f12: Kleisli[F, R, A12], f13: Kleisli[F, R, A13], f14: Kleisli[F, R, A14], f15: Kleisli[F, R, A15], f16: Kleisli[F, R, A16], f17: Kleisli[F, R, A17]): Kleisli[F, R, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "tofu.control.impl.ApplyDelegate.tuple18", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#tuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "final def"}, {"label" : "map18", "tail" : "(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7], f8: Kleisli[F, R, A8], f9: Kleisli[F, R, A9], f10: Kleisli[F, R, A10], f11: Kleisli[F, R, A11], f12: Kleisli[F, R, A12], f13: Kleisli[F, R, A13], f14: Kleisli[F, R, A14], f15: Kleisli[F, R, A15], f16: Kleisli[F, R, A16], f17: Kleisli[F, R, A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z): Kleisli[F, R, Z]", "member" : "tofu.control.impl.ApplyDelegate.map18", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#map18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap18", "tail" : "(f: Kleisli[F, R, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z])(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7], f8: Kleisli[F, R, A8], f9: Kleisli[F, R, A9], f10: Kleisli[F, R, A10], f11: Kleisli[F, R, A11], f12: Kleisli[F, R, A12], f13: Kleisli[F, R, A13], f14: Kleisli[F, R, A14], f15: Kleisli[F, R, A15], f16: Kleisli[F, R, A16], f17: Kleisli[F, R, A17]): Kleisli[F, R, Z]", "member" : "tofu.control.impl.ApplyDelegate.ap18", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#ap18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[Z]", "kind" : "final def"}, {"label" : "tuple17", "tail" : "(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7], f8: Kleisli[F, R, A8], f9: Kleisli[F, R, A9], f10: Kleisli[F, R, A10], f11: Kleisli[F, R, A11], f12: Kleisli[F, R, A12], f13: Kleisli[F, R, A13], f14: Kleisli[F, R, A14], f15: Kleisli[F, R, A15], f16: Kleisli[F, R, A16]): Kleisli[F, R, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "tofu.control.impl.ApplyDelegate.tuple17", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#tuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "final def"}, {"label" : "map17", "tail" : "(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7], f8: Kleisli[F, R, A8], f9: Kleisli[F, R, A9], f10: Kleisli[F, R, A10], f11: Kleisli[F, R, A11], f12: Kleisli[F, R, A12], f13: Kleisli[F, R, A13], f14: Kleisli[F, R, A14], f15: Kleisli[F, R, A15], f16: Kleisli[F, R, A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z): Kleisli[F, R, Z]", "member" : "tofu.control.impl.ApplyDelegate.map17", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#map17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap17", "tail" : "(f: Kleisli[F, R, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z])(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7], f8: Kleisli[F, R, A8], f9: Kleisli[F, R, A9], f10: Kleisli[F, R, A10], f11: Kleisli[F, R, A11], f12: Kleisli[F, R, A12], f13: Kleisli[F, R, A13], f14: Kleisli[F, R, A14], f15: Kleisli[F, R, A15], f16: Kleisli[F, R, A16]): Kleisli[F, R, Z]", "member" : "tofu.control.impl.ApplyDelegate.ap17", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#ap17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[Z]", "kind" : "final def"}, {"label" : "tuple16", "tail" : "(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7], f8: Kleisli[F, R, A8], f9: Kleisli[F, R, A9], f10: Kleisli[F, R, A10], f11: Kleisli[F, R, A11], f12: Kleisli[F, R, A12], f13: Kleisli[F, R, A13], f14: Kleisli[F, R, A14], f15: Kleisli[F, R, A15]): Kleisli[F, R, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "tofu.control.impl.ApplyDelegate.tuple16", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#tuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "final def"}, {"label" : "map16", "tail" : "(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7], f8: Kleisli[F, R, A8], f9: Kleisli[F, R, A9], f10: Kleisli[F, R, A10], f11: Kleisli[F, R, A11], f12: Kleisli[F, R, A12], f13: Kleisli[F, R, A13], f14: Kleisli[F, R, A14], f15: Kleisli[F, R, A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z): Kleisli[F, R, Z]", "member" : "tofu.control.impl.ApplyDelegate.map16", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#map16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap16", "tail" : "(f: Kleisli[F, R, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z])(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7], f8: Kleisli[F, R, A8], f9: Kleisli[F, R, A9], f10: Kleisli[F, R, A10], f11: Kleisli[F, R, A11], f12: Kleisli[F, R, A12], f13: Kleisli[F, R, A13], f14: Kleisli[F, R, A14], f15: Kleisli[F, R, A15]): Kleisli[F, R, Z]", "member" : "tofu.control.impl.ApplyDelegate.ap16", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#ap16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[Z]", "kind" : "final def"}, {"label" : "tuple15", "tail" : "(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7], f8: Kleisli[F, R, A8], f9: Kleisli[F, R, A9], f10: Kleisli[F, R, A10], f11: Kleisli[F, R, A11], f12: Kleisli[F, R, A12], f13: Kleisli[F, R, A13], f14: Kleisli[F, R, A14]): Kleisli[F, R, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "tofu.control.impl.ApplyDelegate.tuple15", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#tuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "final def"}, {"label" : "map15", "tail" : "(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7], f8: Kleisli[F, R, A8], f9: Kleisli[F, R, A9], f10: Kleisli[F, R, A10], f11: Kleisli[F, R, A11], f12: Kleisli[F, R, A12], f13: Kleisli[F, R, A13], f14: Kleisli[F, R, A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z): Kleisli[F, R, Z]", "member" : "tofu.control.impl.ApplyDelegate.map15", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#map15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap15", "tail" : "(f: Kleisli[F, R, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z])(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7], f8: Kleisli[F, R, A8], f9: Kleisli[F, R, A9], f10: Kleisli[F, R, A10], f11: Kleisli[F, R, A11], f12: Kleisli[F, R, A12], f13: Kleisli[F, R, A13], f14: Kleisli[F, R, A14]): Kleisli[F, R, Z]", "member" : "tofu.control.impl.ApplyDelegate.ap15", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#ap15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[Z]", "kind" : "final def"}, {"label" : "tuple14", "tail" : "(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7], f8: Kleisli[F, R, A8], f9: Kleisli[F, R, A9], f10: Kleisli[F, R, A10], f11: Kleisli[F, R, A11], f12: Kleisli[F, R, A12], f13: Kleisli[F, R, A13]): Kleisli[F, R, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "tofu.control.impl.ApplyDelegate.tuple14", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#tuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "final def"}, {"label" : "map14", "tail" : "(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7], f8: Kleisli[F, R, A8], f9: Kleisli[F, R, A9], f10: Kleisli[F, R, A10], f11: Kleisli[F, R, A11], f12: Kleisli[F, R, A12], f13: Kleisli[F, R, A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z): Kleisli[F, R, Z]", "member" : "tofu.control.impl.ApplyDelegate.map14", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#map14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap14", "tail" : "(f: Kleisli[F, R, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z])(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7], f8: Kleisli[F, R, A8], f9: Kleisli[F, R, A9], f10: Kleisli[F, R, A10], f11: Kleisli[F, R, A11], f12: Kleisli[F, R, A12], f13: Kleisli[F, R, A13]): Kleisli[F, R, Z]", "member" : "tofu.control.impl.ApplyDelegate.ap14", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#ap14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[Z]", "kind" : "final def"}, {"label" : "tuple13", "tail" : "(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7], f8: Kleisli[F, R, A8], f9: Kleisli[F, R, A9], f10: Kleisli[F, R, A10], f11: Kleisli[F, R, A11], f12: Kleisli[F, R, A12]): Kleisli[F, R, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "tofu.control.impl.ApplyDelegate.tuple13", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#tuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "final def"}, {"label" : "map13", "tail" : "(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7], f8: Kleisli[F, R, A8], f9: Kleisli[F, R, A9], f10: Kleisli[F, R, A10], f11: Kleisli[F, R, A11], f12: Kleisli[F, R, A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z): Kleisli[F, R, Z]", "member" : "tofu.control.impl.ApplyDelegate.map13", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#map13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap13", "tail" : "(f: Kleisli[F, R, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z])(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7], f8: Kleisli[F, R, A8], f9: Kleisli[F, R, A9], f10: Kleisli[F, R, A10], f11: Kleisli[F, R, A11], f12: Kleisli[F, R, A12]): Kleisli[F, R, Z]", "member" : "tofu.control.impl.ApplyDelegate.ap13", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#ap13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[Z]", "kind" : "final def"}, {"label" : "tuple12", "tail" : "(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7], f8: Kleisli[F, R, A8], f9: Kleisli[F, R, A9], f10: Kleisli[F, R, A10], f11: Kleisli[F, R, A11]): Kleisli[F, R, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "tofu.control.impl.ApplyDelegate.tuple12", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#tuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "final def"}, {"label" : "map12", "tail" : "(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7], f8: Kleisli[F, R, A8], f9: Kleisli[F, R, A9], f10: Kleisli[F, R, A10], f11: Kleisli[F, R, A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z): Kleisli[F, R, Z]", "member" : "tofu.control.impl.ApplyDelegate.map12", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#map12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap12", "tail" : "(f: Kleisli[F, R, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z])(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7], f8: Kleisli[F, R, A8], f9: Kleisli[F, R, A9], f10: Kleisli[F, R, A10], f11: Kleisli[F, R, A11]): Kleisli[F, R, Z]", "member" : "tofu.control.impl.ApplyDelegate.ap12", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#ap12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[Z]", "kind" : "final def"}, {"label" : "tuple11", "tail" : "(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7], f8: Kleisli[F, R, A8], f9: Kleisli[F, R, A9], f10: Kleisli[F, R, A10]): Kleisli[F, R, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "tofu.control.impl.ApplyDelegate.tuple11", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#tuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "final def"}, {"label" : "map11", "tail" : "(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7], f8: Kleisli[F, R, A8], f9: Kleisli[F, R, A9], f10: Kleisli[F, R, A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z): Kleisli[F, R, Z]", "member" : "tofu.control.impl.ApplyDelegate.map11", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#map11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap11", "tail" : "(f: Kleisli[F, R, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z])(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7], f8: Kleisli[F, R, A8], f9: Kleisli[F, R, A9], f10: Kleisli[F, R, A10]): Kleisli[F, R, Z]", "member" : "tofu.control.impl.ApplyDelegate.ap11", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#ap11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[Z]", "kind" : "final def"}, {"label" : "tuple10", "tail" : "(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7], f8: Kleisli[F, R, A8], f9: Kleisli[F, R, A9]): Kleisli[F, R, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "tofu.control.impl.ApplyDelegate.tuple10", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#tuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "final def"}, {"label" : "map10", "tail" : "(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7], f8: Kleisli[F, R, A8], f9: Kleisli[F, R, A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z): Kleisli[F, R, Z]", "member" : "tofu.control.impl.ApplyDelegate.map10", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#map10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap10", "tail" : "(f: Kleisli[F, R, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z])(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7], f8: Kleisli[F, R, A8], f9: Kleisli[F, R, A9]): Kleisli[F, R, Z]", "member" : "tofu.control.impl.ApplyDelegate.ap10", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#ap10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[Z]", "kind" : "final def"}, {"label" : "tuple9", "tail" : "(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7], f8: Kleisli[F, R, A8]): Kleisli[F, R, (A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "tofu.control.impl.ApplyDelegate.tuple9", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#tuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "final def"}, {"label" : "map9", "tail" : "(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7], f8: Kleisli[F, R, A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z): Kleisli[F, R, Z]", "member" : "tofu.control.impl.ApplyDelegate.map9", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#map9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap9", "tail" : "(f: Kleisli[F, R, (A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z])(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7], f8: Kleisli[F, R, A8]): Kleisli[F, R, Z]", "member" : "tofu.control.impl.ApplyDelegate.ap9", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#ap9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[Z]", "kind" : "final def"}, {"label" : "tuple8", "tail" : "(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7]): Kleisli[F, R, (A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "tofu.control.impl.ApplyDelegate.tuple8", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#tuple8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "final def"}, {"label" : "map8", "tail" : "(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) => Z): Kleisli[F, R, Z]", "member" : "tofu.control.impl.ApplyDelegate.map8", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#map8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap8", "tail" : "(f: Kleisli[F, R, (A0, A1, A2, A3, A4, A5, A6, A7) => Z])(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6], f7: Kleisli[F, R, A7]): Kleisli[F, R, Z]", "member" : "tofu.control.impl.ApplyDelegate.ap8", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#ap8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[Z]", "kind" : "final def"}, {"label" : "tuple7", "tail" : "(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6]): Kleisli[F, R, (A0, A1, A2, A3, A4, A5, A6)]", "member" : "tofu.control.impl.ApplyDelegate.tuple7", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#tuple7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "final def"}, {"label" : "map7", "tail" : "(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6])(f: (A0, A1, A2, A3, A4, A5, A6) => Z): Kleisli[F, R, Z]", "member" : "tofu.control.impl.ApplyDelegate.map7", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#map7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap7", "tail" : "(f: Kleisli[F, R, (A0, A1, A2, A3, A4, A5, A6) => Z])(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5], f6: Kleisli[F, R, A6]): Kleisli[F, R, Z]", "member" : "tofu.control.impl.ApplyDelegate.ap7", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#ap7[A0,A1,A2,A3,A4,A5,A6,Z](f:F[(A0,A1,A2,A3,A4,A5,A6)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[Z]", "kind" : "final def"}, {"label" : "tuple6", "tail" : "(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5]): Kleisli[F, R, (A0, A1, A2, A3, A4, A5)]", "member" : "tofu.control.impl.ApplyDelegate.tuple6", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#tuple6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[(A0,A1,A2,A3,A4,A5)]", "kind" : "final def"}, {"label" : "map6", "tail" : "(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5])(f: (A0, A1, A2, A3, A4, A5) => Z): Kleisli[F, R, Z]", "member" : "tofu.control.impl.ApplyDelegate.map6", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#map6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5])(f:(A0,A1,A2,A3,A4,A5)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap6", "tail" : "(f: Kleisli[F, R, (A0, A1, A2, A3, A4, A5) => Z])(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4], f5: Kleisli[F, R, A5]): Kleisli[F, R, Z]", "member" : "tofu.control.impl.ApplyDelegate.ap6", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#ap6[A0,A1,A2,A3,A4,A5,Z](f:F[(A0,A1,A2,A3,A4,A5)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[Z]", "kind" : "final def"}, {"label" : "tuple5", "tail" : "(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4]): Kleisli[F, R, (A0, A1, A2, A3, A4)]", "member" : "tofu.control.impl.ApplyDelegate.tuple5", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#tuple5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[(A0,A1,A2,A3,A4)]", "kind" : "final def"}, {"label" : "map5", "tail" : "(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4])(f: (A0, A1, A2, A3, A4) => Z): Kleisli[F, R, Z]", "member" : "tofu.control.impl.ApplyDelegate.map5", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#map5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4])(f:(A0,A1,A2,A3,A4)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap5", "tail" : "(f: Kleisli[F, R, (A0, A1, A2, A3, A4) => Z])(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3], f4: Kleisli[F, R, A4]): Kleisli[F, R, Z]", "member" : "tofu.control.impl.ApplyDelegate.ap5", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#ap5[A0,A1,A2,A3,A4,Z](f:F[(A0,A1,A2,A3,A4)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[Z]", "kind" : "final def"}, {"label" : "tuple4", "tail" : "(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3]): Kleisli[F, R, (A0, A1, A2, A3)]", "member" : "tofu.control.impl.ApplyDelegate.tuple4", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#tuple4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[(A0,A1,A2,A3)]", "kind" : "final def"}, {"label" : "map4", "tail" : "(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3])(f: (A0, A1, A2, A3) => Z): Kleisli[F, R, Z]", "member" : "tofu.control.impl.ApplyDelegate.map4", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#map4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3])(f:(A0,A1,A2,A3)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap4", "tail" : "(f: Kleisli[F, R, (A0, A1, A2, A3) => Z])(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2], f3: Kleisli[F, R, A3]): Kleisli[F, R, Z]", "member" : "tofu.control.impl.ApplyDelegate.ap4", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#ap4[A0,A1,A2,A3,Z](f:F[(A0,A1,A2,A3)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[Z]", "kind" : "final def"}, {"label" : "tuple3", "tail" : "(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2]): Kleisli[F, R, (A0, A1, A2)]", "member" : "tofu.control.impl.ApplyDelegate.tuple3", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#tuple3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2]):F[(A0,A1,A2)]", "kind" : "final def"}, {"label" : "map3", "tail" : "(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2])(f: (A0, A1, A2) => Z): Kleisli[F, R, Z]", "member" : "tofu.control.impl.ApplyDelegate.map3", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#map3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2])(f:(A0,A1,A2)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap3", "tail" : "(f: Kleisli[F, R, (A0, A1, A2) => Z])(f0: Kleisli[F, R, A0], f1: Kleisli[F, R, A1], f2: Kleisli[F, R, A2]): Kleisli[F, R, Z]", "member" : "tofu.control.impl.ApplyDelegate.ap3", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#ap3[A0,A1,A2,Z](f:F[(A0,A1,A2)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2]):F[Z]", "kind" : "final def"}, {"label" : "tuple2", "tail" : "(f1: Kleisli[F, R, A], f2: Kleisli[F, R, B]): Kleisli[F, R, (A, B)]", "member" : "tofu.control.impl.ApplyDelegate.tuple2", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#tuple2[A,B](f1:F[A],f2:F[B]):F[(A,B)]", "kind" : "final def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]Kleisli[F, R, G[α]]]", "member" : "tofu.control.impl.ApplyDelegate.composeFunctor", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#composeFunctor[G[_]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "final def"}, {"label" : "composeApply", "tail" : "(G: Apply[G]): InvariantSemigroupal[[α]Kleisli[F, R, G[α]]]", "member" : "tofu.control.impl.ApplyDelegate.composeApply", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#composeApply[G[_]](implicitG:cats.Apply[G]):cats.InvariantSemigroupal[[α]F[G[α]]]", "kind" : "final def"}, {"label" : "map2Eval", "tail" : "(fa: Kleisli[F, R, A], fb: Eval[Kleisli[F, R, B]])(f: (A, B) => Z): Eval[Kleisli[F, R, Z]]", "member" : "tofu.control.impl.ApplyDelegate.map2Eval", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#map2Eval[A,B,Z](fa:F[A],fb:cats.Eval[F[B]])(f:(A,B)=>Z):cats.Eval[F[Z]]", "kind" : "final def"}, {"label" : "map2", "tail" : "(fa: Kleisli[F, R, A], fb: Kleisli[F, R, B])(f: (A, B) => Z): Kleisli[F, R, Z]", "member" : "tofu.control.impl.ApplyDelegate.map2", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#map2[A,B,Z](fa:F[A],fb:F[B])(f:(A,B)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap2", "tail" : "(ff: Kleisli[F, R, (A, B) => Z])(fa: Kleisli[F, R, A], fb: Kleisli[F, R, B]): Kleisli[F, R, Z]", "member" : "tofu.control.impl.ApplyDelegate.ap2", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#ap2[A,B,Z](ff:F[(A,B)=>Z])(fa:F[A],fb:F[B]):F[Z]", "kind" : "final def"}, {"label" : "product", "tail" : "(fa: Kleisli[F, R, A], fb: Kleisli[F, R, B]): Kleisli[F, R, (A, B)]", "member" : "tofu.control.impl.ApplyDelegate.product", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#product[A,B](fa:F[A],fb:F[B]):F[(A,B)]", "kind" : "final def"}, {"label" : "productL", "tail" : "(fa: Kleisli[F, R, A])(fb: Kleisli[F, R, B]): Kleisli[F, R, A]", "member" : "tofu.control.impl.ApplyDelegate.productL", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#productL[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "productR", "tail" : "(fa: Kleisli[F, R, A])(fb: Kleisli[F, R, B]): Kleisli[F, R, B]", "member" : "tofu.control.impl.ApplyDelegate.productR", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#productR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: Kleisli[F, R, A])(f: (A) => B)(g: (B) => A): Kleisli[F, R, B]", "member" : "tofu.control.impl.ApplyDelegate.imap", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "final def"}, {"label" : "ap", "tail" : "(ff: Kleisli[F, R, (A) => B])(fa: Kleisli[F, R, A]): Kleisli[F, R, B]", "member" : "tofu.control.impl.ApplyDelegate.ap", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#ap[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "composeContravariant", "tail" : "(G: Contravariant[G]): Contravariant[[α]Kleisli[F, R, G[α]]]", "member" : "tofu.control.impl.FunctorDelegate.composeContravariant", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#composeContravariant[G[_]](implicitG:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "final def"}, {"label" : "compose", "tail" : "(G: Functor[G]): Functor[[α]Kleisli[F, R, G[α]]]", "member" : "tofu.control.impl.FunctorDelegate.compose", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#compose[G[_]](implicitG:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "final def"}, {"label" : "tupleRight", "tail" : "(fa: Kleisli[F, R, A], b: B): Kleisli[F, R, (A, B)]", "member" : "tofu.control.impl.FunctorDelegate.tupleRight", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "final def"}, {"label" : "tupleLeft", "tail" : "(fa: Kleisli[F, R, A], b: B): Kleisli[F, R, (B, A)]", "member" : "tofu.control.impl.FunctorDelegate.tupleLeft", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "final def"}, {"label" : "as", "tail" : "(fa: Kleisli[F, R, A], b: B): Kleisli[F, R, B]", "member" : "tofu.control.impl.FunctorDelegate.as", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "final def"}, {"label" : "fproduct", "tail" : "(fa: Kleisli[F, R, A])(f: (A) => B): Kleisli[F, R, (A, B)]", "member" : "tofu.control.impl.FunctorDelegate.fproduct", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "final def"}, {"label" : "void", "tail" : "(fa: Kleisli[F, R, A]): Kleisli[F, R, Unit]", "member" : "tofu.control.impl.FunctorDelegate.void", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#void[A](fa:F[A]):F[Unit]", "kind" : "final def"}, {"label" : "lift", "tail" : "(f: (A) => B): (Kleisli[F, R, A]) => Kleisli[F, R, B]", "member" : "tofu.control.impl.FunctorDelegate.lift", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "final def"}, {"label" : "widen", "tail" : "(fa: Kleisli[F, R, A]): Kleisli[F, R, B]", "member" : "tofu.control.impl.FunctorDelegate.widen", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(fa: Kleisli[F, R, A])(f: (A) => B): Kleisli[F, R, B]", "member" : "tofu.control.impl.FunctorDelegate.map", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#map[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "optionMonoid", "tail" : "(): Monoid[Kleisli[F, R, Option[A]]]", "member" : "tofu.control.Selective.optionMonoid", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#optionMonoid[A]:cats.Monoid[F[Option[A]]]", "kind" : "def"}, {"label" : "unlesss_", "tail" : "(fb: Kleisli[F, R, Boolean])(fa: => Kleisli[F, R, A]): Kleisli[F, R, Unit]", "member" : "tofu.control.Selective.unlesss_", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#unlesss_[A](fb:F[Boolean])(fa:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "whens_", "tail" : "(fb: Kleisli[F, R, Boolean])(fa: => Kleisli[F, R, A]): Kleisli[F, R, Unit]", "member" : "tofu.control.Selective.whens_", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#whens_[A](fb:F[Boolean])(fa:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "unlesss", "tail" : "(fb: Kleisli[F, R, Boolean])(fa: => Kleisli[F, R, A]): Kleisli[F, R, Option[A]]", "member" : "tofu.control.Selective.unlesss", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#unlesss[A](fb:F[Boolean])(fa:=>F[A]):F[Option[A]]", "kind" : "def"}, {"label" : "whens", "tail" : "(fb: Kleisli[F, R, Boolean])(fa: => Kleisli[F, R, A]): Kleisli[F, R, Option[A]]", "member" : "tofu.control.Selective.whens", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#whens[A](fb:F[Boolean])(fa:=>F[A]):F[Option[A]]", "kind" : "def"}, {"label" : "orElses", "tail" : "(fx: Kleisli[F, R, Option[A]])(fy: => Kleisli[F, R, Option[A]]): Kleisli[F, R, Option[A]]", "member" : "tofu.control.Selective.orElses", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#orElses[A](fx:F[Option[A]])(fy:=>F[Option[A]]):F[Option[A]]", "kind" : "def"}, {"label" : "selectRight", "tail" : "(fb: Kleisli[F, R, A], fo: Kleisli[F, R, Option[A]]): Kleisli[F, R, A]", "member" : "tofu.control.Selective.selectRight", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#selectRight[A](fb:F[A],fo:F[Option[A]]):F[A]", "kind" : "def"}, {"label" : "select", "tail" : "(fo: Kleisli[F, R, Option[A]])(fa: => Kleisli[F, R, A]): Kleisli[F, R, A]", "member" : "tofu.control.Selective.select", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#select[A](fo:F[Option[A]])(fa:=>F[A]):F[A]", "kind" : "def"}, {"label" : "ifA", "tail" : "(fcond: Kleisli[F, R, Boolean])(ifTrue: Kleisli[F, R, A], ifFalse: Kleisli[F, R, A]): Kleisli[F, R, A]", "member" : "cats.Apply.ifA", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#ifA[A](fcond:F[Boolean])(ifTrue:F[A],ifFalse:F[A]):F[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Apply[G]): Apply[[α]Kleisli[F, R, G[α]]]", "member" : "cats.Apply.compose", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#compose[G[_]](implicitevidence$1:cats.Apply[G]):cats.Apply[[α]F[G[α]]]", "kind" : "def"}, {"label" : "<*", "tail" : "(fa: Kleisli[F, R, A])(fb: Kleisli[F, R, B]): Kleisli[F, R, A]", "member" : "cats.Apply.<*", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#<*[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(fa: Kleisli[F, R, A])(fb: Kleisli[F, R, B]): Kleisli[F, R, B]", "member" : "cats.Apply.*>", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#*>[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(ff: Kleisli[F, R, (A) => B])(fa: Kleisli[F, R, A]): Kleisli[F, R, B]", "member" : "cats.Apply.<*>", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#<*>[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "ifF", "tail" : "(fb: Kleisli[F, R, Boolean])(ifTrue: => A, ifFalse: => A): Kleisli[F, R, A]", "member" : "cats.Functor.ifF", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#ifF[A](fb:F[Boolean])(ifTrue:=>A,ifFalse:=>A):F[A]", "kind" : "def"}, {"label" : "unzip", "tail" : "(fab: Kleisli[F, R, (A, B)]): (Kleisli[F, R, A], Kleisli[F, R, B])", "member" : "cats.Functor.unzip", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#unzip[A,B](fab:F[(A,B)]):(F[A],F[B])", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: Kleisli[F, R, A])(f: (A) => B): Kleisli[F, R, B]", "member" : "cats.Functor.fmap", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]Kleisli[F, R, G[α]]]", "member" : "cats.Invariant.compose", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/control\/impl\/SelectiveReaderT.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/control\/impl\/SelectiveReaderT.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "tofu\/control\/impl\/SelectiveReaderT.html", "kind" : "class"}, {"name" : "tofu.control.impl.SelectiveWithMap", "trait" : "tofu\/control\/impl\/SelectiveWithMap.html", "kind" : "trait", "members_trait" : [{"label" : "map", "tail" : "(fa: F[A])(f: (A) => B): F[B]", "member" : "tofu.control.impl.SelectiveWithMap.map", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#map[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "def"}, {"label" : "ap", "tail" : "(ff: F[(A) => B])(fa: F[A]): F[B]", "member" : "tofu.control.impl.SelectiveWithMap.ap", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#ap[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "def"}, {"label" : "optionMonoid", "tail" : "(): Monoid[F[Option[A]]]", "member" : "tofu.control.Selective.optionMonoid", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#optionMonoid[A]:cats.Monoid[F[Option[A]]]", "kind" : "def"}, {"label" : "unlesss_", "tail" : "(fb: F[Boolean])(fa: => F[A]): F[Unit]", "member" : "tofu.control.Selective.unlesss_", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#unlesss_[A](fb:F[Boolean])(fa:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "whens_", "tail" : "(fb: F[Boolean])(fa: => F[A]): F[Unit]", "member" : "tofu.control.Selective.whens_", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#whens_[A](fb:F[Boolean])(fa:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "unlesss", "tail" : "(fb: F[Boolean])(fa: => F[A]): F[Option[A]]", "member" : "tofu.control.Selective.unlesss", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#unlesss[A](fb:F[Boolean])(fa:=>F[A]):F[Option[A]]", "kind" : "def"}, {"label" : "whens", "tail" : "(fb: F[Boolean])(fa: => F[A]): F[Option[A]]", "member" : "tofu.control.Selective.whens", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#whens[A](fb:F[Boolean])(fa:=>F[A]):F[Option[A]]", "kind" : "def"}, {"label" : "orElses", "tail" : "(fx: F[Option[A]])(fy: => F[Option[A]]): F[Option[A]]", "member" : "tofu.control.Selective.orElses", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#orElses[A](fx:F[Option[A]])(fy:=>F[Option[A]]):F[Option[A]]", "kind" : "def"}, {"label" : "selectRight", "tail" : "(fb: F[A], fo: F[Option[A]]): F[A]", "member" : "tofu.control.Selective.selectRight", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#selectRight[A](fb:F[A],fo:F[Option[A]]):F[A]", "kind" : "def"}, {"label" : "select", "tail" : "(fo: F[Option[A]])(fa: => F[A]): F[A]", "member" : "tofu.control.Selective.select", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#select[A](fo:F[Option[A]])(fa:=>F[A]):F[A]", "kind" : "def"}, {"label" : "whenA", "tail" : "(cond: Boolean)(f: => F[A]): F[Unit]", "member" : "cats.Applicative.whenA", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#whenA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "unlessA", "tail" : "(cond: Boolean)(f: => F[A]): F[Unit]", "member" : "cats.Applicative.unlessA", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#unlessA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "composeContravariantMonoidal", "tail" : "(arg0: ContravariantMonoidal[G]): ContravariantMonoidal[[α]F[G[α]]]", "member" : "cats.Applicative.composeContravariantMonoidal", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#composeContravariantMonoidal[G[_]](implicitevidence$2:cats.ContravariantMonoidal[G]):cats.ContravariantMonoidal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Applicative[G]): Applicative[[α]F[G[α]]]", "member" : "cats.Applicative.compose", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#compose[G[_]](implicitevidence$1:cats.Applicative[G]):cats.Applicative[[α]F[G[α]]]", "kind" : "def"}, {"label" : "replicateA", "tail" : "(n: Int, fa: F[A]): F[List[A]]", "member" : "cats.Applicative.replicateA", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#replicateA[A](n:Int,fa:F[A]):F[List[A]]", "kind" : "def"}, {"label" : "unit", "tail" : "(): F[Unit]", "member" : "cats.Applicative.unit", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#unit:F[Unit]", "kind" : "def"}, {"label" : "point", "tail" : "(a: A): F[A]", "member" : "cats.InvariantMonoidal.point", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#point[A](a:A):F[A]", "kind" : "def"}, {"label" : "ifA", "tail" : "(fcond: F[Boolean])(ifTrue: F[A], ifFalse: F[A]): F[A]", "member" : "cats.Apply.ifA", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#ifA[A](fcond:F[Boolean])(ifTrue:F[A],ifFalse:F[A]):F[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Apply[G]): Apply[[α]F[G[α]]]", "member" : "cats.Apply.compose", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#compose[G[_]](implicitevidence$1:cats.Apply[G]):cats.Apply[[α]F[G[α]]]", "kind" : "def"}, {"label" : "map2Eval", "tail" : "(fa: F[A], fb: Eval[F[B]])(f: (A, B) => Z): Eval[F[Z]]", "member" : "cats.Apply.map2Eval", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#map2Eval[A,B,Z](fa:F[A],fb:cats.Eval[F[B]])(f:(A,B)=>Z):cats.Eval[F[Z]]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa: F[A], fb: F[B])(f: (A, B) => Z): F[Z]", "member" : "cats.Apply.map2", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#map2[A,B,Z](fa:F[A],fb:F[B])(f:(A,B)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap2", "tail" : "(ff: F[(A, B) => Z])(fa: F[A], fb: F[B]): F[Z]", "member" : "cats.Apply.ap2", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#ap2[A,B,Z](ff:F[(A,B)=>Z])(fa:F[A],fb:F[B]):F[Z]", "kind" : "def"}, {"label" : "<*", "tail" : "(fa: F[A])(fb: F[B]): F[A]", "member" : "cats.Apply.<*", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#<*[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(fa: F[A])(fb: F[B]): F[B]", "member" : "cats.Apply.*>", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#*>[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(ff: F[(A) => B])(fa: F[A]): F[B]", "member" : "cats.Apply.<*>", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#<*>[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "product", "tail" : "(fa: F[A], fb: F[B]): F[(A, B)]", "member" : "cats.Apply.product", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#product[A,B](fa:F[A],fb:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "productL", "tail" : "(fa: F[A])(fb: F[B]): F[A]", "member" : "cats.Apply.productL", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#productL[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "def"}, {"label" : "productR", "tail" : "(fa: F[A])(fb: F[B]): F[B]", "member" : "cats.Apply.productR", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#productR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "def"}, {"label" : "tuple22", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20], f21: F[A21]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.ApplyArityFunctions.tuple22", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#tuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "map22", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20], f21: F[A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map22", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#map22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap22", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20], f21: F[A21]): F[Z]", "member" : "cats.ApplyArityFunctions.ap22", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#ap22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[Z]", "kind" : "def"}, {"label" : "tuple21", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.ApplyArityFunctions.tuple21", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#tuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "map21", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map21", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#map21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap21", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20]): F[Z]", "member" : "cats.ApplyArityFunctions.ap21", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#ap21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[Z]", "kind" : "def"}, {"label" : "tuple20", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.ApplyArityFunctions.tuple20", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#tuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "map20", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map20", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#map20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap20", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19]): F[Z]", "member" : "cats.ApplyArityFunctions.ap20", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#ap20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[Z]", "kind" : "def"}, {"label" : "tuple19", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.ApplyArityFunctions.tuple19", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#tuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "map19", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map19", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#map19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap19", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18]): F[Z]", "member" : "cats.ApplyArityFunctions.ap19", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#ap19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[Z]", "kind" : "def"}, {"label" : "tuple18", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.ApplyArityFunctions.tuple18", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#tuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "map18", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map18", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#map18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap18", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17]): F[Z]", "member" : "cats.ApplyArityFunctions.ap18", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#ap18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[Z]", "kind" : "def"}, {"label" : "tuple17", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.ApplyArityFunctions.tuple17", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#tuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "map17", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map17", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#map17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap17", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16]): F[Z]", "member" : "cats.ApplyArityFunctions.ap17", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#ap17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[Z]", "kind" : "def"}, {"label" : "tuple16", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.ApplyArityFunctions.tuple16", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#tuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "map16", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map16", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#map16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap16", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15]): F[Z]", "member" : "cats.ApplyArityFunctions.ap16", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#ap16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[Z]", "kind" : "def"}, {"label" : "tuple15", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.ApplyArityFunctions.tuple15", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#tuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "map15", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map15", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#map15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap15", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14]): F[Z]", "member" : "cats.ApplyArityFunctions.ap15", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#ap15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[Z]", "kind" : "def"}, {"label" : "tuple14", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.ApplyArityFunctions.tuple14", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#tuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "map14", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map14", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#map14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap14", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13]): F[Z]", "member" : "cats.ApplyArityFunctions.ap14", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#ap14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[Z]", "kind" : "def"}, {"label" : "tuple13", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.ApplyArityFunctions.tuple13", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#tuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "map13", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map13", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#map13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap13", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12]): F[Z]", "member" : "cats.ApplyArityFunctions.ap13", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#ap13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[Z]", "kind" : "def"}, {"label" : "tuple12", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.ApplyArityFunctions.tuple12", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#tuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "map12", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map12", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#map12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap12", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11]): F[Z]", "member" : "cats.ApplyArityFunctions.ap12", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#ap12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[Z]", "kind" : "def"}, {"label" : "tuple11", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.ApplyArityFunctions.tuple11", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#tuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "map11", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map11", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#map11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap11", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10]): F[Z]", "member" : "cats.ApplyArityFunctions.ap11", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#ap11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[Z]", "kind" : "def"}, {"label" : "tuple10", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.ApplyArityFunctions.tuple10", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#tuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "map10", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map10", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#map10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap10", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9]): F[Z]", "member" : "cats.ApplyArityFunctions.ap10", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#ap10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[Z]", "kind" : "def"}, {"label" : "tuple9", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.ApplyArityFunctions.tuple9", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#tuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "map9", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map9", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#map9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap9", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8]): F[Z]", "member" : "cats.ApplyArityFunctions.ap9", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#ap9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[Z]", "kind" : "def"}, {"label" : "tuple8", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7]): F[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.ApplyArityFunctions.tuple8", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#tuple8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "map8", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map8", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#map8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap8", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7]): F[Z]", "member" : "cats.ApplyArityFunctions.ap8", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#ap8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[Z]", "kind" : "def"}, {"label" : "tuple7", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6]): F[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.ApplyArityFunctions.tuple7", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#tuple7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "map7", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6])(f: (A0, A1, A2, A3, A4, A5, A6) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map7", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#map7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap7", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6]): F[Z]", "member" : "cats.ApplyArityFunctions.ap7", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#ap7[A0,A1,A2,A3,A4,A5,A6,Z](f:F[(A0,A1,A2,A3,A4,A5,A6)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[Z]", "kind" : "def"}, {"label" : "tuple6", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5]): F[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.ApplyArityFunctions.tuple6", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#tuple6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[(A0,A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "map6", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5])(f: (A0, A1, A2, A3, A4, A5) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map6", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#map6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5])(f:(A0,A1,A2,A3,A4,A5)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap6", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5]): F[Z]", "member" : "cats.ApplyArityFunctions.ap6", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#ap6[A0,A1,A2,A3,A4,A5,Z](f:F[(A0,A1,A2,A3,A4,A5)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[Z]", "kind" : "def"}, {"label" : "tuple5", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4]): F[(A0, A1, A2, A3, A4)]", "member" : "cats.ApplyArityFunctions.tuple5", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#tuple5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[(A0,A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "map5", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4])(f: (A0, A1, A2, A3, A4) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map5", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#map5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4])(f:(A0,A1,A2,A3,A4)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap5", "tail" : "(f: F[(A0, A1, A2, A3, A4) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4]): F[Z]", "member" : "cats.ApplyArityFunctions.ap5", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#ap5[A0,A1,A2,A3,A4,Z](f:F[(A0,A1,A2,A3,A4)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[Z]", "kind" : "def"}, {"label" : "tuple4", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3]): F[(A0, A1, A2, A3)]", "member" : "cats.ApplyArityFunctions.tuple4", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#tuple4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[(A0,A1,A2,A3)]", "kind" : "def"}, {"label" : "map4", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3])(f: (A0, A1, A2, A3) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map4", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#map4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3])(f:(A0,A1,A2,A3)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap4", "tail" : "(f: F[(A0, A1, A2, A3) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3]): F[Z]", "member" : "cats.ApplyArityFunctions.ap4", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#ap4[A0,A1,A2,A3,Z](f:F[(A0,A1,A2,A3)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[Z]", "kind" : "def"}, {"label" : "tuple3", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2]): F[(A0, A1, A2)]", "member" : "cats.ApplyArityFunctions.tuple3", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#tuple3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2]):F[(A0,A1,A2)]", "kind" : "def"}, {"label" : "map3", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2])(f: (A0, A1, A2) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map3", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#map3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2])(f:(A0,A1,A2)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap3", "tail" : "(f: F[(A0, A1, A2) => Z])(f0: F[A0], f1: F[A1], f2: F[A2]): F[Z]", "member" : "cats.ApplyArityFunctions.ap3", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#ap3[A0,A1,A2,Z](f:F[(A0,A1,A2)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2]):F[Z]", "kind" : "def"}, {"label" : "tuple2", "tail" : "(f1: F[A], f2: F[B]): F[(A, B)]", "member" : "cats.ApplyArityFunctions.tuple2", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#tuple2[A,B](f1:F[A],f2:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "composeApply", "tail" : "(arg0: Apply[G]): InvariantSemigroupal[[α]F[G[α]]]", "member" : "cats.InvariantSemigroupal.composeApply", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#composeApply[G[_]](implicitevidence$1:cats.Apply[G]):cats.InvariantSemigroupal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Contravariant[[α]F[G[α]]]", "member" : "cats.Functor.composeContravariant", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#composeContravariant[G[_]](implicitevidence$2:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Functor[G]): Functor[[α]F[G[α]]]", "member" : "cats.Functor.compose", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#compose[G[_]](implicitevidence$1:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "def"}, {"label" : "ifF", "tail" : "(fb: F[Boolean])(ifTrue: => A, ifFalse: => A): F[A]", "member" : "cats.Functor.ifF", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#ifF[A](fb:F[Boolean])(ifTrue:=>A,ifFalse:=>A):F[A]", "kind" : "def"}, {"label" : "unzip", "tail" : "(fab: F[(A, B)]): (F[A], F[B])", "member" : "cats.Functor.unzip", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#unzip[A,B](fab:F[(A,B)]):(F[A],F[B])", "kind" : "def"}, {"label" : "tupleRight", "tail" : "(fa: F[A], b: B): F[(A, B)]", "member" : "cats.Functor.tupleRight", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "def"}, {"label" : "tupleLeft", "tail" : "(fa: F[A], b: B): F[(B, A)]", "member" : "cats.Functor.tupleLeft", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "def"}, {"label" : "as", "tail" : "(fa: F[A], b: B): F[B]", "member" : "cats.Functor.as", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(fa: F[A])(f: (A) => B): F[(A, B)]", "member" : "cats.Functor.fproduct", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "def"}, {"label" : "void", "tail" : "(fa: F[A]): F[Unit]", "member" : "cats.Functor.void", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#void[A](fa:F[A]):F[Unit]", "kind" : "def"}, {"label" : "lift", "tail" : "(f: (A) => B): (F[A]) => F[B]", "member" : "cats.Functor.lift", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "widen", "tail" : "(fa: F[A]): F[B]", "member" : "cats.Functor.widen", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: F[A])(f: (A) => B): F[B]", "member" : "cats.Functor.fmap", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: F[A])(f: (A) => B)(g: (B) => A): F[B]", "member" : "cats.Functor.imap", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]F[G[α]]]", "member" : "cats.Invariant.composeFunctor", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#composeFunctor[G[_]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]F[G[α]]]", "member" : "cats.Invariant.compose", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/control\/impl\/SelectiveWithMap.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "smap", "tail" : "(fa: F[A])(f: (A) => B): F[B]", "member" : "tofu.control.impl.SelectiveWithMap.smap", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#smap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "abstract def"}, {"label" : "selectAp", "tail" : "(fe: F[Either[A, B]])(ff: => F[(A) => B]): F[B]", "member" : "tofu.control.Selective.selectAp", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#selectAp[A,B](fe:F[Either[A,B]])(ff:=>F[A=>B]):F[B]", "kind" : "abstract def"}, {"label" : "pure", "tail" : "(x: A): F[A]", "member" : "cats.Applicative.pure", "link" : "tofu\/control\/impl\/SelectiveWithMap.html#pure[A](x:A):F[A]", "kind" : "abstract def"}], "shortDescription" : "Implement ap method via selectAp and map"}, {"name" : "tofu.control.impl.SelectiveWriterT", "shortDescription" : "", "members_class" : [{"label" : "selectAp", "tail" : "(fe: WriterT[F, W, Either[A, B]])(ff: => WriterT[F, W, (A) => B]): WriterT[F, W, B]", "member" : "tofu.control.impl.SelectiveWriterT.selectAp", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#selectAp[A,B](fe:cats.data.WriterT[F,W,Either[A,B]])(ff:=>cats.data.WriterT[F,W,A=>B]):cats.data.WriterT[F,W,B]", "kind" : "def"}, {"label" : "F", "tail" : ": Applicative[[γ$7$]WriterT[F, W, γ$7$]]", "member" : "tofu.control.impl.SelectiveWriterT.F", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#F:cats.Applicative[[γ$7$]cats.data.WriterT[F,W,γ$7$]]", "kind" : "val"}, {"member" : "tofu.control.impl.SelectiveWriterT#<init>", "error" : "unsupported entity"}, {"label" : "point", "tail" : "(a: A): WriterT[F, W, A]", "member" : "tofu.control.impl.ApplicativeDelegate.point", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#point[A](a:A):F[A]", "kind" : "final def"}, {"label" : "whenA", "tail" : "(cond: Boolean)(f: => WriterT[F, W, A]): WriterT[F, W, Unit]", "member" : "tofu.control.impl.ApplicativeDelegate.whenA", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#whenA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "final def"}, {"label" : "unlessA", "tail" : "(cond: Boolean)(f: => WriterT[F, W, A]): WriterT[F, W, Unit]", "member" : "tofu.control.impl.ApplicativeDelegate.unlessA", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#unlessA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "final def"}, {"label" : "composeContravariantMonoidal", "tail" : "(arg0: ContravariantMonoidal[G]): ContravariantMonoidal[[α]WriterT[F, W, G[α]]]", "member" : "tofu.control.impl.ApplicativeDelegate.composeContravariantMonoidal", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#composeContravariantMonoidal[G[_]](implicitevidence$2:cats.ContravariantMonoidal[G]):cats.ContravariantMonoidal[[α]F[G[α]]]", "kind" : "final def"}, {"label" : "compose", "tail" : "(arg0: Applicative[G]): Applicative[[α]WriterT[F, W, G[α]]]", "member" : "tofu.control.impl.ApplicativeDelegate.compose", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#compose[G[_]](implicitevidence$1:cats.Applicative[G]):cats.Applicative[[α]F[G[α]]]", "kind" : "final def"}, {"label" : "replicateA", "tail" : "(n: Int, fa: WriterT[F, W, A]): WriterT[F, W, List[A]]", "member" : "tofu.control.impl.ApplicativeDelegate.replicateA", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#replicateA[A](n:Int,fa:F[A]):F[List[A]]", "kind" : "final def"}, {"label" : "unit", "tail" : "(): WriterT[F, W, Unit]", "member" : "tofu.control.impl.ApplicativeDelegate.unit", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#unit:F[Unit]", "kind" : "final def"}, {"label" : "pure", "tail" : "(x: A): WriterT[F, W, A]", "member" : "tofu.control.impl.ApplicativeDelegate.pure", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#pure[A](x:A):F[A]", "kind" : "final def"}, {"label" : "tuple22", "tail" : "(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7], f8: WriterT[F, W, A8], f9: WriterT[F, W, A9], f10: WriterT[F, W, A10], f11: WriterT[F, W, A11], f12: WriterT[F, W, A12], f13: WriterT[F, W, A13], f14: WriterT[F, W, A14], f15: WriterT[F, W, A15], f16: WriterT[F, W, A16], f17: WriterT[F, W, A17], f18: WriterT[F, W, A18], f19: WriterT[F, W, A19], f20: WriterT[F, W, A20], f21: WriterT[F, W, A21]): WriterT[F, W, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "tofu.control.impl.ApplyDelegate.tuple22", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#tuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "final def"}, {"label" : "map22", "tail" : "(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7], f8: WriterT[F, W, A8], f9: WriterT[F, W, A9], f10: WriterT[F, W, A10], f11: WriterT[F, W, A11], f12: WriterT[F, W, A12], f13: WriterT[F, W, A13], f14: WriterT[F, W, A14], f15: WriterT[F, W, A15], f16: WriterT[F, W, A16], f17: WriterT[F, W, A17], f18: WriterT[F, W, A18], f19: WriterT[F, W, A19], f20: WriterT[F, W, A20], f21: WriterT[F, W, A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z): WriterT[F, W, Z]", "member" : "tofu.control.impl.ApplyDelegate.map22", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#map22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap22", "tail" : "(f: WriterT[F, W, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z])(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7], f8: WriterT[F, W, A8], f9: WriterT[F, W, A9], f10: WriterT[F, W, A10], f11: WriterT[F, W, A11], f12: WriterT[F, W, A12], f13: WriterT[F, W, A13], f14: WriterT[F, W, A14], f15: WriterT[F, W, A15], f16: WriterT[F, W, A16], f17: WriterT[F, W, A17], f18: WriterT[F, W, A18], f19: WriterT[F, W, A19], f20: WriterT[F, W, A20], f21: WriterT[F, W, A21]): WriterT[F, W, Z]", "member" : "tofu.control.impl.ApplyDelegate.ap22", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#ap22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[Z]", "kind" : "final def"}, {"label" : "tuple21", "tail" : "(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7], f8: WriterT[F, W, A8], f9: WriterT[F, W, A9], f10: WriterT[F, W, A10], f11: WriterT[F, W, A11], f12: WriterT[F, W, A12], f13: WriterT[F, W, A13], f14: WriterT[F, W, A14], f15: WriterT[F, W, A15], f16: WriterT[F, W, A16], f17: WriterT[F, W, A17], f18: WriterT[F, W, A18], f19: WriterT[F, W, A19], f20: WriterT[F, W, A20]): WriterT[F, W, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "tofu.control.impl.ApplyDelegate.tuple21", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#tuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "final def"}, {"label" : "map21", "tail" : "(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7], f8: WriterT[F, W, A8], f9: WriterT[F, W, A9], f10: WriterT[F, W, A10], f11: WriterT[F, W, A11], f12: WriterT[F, W, A12], f13: WriterT[F, W, A13], f14: WriterT[F, W, A14], f15: WriterT[F, W, A15], f16: WriterT[F, W, A16], f17: WriterT[F, W, A17], f18: WriterT[F, W, A18], f19: WriterT[F, W, A19], f20: WriterT[F, W, A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z): WriterT[F, W, Z]", "member" : "tofu.control.impl.ApplyDelegate.map21", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#map21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap21", "tail" : "(f: WriterT[F, W, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z])(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7], f8: WriterT[F, W, A8], f9: WriterT[F, W, A9], f10: WriterT[F, W, A10], f11: WriterT[F, W, A11], f12: WriterT[F, W, A12], f13: WriterT[F, W, A13], f14: WriterT[F, W, A14], f15: WriterT[F, W, A15], f16: WriterT[F, W, A16], f17: WriterT[F, W, A17], f18: WriterT[F, W, A18], f19: WriterT[F, W, A19], f20: WriterT[F, W, A20]): WriterT[F, W, Z]", "member" : "tofu.control.impl.ApplyDelegate.ap21", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#ap21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[Z]", "kind" : "final def"}, {"label" : "tuple20", "tail" : "(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7], f8: WriterT[F, W, A8], f9: WriterT[F, W, A9], f10: WriterT[F, W, A10], f11: WriterT[F, W, A11], f12: WriterT[F, W, A12], f13: WriterT[F, W, A13], f14: WriterT[F, W, A14], f15: WriterT[F, W, A15], f16: WriterT[F, W, A16], f17: WriterT[F, W, A17], f18: WriterT[F, W, A18], f19: WriterT[F, W, A19]): WriterT[F, W, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "tofu.control.impl.ApplyDelegate.tuple20", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#tuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "final def"}, {"label" : "map20", "tail" : "(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7], f8: WriterT[F, W, A8], f9: WriterT[F, W, A9], f10: WriterT[F, W, A10], f11: WriterT[F, W, A11], f12: WriterT[F, W, A12], f13: WriterT[F, W, A13], f14: WriterT[F, W, A14], f15: WriterT[F, W, A15], f16: WriterT[F, W, A16], f17: WriterT[F, W, A17], f18: WriterT[F, W, A18], f19: WriterT[F, W, A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z): WriterT[F, W, Z]", "member" : "tofu.control.impl.ApplyDelegate.map20", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#map20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap20", "tail" : "(f: WriterT[F, W, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z])(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7], f8: WriterT[F, W, A8], f9: WriterT[F, W, A9], f10: WriterT[F, W, A10], f11: WriterT[F, W, A11], f12: WriterT[F, W, A12], f13: WriterT[F, W, A13], f14: WriterT[F, W, A14], f15: WriterT[F, W, A15], f16: WriterT[F, W, A16], f17: WriterT[F, W, A17], f18: WriterT[F, W, A18], f19: WriterT[F, W, A19]): WriterT[F, W, Z]", "member" : "tofu.control.impl.ApplyDelegate.ap20", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#ap20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[Z]", "kind" : "final def"}, {"label" : "tuple19", "tail" : "(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7], f8: WriterT[F, W, A8], f9: WriterT[F, W, A9], f10: WriterT[F, W, A10], f11: WriterT[F, W, A11], f12: WriterT[F, W, A12], f13: WriterT[F, W, A13], f14: WriterT[F, W, A14], f15: WriterT[F, W, A15], f16: WriterT[F, W, A16], f17: WriterT[F, W, A17], f18: WriterT[F, W, A18]): WriterT[F, W, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "tofu.control.impl.ApplyDelegate.tuple19", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#tuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "final def"}, {"label" : "map19", "tail" : "(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7], f8: WriterT[F, W, A8], f9: WriterT[F, W, A9], f10: WriterT[F, W, A10], f11: WriterT[F, W, A11], f12: WriterT[F, W, A12], f13: WriterT[F, W, A13], f14: WriterT[F, W, A14], f15: WriterT[F, W, A15], f16: WriterT[F, W, A16], f17: WriterT[F, W, A17], f18: WriterT[F, W, A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z): WriterT[F, W, Z]", "member" : "tofu.control.impl.ApplyDelegate.map19", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#map19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap19", "tail" : "(f: WriterT[F, W, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z])(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7], f8: WriterT[F, W, A8], f9: WriterT[F, W, A9], f10: WriterT[F, W, A10], f11: WriterT[F, W, A11], f12: WriterT[F, W, A12], f13: WriterT[F, W, A13], f14: WriterT[F, W, A14], f15: WriterT[F, W, A15], f16: WriterT[F, W, A16], f17: WriterT[F, W, A17], f18: WriterT[F, W, A18]): WriterT[F, W, Z]", "member" : "tofu.control.impl.ApplyDelegate.ap19", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#ap19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[Z]", "kind" : "final def"}, {"label" : "tuple18", "tail" : "(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7], f8: WriterT[F, W, A8], f9: WriterT[F, W, A9], f10: WriterT[F, W, A10], f11: WriterT[F, W, A11], f12: WriterT[F, W, A12], f13: WriterT[F, W, A13], f14: WriterT[F, W, A14], f15: WriterT[F, W, A15], f16: WriterT[F, W, A16], f17: WriterT[F, W, A17]): WriterT[F, W, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "tofu.control.impl.ApplyDelegate.tuple18", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#tuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "final def"}, {"label" : "map18", "tail" : "(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7], f8: WriterT[F, W, A8], f9: WriterT[F, W, A9], f10: WriterT[F, W, A10], f11: WriterT[F, W, A11], f12: WriterT[F, W, A12], f13: WriterT[F, W, A13], f14: WriterT[F, W, A14], f15: WriterT[F, W, A15], f16: WriterT[F, W, A16], f17: WriterT[F, W, A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z): WriterT[F, W, Z]", "member" : "tofu.control.impl.ApplyDelegate.map18", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#map18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap18", "tail" : "(f: WriterT[F, W, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z])(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7], f8: WriterT[F, W, A8], f9: WriterT[F, W, A9], f10: WriterT[F, W, A10], f11: WriterT[F, W, A11], f12: WriterT[F, W, A12], f13: WriterT[F, W, A13], f14: WriterT[F, W, A14], f15: WriterT[F, W, A15], f16: WriterT[F, W, A16], f17: WriterT[F, W, A17]): WriterT[F, W, Z]", "member" : "tofu.control.impl.ApplyDelegate.ap18", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#ap18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[Z]", "kind" : "final def"}, {"label" : "tuple17", "tail" : "(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7], f8: WriterT[F, W, A8], f9: WriterT[F, W, A9], f10: WriterT[F, W, A10], f11: WriterT[F, W, A11], f12: WriterT[F, W, A12], f13: WriterT[F, W, A13], f14: WriterT[F, W, A14], f15: WriterT[F, W, A15], f16: WriterT[F, W, A16]): WriterT[F, W, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "tofu.control.impl.ApplyDelegate.tuple17", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#tuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "final def"}, {"label" : "map17", "tail" : "(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7], f8: WriterT[F, W, A8], f9: WriterT[F, W, A9], f10: WriterT[F, W, A10], f11: WriterT[F, W, A11], f12: WriterT[F, W, A12], f13: WriterT[F, W, A13], f14: WriterT[F, W, A14], f15: WriterT[F, W, A15], f16: WriterT[F, W, A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z): WriterT[F, W, Z]", "member" : "tofu.control.impl.ApplyDelegate.map17", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#map17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap17", "tail" : "(f: WriterT[F, W, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z])(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7], f8: WriterT[F, W, A8], f9: WriterT[F, W, A9], f10: WriterT[F, W, A10], f11: WriterT[F, W, A11], f12: WriterT[F, W, A12], f13: WriterT[F, W, A13], f14: WriterT[F, W, A14], f15: WriterT[F, W, A15], f16: WriterT[F, W, A16]): WriterT[F, W, Z]", "member" : "tofu.control.impl.ApplyDelegate.ap17", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#ap17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[Z]", "kind" : "final def"}, {"label" : "tuple16", "tail" : "(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7], f8: WriterT[F, W, A8], f9: WriterT[F, W, A9], f10: WriterT[F, W, A10], f11: WriterT[F, W, A11], f12: WriterT[F, W, A12], f13: WriterT[F, W, A13], f14: WriterT[F, W, A14], f15: WriterT[F, W, A15]): WriterT[F, W, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "tofu.control.impl.ApplyDelegate.tuple16", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#tuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "final def"}, {"label" : "map16", "tail" : "(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7], f8: WriterT[F, W, A8], f9: WriterT[F, W, A9], f10: WriterT[F, W, A10], f11: WriterT[F, W, A11], f12: WriterT[F, W, A12], f13: WriterT[F, W, A13], f14: WriterT[F, W, A14], f15: WriterT[F, W, A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z): WriterT[F, W, Z]", "member" : "tofu.control.impl.ApplyDelegate.map16", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#map16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap16", "tail" : "(f: WriterT[F, W, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z])(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7], f8: WriterT[F, W, A8], f9: WriterT[F, W, A9], f10: WriterT[F, W, A10], f11: WriterT[F, W, A11], f12: WriterT[F, W, A12], f13: WriterT[F, W, A13], f14: WriterT[F, W, A14], f15: WriterT[F, W, A15]): WriterT[F, W, Z]", "member" : "tofu.control.impl.ApplyDelegate.ap16", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#ap16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[Z]", "kind" : "final def"}, {"label" : "tuple15", "tail" : "(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7], f8: WriterT[F, W, A8], f9: WriterT[F, W, A9], f10: WriterT[F, W, A10], f11: WriterT[F, W, A11], f12: WriterT[F, W, A12], f13: WriterT[F, W, A13], f14: WriterT[F, W, A14]): WriterT[F, W, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "tofu.control.impl.ApplyDelegate.tuple15", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#tuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "final def"}, {"label" : "map15", "tail" : "(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7], f8: WriterT[F, W, A8], f9: WriterT[F, W, A9], f10: WriterT[F, W, A10], f11: WriterT[F, W, A11], f12: WriterT[F, W, A12], f13: WriterT[F, W, A13], f14: WriterT[F, W, A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z): WriterT[F, W, Z]", "member" : "tofu.control.impl.ApplyDelegate.map15", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#map15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap15", "tail" : "(f: WriterT[F, W, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z])(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7], f8: WriterT[F, W, A8], f9: WriterT[F, W, A9], f10: WriterT[F, W, A10], f11: WriterT[F, W, A11], f12: WriterT[F, W, A12], f13: WriterT[F, W, A13], f14: WriterT[F, W, A14]): WriterT[F, W, Z]", "member" : "tofu.control.impl.ApplyDelegate.ap15", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#ap15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[Z]", "kind" : "final def"}, {"label" : "tuple14", "tail" : "(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7], f8: WriterT[F, W, A8], f9: WriterT[F, W, A9], f10: WriterT[F, W, A10], f11: WriterT[F, W, A11], f12: WriterT[F, W, A12], f13: WriterT[F, W, A13]): WriterT[F, W, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "tofu.control.impl.ApplyDelegate.tuple14", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#tuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "final def"}, {"label" : "map14", "tail" : "(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7], f8: WriterT[F, W, A8], f9: WriterT[F, W, A9], f10: WriterT[F, W, A10], f11: WriterT[F, W, A11], f12: WriterT[F, W, A12], f13: WriterT[F, W, A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z): WriterT[F, W, Z]", "member" : "tofu.control.impl.ApplyDelegate.map14", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#map14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap14", "tail" : "(f: WriterT[F, W, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z])(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7], f8: WriterT[F, W, A8], f9: WriterT[F, W, A9], f10: WriterT[F, W, A10], f11: WriterT[F, W, A11], f12: WriterT[F, W, A12], f13: WriterT[F, W, A13]): WriterT[F, W, Z]", "member" : "tofu.control.impl.ApplyDelegate.ap14", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#ap14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[Z]", "kind" : "final def"}, {"label" : "tuple13", "tail" : "(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7], f8: WriterT[F, W, A8], f9: WriterT[F, W, A9], f10: WriterT[F, W, A10], f11: WriterT[F, W, A11], f12: WriterT[F, W, A12]): WriterT[F, W, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "tofu.control.impl.ApplyDelegate.tuple13", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#tuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "final def"}, {"label" : "map13", "tail" : "(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7], f8: WriterT[F, W, A8], f9: WriterT[F, W, A9], f10: WriterT[F, W, A10], f11: WriterT[F, W, A11], f12: WriterT[F, W, A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z): WriterT[F, W, Z]", "member" : "tofu.control.impl.ApplyDelegate.map13", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#map13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap13", "tail" : "(f: WriterT[F, W, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z])(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7], f8: WriterT[F, W, A8], f9: WriterT[F, W, A9], f10: WriterT[F, W, A10], f11: WriterT[F, W, A11], f12: WriterT[F, W, A12]): WriterT[F, W, Z]", "member" : "tofu.control.impl.ApplyDelegate.ap13", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#ap13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[Z]", "kind" : "final def"}, {"label" : "tuple12", "tail" : "(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7], f8: WriterT[F, W, A8], f9: WriterT[F, W, A9], f10: WriterT[F, W, A10], f11: WriterT[F, W, A11]): WriterT[F, W, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "tofu.control.impl.ApplyDelegate.tuple12", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#tuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "final def"}, {"label" : "map12", "tail" : "(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7], f8: WriterT[F, W, A8], f9: WriterT[F, W, A9], f10: WriterT[F, W, A10], f11: WriterT[F, W, A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z): WriterT[F, W, Z]", "member" : "tofu.control.impl.ApplyDelegate.map12", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#map12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap12", "tail" : "(f: WriterT[F, W, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z])(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7], f8: WriterT[F, W, A8], f9: WriterT[F, W, A9], f10: WriterT[F, W, A10], f11: WriterT[F, W, A11]): WriterT[F, W, Z]", "member" : "tofu.control.impl.ApplyDelegate.ap12", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#ap12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[Z]", "kind" : "final def"}, {"label" : "tuple11", "tail" : "(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7], f8: WriterT[F, W, A8], f9: WriterT[F, W, A9], f10: WriterT[F, W, A10]): WriterT[F, W, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "tofu.control.impl.ApplyDelegate.tuple11", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#tuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "final def"}, {"label" : "map11", "tail" : "(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7], f8: WriterT[F, W, A8], f9: WriterT[F, W, A9], f10: WriterT[F, W, A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z): WriterT[F, W, Z]", "member" : "tofu.control.impl.ApplyDelegate.map11", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#map11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap11", "tail" : "(f: WriterT[F, W, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z])(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7], f8: WriterT[F, W, A8], f9: WriterT[F, W, A9], f10: WriterT[F, W, A10]): WriterT[F, W, Z]", "member" : "tofu.control.impl.ApplyDelegate.ap11", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#ap11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[Z]", "kind" : "final def"}, {"label" : "tuple10", "tail" : "(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7], f8: WriterT[F, W, A8], f9: WriterT[F, W, A9]): WriterT[F, W, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "tofu.control.impl.ApplyDelegate.tuple10", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#tuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "final def"}, {"label" : "map10", "tail" : "(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7], f8: WriterT[F, W, A8], f9: WriterT[F, W, A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z): WriterT[F, W, Z]", "member" : "tofu.control.impl.ApplyDelegate.map10", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#map10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap10", "tail" : "(f: WriterT[F, W, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z])(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7], f8: WriterT[F, W, A8], f9: WriterT[F, W, A9]): WriterT[F, W, Z]", "member" : "tofu.control.impl.ApplyDelegate.ap10", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#ap10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[Z]", "kind" : "final def"}, {"label" : "tuple9", "tail" : "(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7], f8: WriterT[F, W, A8]): WriterT[F, W, (A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "tofu.control.impl.ApplyDelegate.tuple9", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#tuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "final def"}, {"label" : "map9", "tail" : "(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7], f8: WriterT[F, W, A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z): WriterT[F, W, Z]", "member" : "tofu.control.impl.ApplyDelegate.map9", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#map9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap9", "tail" : "(f: WriterT[F, W, (A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z])(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7], f8: WriterT[F, W, A8]): WriterT[F, W, Z]", "member" : "tofu.control.impl.ApplyDelegate.ap9", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#ap9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[Z]", "kind" : "final def"}, {"label" : "tuple8", "tail" : "(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7]): WriterT[F, W, (A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "tofu.control.impl.ApplyDelegate.tuple8", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#tuple8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "final def"}, {"label" : "map8", "tail" : "(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) => Z): WriterT[F, W, Z]", "member" : "tofu.control.impl.ApplyDelegate.map8", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#map8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap8", "tail" : "(f: WriterT[F, W, (A0, A1, A2, A3, A4, A5, A6, A7) => Z])(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6], f7: WriterT[F, W, A7]): WriterT[F, W, Z]", "member" : "tofu.control.impl.ApplyDelegate.ap8", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#ap8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[Z]", "kind" : "final def"}, {"label" : "tuple7", "tail" : "(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6]): WriterT[F, W, (A0, A1, A2, A3, A4, A5, A6)]", "member" : "tofu.control.impl.ApplyDelegate.tuple7", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#tuple7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "final def"}, {"label" : "map7", "tail" : "(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6])(f: (A0, A1, A2, A3, A4, A5, A6) => Z): WriterT[F, W, Z]", "member" : "tofu.control.impl.ApplyDelegate.map7", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#map7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap7", "tail" : "(f: WriterT[F, W, (A0, A1, A2, A3, A4, A5, A6) => Z])(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5], f6: WriterT[F, W, A6]): WriterT[F, W, Z]", "member" : "tofu.control.impl.ApplyDelegate.ap7", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#ap7[A0,A1,A2,A3,A4,A5,A6,Z](f:F[(A0,A1,A2,A3,A4,A5,A6)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[Z]", "kind" : "final def"}, {"label" : "tuple6", "tail" : "(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5]): WriterT[F, W, (A0, A1, A2, A3, A4, A5)]", "member" : "tofu.control.impl.ApplyDelegate.tuple6", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#tuple6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[(A0,A1,A2,A3,A4,A5)]", "kind" : "final def"}, {"label" : "map6", "tail" : "(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5])(f: (A0, A1, A2, A3, A4, A5) => Z): WriterT[F, W, Z]", "member" : "tofu.control.impl.ApplyDelegate.map6", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#map6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5])(f:(A0,A1,A2,A3,A4,A5)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap6", "tail" : "(f: WriterT[F, W, (A0, A1, A2, A3, A4, A5) => Z])(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4], f5: WriterT[F, W, A5]): WriterT[F, W, Z]", "member" : "tofu.control.impl.ApplyDelegate.ap6", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#ap6[A0,A1,A2,A3,A4,A5,Z](f:F[(A0,A1,A2,A3,A4,A5)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[Z]", "kind" : "final def"}, {"label" : "tuple5", "tail" : "(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4]): WriterT[F, W, (A0, A1, A2, A3, A4)]", "member" : "tofu.control.impl.ApplyDelegate.tuple5", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#tuple5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[(A0,A1,A2,A3,A4)]", "kind" : "final def"}, {"label" : "map5", "tail" : "(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4])(f: (A0, A1, A2, A3, A4) => Z): WriterT[F, W, Z]", "member" : "tofu.control.impl.ApplyDelegate.map5", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#map5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4])(f:(A0,A1,A2,A3,A4)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap5", "tail" : "(f: WriterT[F, W, (A0, A1, A2, A3, A4) => Z])(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3], f4: WriterT[F, W, A4]): WriterT[F, W, Z]", "member" : "tofu.control.impl.ApplyDelegate.ap5", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#ap5[A0,A1,A2,A3,A4,Z](f:F[(A0,A1,A2,A3,A4)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[Z]", "kind" : "final def"}, {"label" : "tuple4", "tail" : "(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3]): WriterT[F, W, (A0, A1, A2, A3)]", "member" : "tofu.control.impl.ApplyDelegate.tuple4", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#tuple4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[(A0,A1,A2,A3)]", "kind" : "final def"}, {"label" : "map4", "tail" : "(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3])(f: (A0, A1, A2, A3) => Z): WriterT[F, W, Z]", "member" : "tofu.control.impl.ApplyDelegate.map4", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#map4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3])(f:(A0,A1,A2,A3)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap4", "tail" : "(f: WriterT[F, W, (A0, A1, A2, A3) => Z])(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2], f3: WriterT[F, W, A3]): WriterT[F, W, Z]", "member" : "tofu.control.impl.ApplyDelegate.ap4", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#ap4[A0,A1,A2,A3,Z](f:F[(A0,A1,A2,A3)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[Z]", "kind" : "final def"}, {"label" : "tuple3", "tail" : "(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2]): WriterT[F, W, (A0, A1, A2)]", "member" : "tofu.control.impl.ApplyDelegate.tuple3", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#tuple3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2]):F[(A0,A1,A2)]", "kind" : "final def"}, {"label" : "map3", "tail" : "(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2])(f: (A0, A1, A2) => Z): WriterT[F, W, Z]", "member" : "tofu.control.impl.ApplyDelegate.map3", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#map3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2])(f:(A0,A1,A2)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap3", "tail" : "(f: WriterT[F, W, (A0, A1, A2) => Z])(f0: WriterT[F, W, A0], f1: WriterT[F, W, A1], f2: WriterT[F, W, A2]): WriterT[F, W, Z]", "member" : "tofu.control.impl.ApplyDelegate.ap3", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#ap3[A0,A1,A2,Z](f:F[(A0,A1,A2)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2]):F[Z]", "kind" : "final def"}, {"label" : "tuple2", "tail" : "(f1: WriterT[F, W, A], f2: WriterT[F, W, B]): WriterT[F, W, (A, B)]", "member" : "tofu.control.impl.ApplyDelegate.tuple2", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#tuple2[A,B](f1:F[A],f2:F[B]):F[(A,B)]", "kind" : "final def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]WriterT[F, W, G[α]]]", "member" : "tofu.control.impl.ApplyDelegate.composeFunctor", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#composeFunctor[G[_]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "final def"}, {"label" : "composeApply", "tail" : "(G: Apply[G]): InvariantSemigroupal[[α]WriterT[F, W, G[α]]]", "member" : "tofu.control.impl.ApplyDelegate.composeApply", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#composeApply[G[_]](implicitG:cats.Apply[G]):cats.InvariantSemigroupal[[α]F[G[α]]]", "kind" : "final def"}, {"label" : "map2Eval", "tail" : "(fa: WriterT[F, W, A], fb: Eval[WriterT[F, W, B]])(f: (A, B) => Z): Eval[WriterT[F, W, Z]]", "member" : "tofu.control.impl.ApplyDelegate.map2Eval", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#map2Eval[A,B,Z](fa:F[A],fb:cats.Eval[F[B]])(f:(A,B)=>Z):cats.Eval[F[Z]]", "kind" : "final def"}, {"label" : "map2", "tail" : "(fa: WriterT[F, W, A], fb: WriterT[F, W, B])(f: (A, B) => Z): WriterT[F, W, Z]", "member" : "tofu.control.impl.ApplyDelegate.map2", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#map2[A,B,Z](fa:F[A],fb:F[B])(f:(A,B)=>Z):F[Z]", "kind" : "final def"}, {"label" : "ap2", "tail" : "(ff: WriterT[F, W, (A, B) => Z])(fa: WriterT[F, W, A], fb: WriterT[F, W, B]): WriterT[F, W, Z]", "member" : "tofu.control.impl.ApplyDelegate.ap2", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#ap2[A,B,Z](ff:F[(A,B)=>Z])(fa:F[A],fb:F[B]):F[Z]", "kind" : "final def"}, {"label" : "product", "tail" : "(fa: WriterT[F, W, A], fb: WriterT[F, W, B]): WriterT[F, W, (A, B)]", "member" : "tofu.control.impl.ApplyDelegate.product", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#product[A,B](fa:F[A],fb:F[B]):F[(A,B)]", "kind" : "final def"}, {"label" : "productL", "tail" : "(fa: WriterT[F, W, A])(fb: WriterT[F, W, B]): WriterT[F, W, A]", "member" : "tofu.control.impl.ApplyDelegate.productL", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#productL[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "productR", "tail" : "(fa: WriterT[F, W, A])(fb: WriterT[F, W, B]): WriterT[F, W, B]", "member" : "tofu.control.impl.ApplyDelegate.productR", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#productR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: WriterT[F, W, A])(f: (A) => B)(g: (B) => A): WriterT[F, W, B]", "member" : "tofu.control.impl.ApplyDelegate.imap", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "final def"}, {"label" : "ap", "tail" : "(ff: WriterT[F, W, (A) => B])(fa: WriterT[F, W, A]): WriterT[F, W, B]", "member" : "tofu.control.impl.ApplyDelegate.ap", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#ap[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "composeContravariant", "tail" : "(G: Contravariant[G]): Contravariant[[α]WriterT[F, W, G[α]]]", "member" : "tofu.control.impl.FunctorDelegate.composeContravariant", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#composeContravariant[G[_]](implicitG:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "final def"}, {"label" : "compose", "tail" : "(G: Functor[G]): Functor[[α]WriterT[F, W, G[α]]]", "member" : "tofu.control.impl.FunctorDelegate.compose", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#compose[G[_]](implicitG:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "final def"}, {"label" : "tupleRight", "tail" : "(fa: WriterT[F, W, A], b: B): WriterT[F, W, (A, B)]", "member" : "tofu.control.impl.FunctorDelegate.tupleRight", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "final def"}, {"label" : "tupleLeft", "tail" : "(fa: WriterT[F, W, A], b: B): WriterT[F, W, (B, A)]", "member" : "tofu.control.impl.FunctorDelegate.tupleLeft", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "final def"}, {"label" : "as", "tail" : "(fa: WriterT[F, W, A], b: B): WriterT[F, W, B]", "member" : "tofu.control.impl.FunctorDelegate.as", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "final def"}, {"label" : "fproduct", "tail" : "(fa: WriterT[F, W, A])(f: (A) => B): WriterT[F, W, (A, B)]", "member" : "tofu.control.impl.FunctorDelegate.fproduct", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "final def"}, {"label" : "void", "tail" : "(fa: WriterT[F, W, A]): WriterT[F, W, Unit]", "member" : "tofu.control.impl.FunctorDelegate.void", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#void[A](fa:F[A]):F[Unit]", "kind" : "final def"}, {"label" : "lift", "tail" : "(f: (A) => B): (WriterT[F, W, A]) => WriterT[F, W, B]", "member" : "tofu.control.impl.FunctorDelegate.lift", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "final def"}, {"label" : "widen", "tail" : "(fa: WriterT[F, W, A]): WriterT[F, W, B]", "member" : "tofu.control.impl.FunctorDelegate.widen", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(fa: WriterT[F, W, A])(f: (A) => B): WriterT[F, W, B]", "member" : "tofu.control.impl.FunctorDelegate.map", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#map[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "optionMonoid", "tail" : "(): Monoid[WriterT[F, W, Option[A]]]", "member" : "tofu.control.Selective.optionMonoid", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#optionMonoid[A]:cats.Monoid[F[Option[A]]]", "kind" : "def"}, {"label" : "unlesss_", "tail" : "(fb: WriterT[F, W, Boolean])(fa: => WriterT[F, W, A]): WriterT[F, W, Unit]", "member" : "tofu.control.Selective.unlesss_", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#unlesss_[A](fb:F[Boolean])(fa:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "whens_", "tail" : "(fb: WriterT[F, W, Boolean])(fa: => WriterT[F, W, A]): WriterT[F, W, Unit]", "member" : "tofu.control.Selective.whens_", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#whens_[A](fb:F[Boolean])(fa:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "unlesss", "tail" : "(fb: WriterT[F, W, Boolean])(fa: => WriterT[F, W, A]): WriterT[F, W, Option[A]]", "member" : "tofu.control.Selective.unlesss", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#unlesss[A](fb:F[Boolean])(fa:=>F[A]):F[Option[A]]", "kind" : "def"}, {"label" : "whens", "tail" : "(fb: WriterT[F, W, Boolean])(fa: => WriterT[F, W, A]): WriterT[F, W, Option[A]]", "member" : "tofu.control.Selective.whens", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#whens[A](fb:F[Boolean])(fa:=>F[A]):F[Option[A]]", "kind" : "def"}, {"label" : "orElses", "tail" : "(fx: WriterT[F, W, Option[A]])(fy: => WriterT[F, W, Option[A]]): WriterT[F, W, Option[A]]", "member" : "tofu.control.Selective.orElses", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#orElses[A](fx:F[Option[A]])(fy:=>F[Option[A]]):F[Option[A]]", "kind" : "def"}, {"label" : "selectRight", "tail" : "(fb: WriterT[F, W, A], fo: WriterT[F, W, Option[A]]): WriterT[F, W, A]", "member" : "tofu.control.Selective.selectRight", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#selectRight[A](fb:F[A],fo:F[Option[A]]):F[A]", "kind" : "def"}, {"label" : "select", "tail" : "(fo: WriterT[F, W, Option[A]])(fa: => WriterT[F, W, A]): WriterT[F, W, A]", "member" : "tofu.control.Selective.select", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#select[A](fo:F[Option[A]])(fa:=>F[A]):F[A]", "kind" : "def"}, {"label" : "ifA", "tail" : "(fcond: WriterT[F, W, Boolean])(ifTrue: WriterT[F, W, A], ifFalse: WriterT[F, W, A]): WriterT[F, W, A]", "member" : "cats.Apply.ifA", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#ifA[A](fcond:F[Boolean])(ifTrue:F[A],ifFalse:F[A]):F[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Apply[G]): Apply[[α]WriterT[F, W, G[α]]]", "member" : "cats.Apply.compose", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#compose[G[_]](implicitevidence$1:cats.Apply[G]):cats.Apply[[α]F[G[α]]]", "kind" : "def"}, {"label" : "<*", "tail" : "(fa: WriterT[F, W, A])(fb: WriterT[F, W, B]): WriterT[F, W, A]", "member" : "cats.Apply.<*", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#<*[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(fa: WriterT[F, W, A])(fb: WriterT[F, W, B]): WriterT[F, W, B]", "member" : "cats.Apply.*>", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#*>[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(ff: WriterT[F, W, (A) => B])(fa: WriterT[F, W, A]): WriterT[F, W, B]", "member" : "cats.Apply.<*>", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#<*>[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "ifF", "tail" : "(fb: WriterT[F, W, Boolean])(ifTrue: => A, ifFalse: => A): WriterT[F, W, A]", "member" : "cats.Functor.ifF", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#ifF[A](fb:F[Boolean])(ifTrue:=>A,ifFalse:=>A):F[A]", "kind" : "def"}, {"label" : "unzip", "tail" : "(fab: WriterT[F, W, (A, B)]): (WriterT[F, W, A], WriterT[F, W, B])", "member" : "cats.Functor.unzip", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#unzip[A,B](fab:F[(A,B)]):(F[A],F[B])", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: WriterT[F, W, A])(f: (A) => B): WriterT[F, W, B]", "member" : "cats.Functor.fmap", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]WriterT[F, W, G[α]]]", "member" : "cats.Invariant.compose", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/control\/impl\/SelectiveWriterT.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/control\/impl\/SelectiveWriterT.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "tofu\/control\/impl\/SelectiveWriterT.html", "kind" : "class"}], "tofu.data.instances" : [{"name" : "tofu.data.instances.order", "shortDescription" : "", "object" : "tofu\/data\/instances\/order$.html", "members_object" : [{"label" : "derive", "tail" : "(): Order[A]", "member" : "tofu.data.instances.order.derive", "link" : "tofu\/data\/instances\/order$.html#derive[A]:cats.Order[A]", "kind" : "implicit macro def"}, {"label" : "dispatch", "tail" : "(ctx: SealedTrait[Order, T]): Order[T]", "member" : "tofu.data.instances.order.dispatch", "link" : "tofu\/data\/instances\/order$.html#dispatch[T](ctx:magnolia.SealedTrait[cats.Order,T]):cats.Order[T]", "kind" : "def"}, {"label" : "combine", "tail" : "(ctx: CaseClass[Order, T]): Order[T]", "member" : "tofu.data.instances.order.combine", "link" : "tofu\/data\/instances\/order$.html#combine[T](ctx:magnolia.CaseClass[cats.Order,T]):cats.Order[T]", "kind" : "def"}, {"label" : "Typeclass", "tail" : "", "member" : "tofu.data.instances.order.Typeclass", "link" : "tofu\/data\/instances\/order$.html#Typeclass[A]=cats.Order[A]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/data\/instances\/order$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/data\/instances\/order$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/data\/instances\/order$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/data\/instances\/order$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/data\/instances\/order$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/data\/instances\/order$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/data\/instances\/order$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/data\/instances\/order$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/data\/instances\/order$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/data\/instances\/order$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/data\/instances\/order$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/data\/instances\/order$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/data\/instances\/order$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/data\/instances\/order$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/data\/instances\/order$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/data\/instances\/order$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/data\/instances\/order$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/data\/instances\/order$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/data\/instances\/order$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "tofu.concurrent.impl" : [{"name" : "tofu.concurrent.impl.FocusedRef", "shortDescription" : "Having A Contains B relation, make a ref that would change only marked part of state", "members_case class" : [{"label" : "access", "tail" : "(): F[(B, (B) => F[Boolean])]", "member" : "tofu.concurrent.impl.FocusedRef.access", "link" : "tofu\/concurrent\/impl\/FocusedRef.html#access:F[(B,B=>F[Boolean])]", "kind" : "def"}, {"label" : "tryModifyState", "tail" : "(state: State[B, X]): F[Option[X]]", "member" : "tofu.concurrent.impl.FocusedRef.tryModifyState", "link" : "tofu\/concurrent\/impl\/FocusedRef.html#tryModifyState[X](state:cats.data.State[B,X]):F[Option[X]]", "kind" : "def"}, {"label" : "tryModify", "tail" : "(f: (B) => (B, X)): F[Option[X]]", "member" : "tofu.concurrent.impl.FocusedRef.tryModify", "link" : "tofu\/concurrent\/impl\/FocusedRef.html#tryModify[X](f:B=>(B,X)):F[Option[X]]", "kind" : "def"}, {"label" : "tryUpdate", "tail" : "(f: (B) => B): F[Boolean]", "member" : "tofu.concurrent.impl.FocusedRef.tryUpdate", "link" : "tofu\/concurrent\/impl\/FocusedRef.html#tryUpdate(f:B=>B):F[Boolean]", "kind" : "def"}, {"label" : "modifyState", "tail" : "(state: State[B, X]): F[X]", "member" : "tofu.concurrent.impl.FocusedRef.modifyState", "link" : "tofu\/concurrent\/impl\/FocusedRef.html#modifyState[X](state:cats.data.State[B,X]):F[X]", "kind" : "def"}, {"label" : "modify", "tail" : "(f: (B) => (B, X)): F[X]", "member" : "tofu.concurrent.impl.FocusedRef.modify", "link" : "tofu\/concurrent\/impl\/FocusedRef.html#modify[X](f:B=>(B,X)):F[X]", "kind" : "def"}, {"label" : "update", "tail" : "(f: (B) => B): F[Unit]", "member" : "tofu.concurrent.impl.FocusedRef.update", "link" : "tofu\/concurrent\/impl\/FocusedRef.html#update(f:B=>B):F[Unit]", "kind" : "def"}, {"label" : "getAndSet", "tail" : "(b: B): F[B]", "member" : "tofu.concurrent.impl.FocusedRef.getAndSet", "link" : "tofu\/concurrent\/impl\/FocusedRef.html#getAndSet(b:B):F[B]", "kind" : "def"}, {"label" : "set", "tail" : "(b: B): F[Unit]", "member" : "tofu.concurrent.impl.FocusedRef.set", "link" : "tofu\/concurrent\/impl\/FocusedRef.html#set(b:B):F[Unit]", "kind" : "def"}, {"label" : "get", "tail" : "(): F[B]", "member" : "tofu.concurrent.impl.FocusedRef.get", "link" : "tofu\/concurrent\/impl\/FocusedRef.html#get:F[B]", "kind" : "def"}, {"member" : "tofu.concurrent.impl.FocusedRef#<init>", "error" : "unsupported entity"}, {"label" : "focus", "tail" : ": Contains[A, B]", "member" : "tofu.concurrent.impl.FocusedRef.focus", "link" : "tofu\/concurrent\/impl\/FocusedRef.html#focus:tofu.optics.Contains[A,B]", "kind" : "val"}, {"label" : "ref", "tail" : ": Ref[F, A]", "member" : "tofu.concurrent.impl.FocusedRef.ref", "link" : "tofu\/concurrent\/impl\/FocusedRef.html#ref:cats.effect.concurrent.Ref[F,A]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "tofu\/concurrent\/impl\/FocusedRef.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "mapK", "tail" : "(f: ~>[F, G])(F: Functor[F]): Ref[G, B]", "member" : "cats.effect.concurrent.Ref.mapK", "link" : "tofu\/concurrent\/impl\/FocusedRef.html#mapK[G[_]](f:F~>G)(implicitF:cats.Functor[F]):cats.effect.concurrent.Ref[G,A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/impl\/FocusedRef.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/impl\/FocusedRef.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/impl\/FocusedRef.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/impl\/FocusedRef.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/impl\/FocusedRef.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/impl\/FocusedRef.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/impl\/FocusedRef.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/impl\/FocusedRef.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/impl\/FocusedRef.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/impl\/FocusedRef.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/impl\/FocusedRef.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/impl\/FocusedRef.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/impl\/FocusedRef.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/impl\/FocusedRef.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/impl\/FocusedRef.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/impl\/FocusedRef.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "tofu\/concurrent\/impl\/FocusedRef.html", "kind" : "case class"}], "tofu.data.derived" : [{"name" : "tofu.data.derived.Merge", "object" : "tofu\/data\/derived\/Merge$.html", "members_object" : [{"label" : "ops", "tail" : "", "member" : "tofu.data.derived.Merge.ops", "link" : "tofu\/data\/derived\/Merge$.html#ops", "kind" : "object"}, {"label" : "AllOps", "tail" : "", "member" : "tofu.data.derived.Merge.AllOps", "link" : "tofu\/data\/derived\/Merge$.html#AllOps[A]extendsMerge.Ops[A]", "kind" : "trait"}, {"label" : "nonInheritedOps", "tail" : "", "member" : "tofu.data.derived.Merge.nonInheritedOps", "link" : "tofu\/data\/derived\/Merge$.html#nonInheritedOps", "kind" : "object"}, {"label" : "ToMergeOps", "tail" : "", "member" : "tofu.data.derived.Merge.ToMergeOps", "link" : "tofu\/data\/derived\/Merge$.html#ToMergeOpsextendsAnyRef", "kind" : "trait"}, {"label" : "Ops", "tail" : "", "member" : "tofu.data.derived.Merge.Ops", "link" : "tofu\/data\/derived\/Merge$.html#Ops[A]extendsAnyRef", "kind" : "trait"}, {"label" : "apply", "tail" : "(instance: Merge[A]): Merge[A]", "member" : "tofu.data.derived.Merge.apply", "link" : "tofu\/data\/derived\/Merge$.html#apply[A](implicitinstance:tofu.data.derived.Merge[A]):tofu.data.derived.Merge[A]", "kind" : "def"}, {"label" : "primitiveString", "tail" : "", "member" : "tofu.data.derived.Merge.primitiveString", "link" : "tofu\/data\/derived\/Merge$.html#primitiveString", "kind" : "implicit object"}, {"label" : "primitiveInstant", "tail" : "", "member" : "tofu.data.derived.Merge.primitiveInstant", "link" : "tofu\/data\/derived\/Merge$.html#primitiveInstant", "kind" : "implicit object"}, {"label" : "primitiveZonedDateTime", "tail" : "", "member" : "tofu.data.derived.Merge.primitiveZonedDateTime", "link" : "tofu\/data\/derived\/Merge$.html#primitiveZonedDateTime", "kind" : "implicit object"}, {"label" : "primitiveLocalDateTime", "tail" : "", "member" : "tofu.data.derived.Merge.primitiveLocalDateTime", "link" : "tofu\/data\/derived\/Merge$.html#primitiveLocalDateTime", "kind" : "implicit object"}, {"label" : "primitiveBigInt", "tail" : "", "member" : "tofu.data.derived.Merge.primitiveBigInt", "link" : "tofu\/data\/derived\/Merge$.html#primitiveBigInt", "kind" : "implicit object"}, {"label" : "primitiveBigDecimal", "tail" : "", "member" : "tofu.data.derived.Merge.primitiveBigDecimal", "link" : "tofu\/data\/derived\/Merge$.html#primitiveBigDecimal", "kind" : "implicit object"}, {"label" : "primitiveUnit", "tail" : "", "member" : "tofu.data.derived.Merge.primitiveUnit", "link" : "tofu\/data\/derived\/Merge$.html#primitiveUnit", "kind" : "implicit object"}, {"label" : "primitiveDouble", "tail" : "", "member" : "tofu.data.derived.Merge.primitiveDouble", "link" : "tofu\/data\/derived\/Merge$.html#primitiveDouble", "kind" : "implicit object"}, {"label" : "primitiveFloat", "tail" : "", "member" : "tofu.data.derived.Merge.primitiveFloat", "link" : "tofu\/data\/derived\/Merge$.html#primitiveFloat", "kind" : "implicit object"}, {"label" : "primitiveChar", "tail" : "", "member" : "tofu.data.derived.Merge.primitiveChar", "link" : "tofu\/data\/derived\/Merge$.html#primitiveChar", "kind" : "implicit object"}, {"label" : "primitiveLong", "tail" : "", "member" : "tofu.data.derived.Merge.primitiveLong", "link" : "tofu\/data\/derived\/Merge$.html#primitiveLong", "kind" : "implicit object"}, {"label" : "primitiveInt", "tail" : "", "member" : "tofu.data.derived.Merge.primitiveInt", "link" : "tofu\/data\/derived\/Merge$.html#primitiveInt", "kind" : "implicit object"}, {"label" : "primitiveShort", "tail" : "", "member" : "tofu.data.derived.Merge.primitiveShort", "link" : "tofu\/data\/derived\/Merge$.html#primitiveShort", "kind" : "implicit object"}, {"label" : "primitiveByte", "tail" : "", "member" : "tofu.data.derived.Merge.primitiveByte", "link" : "tofu\/data\/derived\/Merge$.html#primitiveByte", "kind" : "implicit object"}, {"label" : "Primitive", "tail" : "", "member" : "tofu.data.derived.Merge.Primitive", "link" : "tofu\/data\/derived\/Merge$.html#Primitive[A]extendsAnyRef", "kind" : "sealed class"}, {"label" : "primitiveInstance", "tail" : "(arg0: Primitive[A]): Merge[A]", "member" : "tofu.data.derived.Merge.primitiveInstance", "link" : "tofu\/data\/derived\/Merge$.html#primitiveInstance[A](implicitevidence$1:tofu.data.derived.Merge.Primitive[A]):tofu.data.derived.Merge[A]", "kind" : "implicit def"}, {"label" : "optionInstance", "tail" : "(m: Merge[A]): Merge[Option[A]]", "member" : "tofu.data.derived.Merge.optionInstance", "link" : "tofu\/data\/derived\/Merge$.html#optionInstance[A](implicitm:tofu.data.derived.Merge[A]):tofu.data.derived.Merge[Option[A]]", "kind" : "implicit def"}, {"label" : "instance", "tail" : "(): Merge[A]", "member" : "tofu.data.derived.MergeInstances1.instance", "link" : "tofu\/data\/derived\/Merge$.html#instance[A]:tofu.data.derived.Merge[A]", "kind" : "implicit macro def"}, {"label" : "dispatch", "tail" : "(sealedTrait: SealedTrait[Typeclass, T]): Typeclass[T]", "member" : "tofu.data.derived.MergeInstances1.dispatch", "link" : "tofu\/data\/derived\/Merge$.html#dispatch[T](sealedTrait:magnolia.SealedTrait[MergeInstances1.this.Typeclass,T]):MergeInstances1.this.Typeclass[T]", "kind" : "def"}, {"label" : "combine", "tail" : "(caseClass: CaseClass[Typeclass, T]): Typeclass[T]", "member" : "tofu.data.derived.MergeInstances1.combine", "link" : "tofu\/data\/derived\/Merge$.html#combine[T](caseClass:magnolia.CaseClass[MergeInstances1.this.Typeclass,T]):MergeInstances1.this.Typeclass[T]", "kind" : "def"}, {"label" : "Typeclass", "tail" : "", "member" : "tofu.data.derived.MergeInstances1.Typeclass", "link" : "tofu\/data\/derived\/Merge$.html#Typeclass[A]=tofu.data.derived.Merge[A]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/data\/derived\/Merge$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/data\/derived\/Merge$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/data\/derived\/Merge$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/data\/derived\/Merge$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/data\/derived\/Merge$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/data\/derived\/Merge$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/data\/derived\/Merge$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/data\/derived\/Merge$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/data\/derived\/Merge$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/data\/derived\/Merge$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/data\/derived\/Merge$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/data\/derived\/Merge$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/data\/derived\/Merge$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/data\/derived\/Merge$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/data\/derived\/Merge$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/data\/derived\/Merge$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/data\/derived\/Merge$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/data\/derived\/Merge$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/data\/derived\/Merge$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/data\/derived\/Merge.html", "kind" : "trait", "members_trait" : [{"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "tofu\/data\/derived\/Merge.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/data\/derived\/Merge.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/data\/derived\/Merge.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "tofu\/data\/derived\/Merge.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "tofu\/data\/derived\/Merge.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "tofu\/data\/derived\/Merge.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "tofu\/data\/derived\/Merge.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "tofu\/data\/derived\/Merge.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "merge", "tail" : "(a: A, b: A): A", "member" : "tofu.data.derived.Merge.merge", "link" : "tofu\/data\/derived\/Merge.html#merge(a:A,b:A):A", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.Any.getClass", "link" : "tofu\/data\/derived\/Merge.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.data.derived.Merged", "shortDescription" : "", "object" : "tofu\/data\/derived\/Merged$.html", "members_object" : [{"label" : "mergedSemigroup", "tail" : "(arg0: Merge[A]): Semigroup[Merged[A]]", "member" : "tofu.data.derived.Merged.mergedSemigroup", "link" : "tofu\/data\/derived\/Merged$.html#mergedSemigroup[A](implicitevidence$2:tofu.data.derived.Merge[A]):cats.kernel.Semigroup[tofu.data.derived.Merged[A]]", "kind" : "implicit def"}, {"label" : "MergedOps", "tail" : "", "member" : "tofu.data.derived.Merged.MergedOps", "link" : "tofu\/data\/derived\/Merged$.html#MergedOps[A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "apply", "tail" : "(value: A): Mer[A]", "member" : "tofu.data.derived.Merged.apply", "link" : "tofu\/data\/derived\/Merged$.html#apply[A](value:A):tofu.data.derived.Merged.Mer[A]", "kind" : "def"}, {"label" : "Base", "tail" : "", "member" : "tofu.data.derived.Merged.Base", "link" : "tofu\/data\/derived\/Merged$.html#Base=Any{typeMergedOpaque}", "kind" : "type"}, {"label" : "OpaqueTag", "tail" : "", "member" : "tofu.data.derived.Merged.OpaqueTag", "link" : "tofu\/data\/derived\/Merged$.html#OpaqueTagextendsAny", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/data\/derived\/Merged$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/data\/derived\/Merged$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/data\/derived\/Merged$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/data\/derived\/Merged$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/data\/derived\/Merged$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/data\/derived\/Merged$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/data\/derived\/Merged$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/data\/derived\/Merged$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/data\/derived\/Merged$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/data\/derived\/Merged$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/data\/derived\/Merged$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/data\/derived\/Merged$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/data\/derived\/Merged$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/data\/derived\/Merged$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/data\/derived\/Merged$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/data\/derived\/Merged$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/data\/derived\/Merged$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/data\/derived\/Merged$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/data\/derived\/Merged$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"member" : "tofu.data.derived.Merged.Mer", "error" : "unsupported entity"}], "kind" : "object"}, {"name" : "tofu.data.derived.MergeInstances1", "trait" : "tofu\/data\/derived\/MergeInstances1.html", "kind" : "trait", "members_trait" : [{"label" : "instance", "tail" : "(): Merge[A]", "member" : "tofu.data.derived.MergeInstances1.instance", "link" : "tofu\/data\/derived\/MergeInstances1.html#instance[A]:tofu.data.derived.Merge[A]", "kind" : "implicit macro def"}, {"label" : "dispatch", "tail" : "(sealedTrait: SealedTrait[Typeclass, T]): Typeclass[T]", "member" : "tofu.data.derived.MergeInstances1.dispatch", "link" : "tofu\/data\/derived\/MergeInstances1.html#dispatch[T](sealedTrait:magnolia.SealedTrait[MergeInstances1.this.Typeclass,T]):MergeInstances1.this.Typeclass[T]", "kind" : "def"}, {"label" : "combine", "tail" : "(caseClass: CaseClass[Typeclass, T]): Typeclass[T]", "member" : "tofu.data.derived.MergeInstances1.combine", "link" : "tofu\/data\/derived\/MergeInstances1.html#combine[T](caseClass:magnolia.CaseClass[MergeInstances1.this.Typeclass,T]):MergeInstances1.this.Typeclass[T]", "kind" : "def"}, {"label" : "Typeclass", "tail" : "", "member" : "tofu.data.derived.MergeInstances1.Typeclass", "link" : "tofu\/data\/derived\/MergeInstances1.html#Typeclass[A]=tofu.data.derived.Merge[A]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/data\/derived\/MergeInstances1.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/data\/derived\/MergeInstances1.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/data\/derived\/MergeInstances1.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/data\/derived\/MergeInstances1.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/data\/derived\/MergeInstances1.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/data\/derived\/MergeInstances1.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/data\/derived\/MergeInstances1.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/data\/derived\/MergeInstances1.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/data\/derived\/MergeInstances1.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/data\/derived\/MergeInstances1.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/data\/derived\/MergeInstances1.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/data\/derived\/MergeInstances1.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/data\/derived\/MergeInstances1.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/data\/derived\/MergeInstances1.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/data\/derived\/MergeInstances1.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/data\/derived\/MergeInstances1.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/data\/derived\/MergeInstances1.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/data\/derived\/MergeInstances1.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/data\/derived\/MergeInstances1.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}], "tofu.lift" : [{"name" : "tofu.lift.IsoK", "object" : "tofu\/lift\/IsoK$.html", "members_object" : [{"label" : "id", "tail" : "(): IsoK[F, F]", "member" : "tofu.lift.IsoK.id", "link" : "tofu\/lift\/IsoK$.html#id[F[_]]:tofu.lift.IsoK[F,F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/lift\/IsoK$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/lift\/IsoK$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/lift\/IsoK$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/lift\/IsoK$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/lift\/IsoK$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/lift\/IsoK$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/lift\/IsoK$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/lift\/IsoK$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/lift\/IsoK$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/lift\/IsoK$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/lift\/IsoK$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/lift\/IsoK$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/lift\/IsoK$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/lift\/IsoK$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/lift\/IsoK$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/lift\/IsoK$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/lift\/IsoK$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/lift\/IsoK$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/lift\/IsoK$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/lift\/IsoK.html", "kind" : "trait", "members_trait" : [{"label" : "andThen", "tail" : "(that: IsoK[G, H]): IsoK[F, H]", "member" : "tofu.lift.IsoK.andThen", "link" : "tofu\/lift\/IsoK.html#andThen[H[_]](that:tofu.lift.IsoK[G,H]):tofu.lift.IsoK[F,H]", "kind" : "def"}, {"label" : "inverse", "tail" : "(): IsoK[G, F]", "member" : "tofu.lift.IsoK.inverse", "link" : "tofu\/lift\/IsoK.html#inverse:tofu.lift.IsoK[G,F]", "kind" : "def"}, {"label" : "fromF", "tail" : "(): ~>[G, F]", "member" : "tofu.lift.IsoK.fromF", "link" : "tofu\/lift\/IsoK.html#fromF:G~>F", "kind" : "def"}, {"label" : "tof", "tail" : "(): ~>[F, G]", "member" : "tofu.lift.IsoK.tof", "link" : "tofu\/lift\/IsoK.html#tof:F~>G", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/lift\/IsoK.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/lift\/IsoK.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/lift\/IsoK.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/lift\/IsoK.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/lift\/IsoK.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/lift\/IsoK.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/lift\/IsoK.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/lift\/IsoK.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/lift\/IsoK.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/lift\/IsoK.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/lift\/IsoK.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/lift\/IsoK.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/lift\/IsoK.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/lift\/IsoK.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/lift\/IsoK.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/lift\/IsoK.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/lift\/IsoK.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/lift\/IsoK.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/lift\/IsoK.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "from", "tail" : "(ga: G[A]): F[A]", "member" : "tofu.lift.IsoK.from", "link" : "tofu\/lift\/IsoK.html#from[A](ga:G[A]):F[A]", "kind" : "abstract def"}, {"label" : "to", "tail" : "(fa: F[A]): G[A]", "member" : "tofu.lift.IsoK.to", "link" : "tofu\/lift\/IsoK.html#to[A](fa:F[A]):G[A]", "kind" : "abstract def"}], "shortDescription" : "bidirectional transformation"}, {"name" : "tofu.lift.Lift", "object" : "tofu\/lift\/Lift$.html", "members_object" : [{"label" : "trans", "tail" : "(lift: Lift[F, G]): ~>[F, G]", "member" : "tofu.lift.Lift.trans", "link" : "tofu\/lift\/Lift$.html#trans[F[_],G[_]](implicitlift:tofu.lift.Lift[F,G]):F~>G", "kind" : "def"}, {"label" : "apply", "tail" : "(lift: Lift[F, G]): Lift[F, G]", "member" : "tofu.lift.Lift.apply", "link" : "tofu\/lift\/Lift$.html#apply[F[_],G[_]](implicitlift:tofu.lift.Lift[F,G]):tofu.lift.Lift[F,G]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/lift\/Lift$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/lift\/Lift$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/lift\/Lift$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/lift\/Lift$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/lift\/Lift$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/lift\/Lift$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/lift\/Lift$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/lift\/Lift$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/lift\/Lift$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/lift\/Lift$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/lift\/Lift$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/lift\/Lift$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/lift\/Lift$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/lift\/Lift$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/lift\/Lift$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/lift\/Lift$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/lift\/Lift$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/lift\/Lift$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/lift\/Lift$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/lift\/Lift.html", "kind" : "trait", "members_trait" : [{"label" : "liftF", "tail" : "(): FunctionK[F, G]", "member" : "tofu.lift.Lift.liftF", "link" : "tofu\/lift\/Lift.html#liftF:cats.arrow.FunctionK[F,G]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/lift\/Lift.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/lift\/Lift.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/lift\/Lift.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/lift\/Lift.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/lift\/Lift.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/lift\/Lift.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/lift\/Lift.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/lift\/Lift.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/lift\/Lift.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/lift\/Lift.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/lift\/Lift.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/lift\/Lift.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/lift\/Lift.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/lift\/Lift.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/lift\/Lift.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/lift\/Lift.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/lift\/Lift.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/lift\/Lift.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/lift\/Lift.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "lift", "tail" : "(fa: F[A]): G[A]", "member" : "tofu.lift.Lift.lift", "link" : "tofu\/lift\/Lift.html#lift[A](fa:F[A]):G[A]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.lift.Unlift", "object" : "tofu\/lift\/Unlift$.html", "members_object" : [{"label" : "byIso", "tail" : "(iso: IsoK[F, G])(arg0: Applicative[G]): Unlift[F, G]", "member" : "tofu.lift.Unlift.byIso", "link" : "tofu\/lift\/Unlift$.html#byIso[F[_],G[_]](iso:tofu.lift.IsoK[F,G])(implicitevidence$4:cats.Applicative[G]):tofu.lift.Unlift[F,G]", "kind" : "def"}, {"label" : "reader", "tail" : "(arg0: Applicative[F]): Unlift[F, [γ$0$]Kleisli[F, R, γ$0$]]", "member" : "tofu.lift.Unlift.reader", "link" : "tofu\/lift\/Unlift$.html#reader[F[_],R](implicitevidence$3:cats.Applicative[F]):tofu.lift.Unlift[F,[γ$0$]cats.data.Kleisli[F,R,γ$0$]]", "kind" : "implicit def"}, {"label" : "identity", "tail" : "(arg0: Applicative[F]): Unlift[F, F]", "member" : "tofu.lift.Unlift.identity", "link" : "tofu\/lift\/Unlift$.html#identity[F[_]](implicitevidence$2:cats.Applicative[F]):tofu.lift.Unlift[F,F]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/lift\/Unlift$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/lift\/Unlift$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/lift\/Unlift$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/lift\/Unlift$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/lift\/Unlift$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/lift\/Unlift$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/lift\/Unlift$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/lift\/Unlift$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/lift\/Unlift$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/lift\/Unlift$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/lift\/Unlift$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/lift\/Unlift$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/lift\/Unlift$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/lift\/Unlift$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/lift\/Unlift$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/lift\/Unlift$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/lift\/Unlift$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/lift\/Unlift$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/lift\/Unlift$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/lift\/Unlift.html", "kind" : "trait", "members_trait" : [{"label" : "andThen", "tail" : "(ugh: Unlift[G, H])(arg0: Monad[H]): Unlift[F, H]", "member" : "tofu.lift.Unlift.andThen", "link" : "tofu\/lift\/Unlift.html#andThen[H[_]](ugh:tofu.lift.Unlift[G,H])(implicitevidence$1:cats.Monad[H]):tofu.lift.Unlift[F,H]", "kind" : "def"}, {"label" : "subIso", "tail" : "(G: Functor[G]): G[IsoK[F, G]]", "member" : "tofu.lift.Unlift.subIso", "link" : "tofu\/lift\/Unlift.html#subIso(implicitG:cats.Functor[G]):G[tofu.lift.IsoK[F,G]]", "kind" : "def"}, {"label" : "liftF", "tail" : "(): FunctionK[F, G]", "member" : "tofu.lift.Lift.liftF", "link" : "tofu\/lift\/Unlift.html#liftF:cats.arrow.FunctionK[F,G]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/lift\/Unlift.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/lift\/Unlift.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/lift\/Unlift.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/lift\/Unlift.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/lift\/Unlift.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/lift\/Unlift.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/lift\/Unlift.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/lift\/Unlift.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/lift\/Unlift.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/lift\/Unlift.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/lift\/Unlift.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/lift\/Unlift.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/lift\/Unlift.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/lift\/Unlift.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/lift\/Unlift.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/lift\/Unlift.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/lift\/Unlift.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/lift\/Unlift.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/lift\/Unlift.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "unlift", "tail" : "(): G[~>[G, F]]", "member" : "tofu.lift.Unlift.unlift", "link" : "tofu\/lift\/Unlift.html#unlift:G[G~>F]", "kind" : "abstract def"}, {"label" : "lift", "tail" : "(fa: F[A]): G[A]", "member" : "tofu.lift.Unlift.lift", "link" : "tofu\/lift\/Unlift.html#lift[A](fa:F[A]):G[A]", "kind" : "abstract def"}], "shortDescription" : "embedded transformationcan be used instead of direct F ~> Gespecially useful Unlift[_[_], IO] as replacement for Effect typeclass"}], "tofu" : [{"name" : "tofu.Context", "object" : "tofu\/Context$.html", "members_object" : [{"label" : "const", "tail" : "(c: C)(arg0: Applicative[F]): HasContext[F, C]", "member" : "tofu.Context.const", "link" : "tofu\/Context$.html#const[F[_],C](c:C)(implicitevidence$1:cats.Applicative[F]):tofu.HasContext[F,C]", "kind" : "def"}, {"label" : "Aux", "tail" : "", "member" : "tofu.Context.Aux", "link" : "tofu\/Context$.html#Aux[F[_],C]=tofu.HasContext[F,C]", "kind" : "type"}, {"label" : "apply", "tail" : "(ctx: Context[F]): HasContext[F, Ctx]", "member" : "tofu.Context.apply", "link" : "tofu\/Context$.html#apply[F[_]](implicitctx:tofu.Context[F]):tofu.HasContext[F,ctx.Ctx]", "kind" : "def"}, {"label" : "readerTContext", "tail" : "(arg0: Applicative[F]): Context[[γ$0$]Kleisli[F, C, γ$0$]] { type Ctx = C }", "member" : "tofu.RunContextInstances.readerTContext", "link" : "tofu\/Context$.html#readerTContext[C,F[_]](implicitevidence$2:cats.Applicative[F]):TCA[[γ$0$]cats.data.Kleisli[F,C,γ$0$],F,C]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/Context$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/Context$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/Context$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/Context$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/Context$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/Context$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/Context$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Context$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Context$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Context$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/Context$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/Context$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/Context$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/Context$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/Context$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/Context$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/Context$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/Context$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/Context$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/Context.html", "kind" : "trait", "members_trait" : [{"label" : "extract", "tail" : "(extr: Extract[Ctx, A]): HasContext[F, A]", "member" : "tofu.Context.extract", "link" : "tofu\/Context.html#extract[A](extr:tofu.optics.Extract[Context.this.Ctx,A]):tofu.HasContext[F,A]", "kind" : "def"}, {"label" : "askF", "tail" : "(f: (Ctx) => F[A])(F: Monad[F]): F[A]", "member" : "tofu.Context.askF", "link" : "tofu\/Context.html#askF[A](f:Context.this.Ctx=>F[A])(implicitF:cats.Monad[F]):F[A]", "kind" : "def"}, {"label" : "ask", "tail" : "(f: (Ctx) => A): F[A]", "member" : "tofu.Context.ask", "link" : "tofu\/Context.html#ask[A](f:Context.this.Ctx=>A):F[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/Context.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/Context.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/Context.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/Context.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/Context.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/Context.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/Context.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Context.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Context.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Context.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/Context.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/Context.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/Context.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/Context.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/Context.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/Context.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/Context.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/Context.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/Context.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "context", "tail" : "(): F[Ctx]", "member" : "tofu.Context.context", "link" : "tofu\/Context.html#context:F[Context.this.Ctx]", "kind" : "abstract def"}, {"member" : "tofu.Context.Ctx", "error" : "unsupported entity"}, {"label" : "functor", "tail" : "(): Functor[F]", "member" : "tofu.Context.functor", "link" : "tofu\/Context.html#functor:cats.Functor[F]", "kind" : "abstract def"}], "shortDescription" : "lightweight version of ApplicativeAsk"}, {"name" : "tofu.ContextInstances", "trait" : "tofu\/ContextInstances.html", "kind" : "trait", "members_trait" : [{"label" : "readerTContext", "tail" : "(arg0: Applicative[F]): Context[[γ$0$]Kleisli[F, C, γ$0$]] { type Ctx = C }", "member" : "tofu.RunContextInstances.readerTContext", "link" : "tofu\/ContextInstances.html#readerTContext[C,F[_]](implicitevidence$2:cats.Applicative[F]):TCA[[γ$0$]cats.data.Kleisli[F,C,γ$0$],F,C]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/ContextInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/ContextInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/ContextInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/ContextInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/ContextInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/ContextInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/ContextInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/ContextInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/ContextInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/ContextInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/ContextInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/ContextInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/ContextInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/ContextInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/ContextInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/ContextInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/ContextInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/ContextInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/ContextInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "tofu.ErrorInstances", "trait" : "tofu\/ErrorInstances.html", "kind" : "trait", "members_trait" : [{"label" : "readerTErrors", "tail" : "(F: Errors[F, E]): Errors[[γ$5$]Kleisli[F, R, γ$5$], E]", "member" : "tofu.ErrorInstances.readerTErrors", "link" : "tofu\/ErrorInstances.html#readerTErrors[F[_],R,E](implicitF:tofu.Errors[F,E]):tofu.Errors[[γ$5$]cats.data.Kleisli[F,R,γ$5$],E]", "kind" : "implicit final def"}, {"label" : "errorPrismatic", "tail" : "(e: Errors[F, E], prism: Subset[E, E1]): Errors[F, E1]", "member" : "tofu.ErrorInstances.errorPrismatic", "link" : "tofu\/ErrorInstances.html#errorPrismatic[F[_],E,E1](implicite:tofu.Errors[F,E],implicitprism:tofu.optics.Subset[E,E1]):tofu.Errors[F,E1]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/ErrorInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/ErrorInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/ErrorInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/ErrorInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/ErrorInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/ErrorInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/ErrorInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/ErrorInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/ErrorInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/ErrorInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/ErrorInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/ErrorInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/ErrorInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/ErrorInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/ErrorInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/ErrorInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/ErrorInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/ErrorInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/ErrorInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "tofu.Errors", "object" : "tofu\/Errors$.html", "members_object" : [{"label" : "errorByCatsError", "tail" : "(arg0: ApplicativeError[F, E], arg1: ClassTag[E1], arg2: <:<[E1, E]): Errors[F, E1]", "member" : "tofu.ErrorsInstanceChain.errorByCatsError", "link" : "tofu\/Errors$.html#errorByCatsError[F[_],E,E1](implicitevidence$1:cats.ApplicativeError[F,E],implicitevidence$2:scala.reflect.ClassTag[E1],implicitevidence$3:E1<:<E):TC[F,E1]", "kind" : "implicit final def"}, {"label" : "apply", "tail" : "(instance: Errors[F, A]): Errors[F, A]", "member" : "tofu.internal.DataEffectComp.apply", "link" : "tofu\/Errors$.html#apply[F[_],A](implicitinstance:TC[F,A]):TC[F,A]", "kind" : "def"}, {"label" : "readerTErrors", "tail" : "(F: Errors[F, E]): Errors[[γ$5$]Kleisli[F, R, γ$5$], E]", "member" : "tofu.ErrorInstances.readerTErrors", "link" : "tofu\/Errors$.html#readerTErrors[F[_],R,E](implicitF:tofu.Errors[F,E]):tofu.Errors[[γ$5$]cats.data.Kleisli[F,R,γ$5$],E]", "kind" : "implicit final def"}, {"label" : "errorPrismatic", "tail" : "(e: Errors[F, E], prism: Subset[E, E1]): Errors[F, E1]", "member" : "tofu.ErrorInstances.errorPrismatic", "link" : "tofu\/Errors$.html#errorPrismatic[F[_],E,E1](implicite:tofu.Errors[F,E],implicitprism:tofu.optics.Subset[E,E1]):tofu.Errors[F,E1]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/Errors$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/Errors$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/Errors$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/Errors$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/Errors$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/Errors$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/Errors$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Errors$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Errors$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Errors$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/Errors$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/Errors$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/Errors$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/Errors$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/Errors$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/Errors$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/Errors$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/Errors$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/Errors$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/Errors.html", "kind" : "trait", "members_trait" : [{"label" : "handleWith", "tail" : "(fa: F[A])(f: (E) => F[A]): F[A]", "member" : "tofu.Handle.handleWith", "link" : "tofu\/Errors.html#handleWith[A](fa:F[A])(f:E=>F[A]):F[A]", "kind" : "def"}, {"label" : "restoreWith", "tail" : "(fa: F[A])(ra: => F[A]): F[A]", "member" : "tofu.Handle.restoreWith", "link" : "tofu\/Errors.html#restoreWith[A](fa:F[A])(ra:=>F[A]):F[A]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(fa: F[A])(pf: PartialFunction[E, F[A]]): F[A]", "member" : "tofu.Handle.recoverWith", "link" : "tofu\/Errors.html#recoverWith[A](fa:F[A])(pf:PartialFunction[E,F[A]]):F[A]", "kind" : "def"}, {"label" : "tryHandle", "tail" : "(fa: F[A])(f: (E) => Option[A])(F: Applicative[F]): F[A]", "member" : "tofu.Handle.tryHandle", "link" : "tofu\/Errors.html#tryHandle[A](fa:F[A])(f:E=>Option[A])(implicitF:cats.Applicative[F]):F[A]", "kind" : "def"}, {"label" : "recover", "tail" : "(fa: F[A])(pf: PartialFunction[E, A])(F: Applicative[F]): F[A]", "member" : "tofu.Handle.recover", "link" : "tofu\/Errors.html#recover[A](fa:F[A])(pf:PartialFunction[E,A])(implicitF:cats.Applicative[F]):F[A]", "kind" : "def"}, {"label" : "handle", "tail" : "(fa: F[A])(f: (E) => A)(G: Applicative[F]): F[A]", "member" : "tofu.HandleTo.handle", "link" : "tofu\/Errors.html#handle[A](fa:F[A])(f:E=>A)(implicitG:cats.Applicative[G]):G[A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(fa: F[A])(F: Functor[F], G: Applicative[F]): F[Either[E, A]]", "member" : "tofu.HandleTo.attempt", "link" : "tofu\/Errors.html#attempt[A](fa:F[A])(implicitF:cats.Functor[F],implicitG:cats.Applicative[G]):G[Either[E,A]]", "kind" : "def"}, {"label" : "liftF", "tail" : "(): FunctionK[F, F]", "member" : "tofu.lift.Lift.liftF", "link" : "tofu\/Errors.html#liftF:cats.arrow.FunctionK[F,G]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/Errors.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/Errors.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/Errors.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/Errors.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/Errors.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/Errors.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/Errors.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Errors.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Errors.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Errors.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/Errors.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/Errors.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/Errors.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/Errors.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/Errors.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/Errors.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/Errors.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/Errors.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/Errors.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "tryHandleWith", "tail" : "(fa: F[A])(f: (E) => Option[F[A]]): F[A]", "member" : "tofu.Handle.tryHandleWith", "link" : "tofu\/Errors.html#tryHandleWith[A](fa:F[A])(f:E=>Option[F[A]]):F[A]", "kind" : "abstract def"}, {"label" : "restore", "tail" : "(fa: F[A]): F[Option[A]]", "member" : "tofu.RestoreTo.restore", "link" : "tofu\/Errors.html#restore[A](fa:F[A]):G[Option[A]]", "kind" : "abstract def"}, {"label" : "lift", "tail" : "(fa: F[A]): F[A]", "member" : "tofu.lift.Lift.lift", "link" : "tofu\/Errors.html#lift[A](fa:F[A]):G[A]", "kind" : "abstract def"}, {"label" : "raise", "tail" : "(err: E): F[A]", "member" : "tofu.Raise.raise", "link" : "tofu\/Errors.html#raise[A](err:E):F[A]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.ErrorsInstanceChain", "trait" : "tofu\/ErrorsInstanceChain.html", "kind" : "trait", "members_trait" : [{"label" : "errorByCatsError", "tail" : "(arg0: ApplicativeError[F, E], arg1: ClassTag[E1], arg2: <:<[E1, E]): TC[F, E1]", "member" : "tofu.ErrorsInstanceChain.errorByCatsError", "link" : "tofu\/ErrorsInstanceChain.html#errorByCatsError[F[_],E,E1](implicitevidence$1:cats.ApplicativeError[F,E],implicitevidence$2:scala.reflect.ClassTag[E1],implicitevidence$3:E1<:<E):TC[F,E1]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/ErrorsInstanceChain.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/ErrorsInstanceChain.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/ErrorsInstanceChain.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/ErrorsInstanceChain.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/ErrorsInstanceChain.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/ErrorsInstanceChain.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/ErrorsInstanceChain.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/ErrorsInstanceChain.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/ErrorsInstanceChain.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/ErrorsInstanceChain.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/ErrorsInstanceChain.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/ErrorsInstanceChain.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/ErrorsInstanceChain.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/ErrorsInstanceChain.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/ErrorsInstanceChain.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/ErrorsInstanceChain.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/ErrorsInstanceChain.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/ErrorsInstanceChain.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/ErrorsInstanceChain.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "tofu.ErrorsTo", "object" : "tofu\/ErrorsTo$.html", "members_object" : [{"label" : "optionTIntance", "tail" : ": ErrorsTo[Option, Id, Unit]", "member" : "tofu.ErrorsToInstanceChain.optionTIntance", "link" : "tofu\/ErrorsTo$.html#optionTIntance:TC[Option,cats.Id,Unit]", "kind" : "implicit final val"}, {"label" : "eitherIntance", "tail" : "(): ErrorsTo[[β$2$]Either[E, β$2$], Id, E]", "member" : "tofu.ErrorsToInstanceChain.eitherIntance", "link" : "tofu\/ErrorsTo$.html#eitherIntance[E]:TC[[β$2$]scala.util.Either[E,β$2$],cats.Id,E]", "kind" : "implicit final def"}, {"label" : "optionTIntance", "tail" : "(F: Monad[F]): ErrorsTo[[β$1$]OptionT[F, β$1$], F, Unit]", "member" : "tofu.ErrorsToInstanceChain.optionTIntance", "link" : "tofu\/ErrorsTo$.html#optionTIntance[F[_]](implicitF:cats.Monad[F]):TC[[β$1$]cats.data.OptionT[F,β$1$],F,Unit]", "kind" : "implicit final def"}, {"label" : "eitherTIntance", "tail" : "(F: Monad[F]): ErrorsTo[[γ$0$]EitherT[F, E, γ$0$], F, E]", "member" : "tofu.ErrorsToInstanceChain.eitherTIntance", "link" : "tofu\/ErrorsTo$.html#eitherTIntance[F[_],E](implicitF:cats.Monad[F]):TC[[γ$0$]cats.data.EitherT[F,E,γ$0$],F,E]", "kind" : "implicit final def"}, {"label" : "errorByCatsError", "tail" : "(arg0: ApplicativeError[F, E], arg1: ClassTag[E1], arg2: <:<[E1, E]): ErrorsTo[F, F, E1]", "member" : "tofu.ErrorsInstanceChain.errorByCatsError", "link" : "tofu\/ErrorsTo$.html#errorByCatsError[F[_],E,E1](implicitevidence$1:cats.ApplicativeError[F,E],implicitevidence$2:scala.reflect.ClassTag[E1],implicitevidence$3:E1<:<E):TC[F,E1]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/ErrorsTo$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/ErrorsTo$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/ErrorsTo$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/ErrorsTo$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/ErrorsTo$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/ErrorsTo$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/ErrorsTo$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/ErrorsTo$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/ErrorsTo$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/ErrorsTo$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/ErrorsTo$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/ErrorsTo$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/ErrorsTo$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/ErrorsTo$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/ErrorsTo$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/ErrorsTo$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/ErrorsTo$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/ErrorsTo$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/ErrorsTo$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/ErrorsTo.html", "kind" : "trait", "members_trait" : [{"label" : "handle", "tail" : "(fa: F[A])(f: (E) => A)(G: Applicative[G]): G[A]", "member" : "tofu.HandleTo.handle", "link" : "tofu\/ErrorsTo.html#handle[A](fa:F[A])(f:E=>A)(implicitG:cats.Applicative[G]):G[A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(fa: F[A])(F: Functor[F], G: Applicative[G]): G[Either[E, A]]", "member" : "tofu.HandleTo.attempt", "link" : "tofu\/ErrorsTo.html#attempt[A](fa:F[A])(implicitF:cats.Functor[F],implicitG:cats.Applicative[G]):G[Either[E,A]]", "kind" : "def"}, {"label" : "liftF", "tail" : "(): FunctionK[G, F]", "member" : "tofu.lift.Lift.liftF", "link" : "tofu\/ErrorsTo.html#liftF:cats.arrow.FunctionK[F,G]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/ErrorsTo.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/ErrorsTo.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/ErrorsTo.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/ErrorsTo.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/ErrorsTo.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/ErrorsTo.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/ErrorsTo.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/ErrorsTo.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/ErrorsTo.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/ErrorsTo.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/ErrorsTo.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/ErrorsTo.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/ErrorsTo.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/ErrorsTo.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/ErrorsTo.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/ErrorsTo.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/ErrorsTo.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/ErrorsTo.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/ErrorsTo.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "handleWith", "tail" : "(fa: F[A])(f: (E) => G[A]): G[A]", "member" : "tofu.HandleTo.handleWith", "link" : "tofu\/ErrorsTo.html#handleWith[A](fa:F[A])(f:E=>G[A]):G[A]", "kind" : "abstract def"}, {"label" : "restore", "tail" : "(fa: F[A]): G[Option[A]]", "member" : "tofu.RestoreTo.restore", "link" : "tofu\/ErrorsTo.html#restore[A](fa:F[A]):G[Option[A]]", "kind" : "abstract def"}, {"label" : "lift", "tail" : "(fa: G[A]): F[A]", "member" : "tofu.lift.Lift.lift", "link" : "tofu\/ErrorsTo.html#lift[A](fa:F[A]):G[A]", "kind" : "abstract def"}, {"label" : "raise", "tail" : "(err: E): F[A]", "member" : "tofu.Raise.raise", "link" : "tofu\/ErrorsTo.html#raise[A](err:E):F[A]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.ErrorsToInstanceChain", "trait" : "tofu\/ErrorsToInstanceChain.html", "kind" : "trait", "members_trait" : [{"label" : "optionTIntance", "tail" : ": TC[Option, Id, Unit]", "member" : "tofu.ErrorsToInstanceChain.optionTIntance", "link" : "tofu\/ErrorsToInstanceChain.html#optionTIntance:TC[Option,cats.Id,Unit]", "kind" : "implicit final val"}, {"label" : "eitherIntance", "tail" : "(): TC[[β$2$]Either[E, β$2$], Id, E]", "member" : "tofu.ErrorsToInstanceChain.eitherIntance", "link" : "tofu\/ErrorsToInstanceChain.html#eitherIntance[E]:TC[[β$2$]scala.util.Either[E,β$2$],cats.Id,E]", "kind" : "implicit final def"}, {"label" : "optionTIntance", "tail" : "(F: Monad[F]): TC[[β$1$]OptionT[F, β$1$], F, Unit]", "member" : "tofu.ErrorsToInstanceChain.optionTIntance", "link" : "tofu\/ErrorsToInstanceChain.html#optionTIntance[F[_]](implicitF:cats.Monad[F]):TC[[β$1$]cats.data.OptionT[F,β$1$],F,Unit]", "kind" : "implicit final def"}, {"label" : "eitherTIntance", "tail" : "(F: Monad[F]): TC[[γ$0$]EitherT[F, E, γ$0$], F, E]", "member" : "tofu.ErrorsToInstanceChain.eitherTIntance", "link" : "tofu\/ErrorsToInstanceChain.html#eitherTIntance[F[_],E](implicitF:cats.Monad[F]):TC[[γ$0$]cats.data.EitherT[F,E,γ$0$],F,E]", "kind" : "implicit final def"}, {"label" : "errorByCatsError", "tail" : "(arg0: ApplicativeError[F, E], arg1: ClassTag[E1], arg2: <:<[E1, E]): TC[F, F, E1]", "member" : "tofu.ErrorsInstanceChain.errorByCatsError", "link" : "tofu\/ErrorsToInstanceChain.html#errorByCatsError[F[_],E,E1](implicitevidence$1:cats.ApplicativeError[F,E],implicitevidence$2:scala.reflect.ClassTag[E1],implicitevidence$3:E1<:<E):TC[F,E1]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/ErrorsToInstanceChain.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/ErrorsToInstanceChain.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/ErrorsToInstanceChain.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/ErrorsToInstanceChain.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/ErrorsToInstanceChain.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/ErrorsToInstanceChain.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/ErrorsToInstanceChain.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/ErrorsToInstanceChain.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/ErrorsToInstanceChain.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/ErrorsToInstanceChain.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/ErrorsToInstanceChain.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/ErrorsToInstanceChain.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/ErrorsToInstanceChain.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/ErrorsToInstanceChain.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/ErrorsToInstanceChain.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/ErrorsToInstanceChain.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/ErrorsToInstanceChain.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/ErrorsToInstanceChain.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/ErrorsToInstanceChain.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "tofu.Execute", "object" : "tofu\/Execute$.html", "members_object" : [{"label" : "ops", "tail" : "", "member" : "tofu.Execute.ops", "link" : "tofu\/Execute$.html#ops", "kind" : "object"}, {"label" : "AllOps", "tail" : "", "member" : "tofu.Execute.AllOps", "link" : "tofu\/Execute$.html#AllOps[F[_],A]extendsExecute.Ops[F,A]", "kind" : "trait"}, {"label" : "nonInheritedOps", "tail" : "", "member" : "tofu.Execute.nonInheritedOps", "link" : "tofu\/Execute$.html#nonInheritedOps", "kind" : "object"}, {"label" : "ToExecuteOps", "tail" : "", "member" : "tofu.Execute.ToExecuteOps", "link" : "tofu\/Execute$.html#ToExecuteOpsextendsAnyRef", "kind" : "trait"}, {"label" : "Ops", "tail" : "", "member" : "tofu.Execute.Ops", "link" : "tofu\/Execute$.html#Ops[F[_],A]extendsAnyRef", "kind" : "trait"}, {"label" : "apply", "tail" : "(instance: Execute[F]): Execute[F]", "member" : "tofu.Execute.apply", "link" : "tofu\/Execute$.html#apply[F[_]](implicitinstance:tofu.Execute[F]):tofu.Execute[F]", "kind" : "def"}, {"label" : "asyncExecute", "tail" : "(ec: ExecutionContext, cs: ContextShift[F], asyncF: Async[F]): Execute[F]", "member" : "tofu.Execute.asyncExecute", "link" : "tofu\/Execute$.html#asyncExecute[F[_]](implicitec:scala.concurrent.ExecutionContext,implicitcs:cats.effect.ContextShift[F],implicitasyncF:cats.effect.Async[F]):tofu.Execute[F]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/Execute$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/Execute$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/Execute$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/Execute$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/Execute$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/Execute$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/Execute$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Execute$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Execute$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Execute$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/Execute$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/Execute$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/Execute$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/Execute$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/Execute$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/Execute$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/Execute$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/Execute$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/Execute$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/Execute.html", "kind" : "trait", "members_trait" : [{"label" : "deferFuture", "tail" : "(f: => Future[A]): F[A]", "member" : "tofu.Execute.deferFuture", "link" : "tofu\/Execute.html#deferFuture[A](f:=>scala.concurrent.Future[A]):F[A]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "tofu\/Execute.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/Execute.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/Execute.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "tofu\/Execute.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "tofu\/Execute.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "tofu\/Execute.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "tofu\/Execute.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "tofu\/Execute.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "deferFutureAction", "tail" : "(f: (ExecutionContext) => Future[A]): F[A]", "member" : "tofu.Execute.deferFutureAction", "link" : "tofu\/Execute.html#deferFutureAction[A](f:scala.concurrent.ExecutionContext=>scala.concurrent.Future[A]):F[A]", "kind" : "abstract def"}, {"label" : "executionContext", "tail" : "(): F[ExecutionContext]", "member" : "tofu.Execute.executionContext", "link" : "tofu\/Execute.html#executionContext:F[scala.concurrent.ExecutionContext]", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.Any.getClass", "link" : "tofu\/Execute.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.Finally", "object" : "tofu\/Finally$.html", "members_object" : [{"label" : "fromBracket", "tail" : "(F: Bracket[F, E]): Finally[F, [β$0$]ExitCase[E]]", "member" : "tofu.FinallyInstanceChain.fromBracket", "link" : "tofu\/Finally$.html#fromBracket[F[_],E](implicitF:cats.effect.Bracket[F,E]):T[F,[β$0$]cats.effect.ExitCase[E]]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/Finally$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/Finally$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/Finally$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/Finally$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/Finally$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/Finally$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/Finally$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Finally$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Finally$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Finally$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/Finally$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/Finally$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/Finally$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/Finally$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/Finally$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/Finally$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/Finally$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/Finally$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/Finally$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/Finally.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/Finally.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/Finally.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/Finally.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/Finally.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/Finally.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/Finally.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/Finally.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Finally.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Finally.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Finally.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/Finally.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/Finally.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/Finally.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/Finally.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/Finally.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/Finally.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/Finally.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/Finally.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/Finally.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "finallyCase", "tail" : "(init: F[A])(action: (A) => F[B])(release: (A, Exit[B]) => F[C]): F[B]", "member" : "tofu.Finally.finallyCase", "link" : "tofu\/Finally.html#finallyCase[A,B,C](init:F[A])(action:A=>F[B])(release:(A,Exit[B])=>F[C]):F[B]", "kind" : "abstract def"}, {"label" : "bracket", "tail" : "(init: F[A])(action: (A) => F[B])(release: (A, Boolean) => F[C]): F[B]", "member" : "tofu.Guarantee.bracket", "link" : "tofu\/Finally.html#bracket[A,B,C](init:F[A])(action:A=>F[B])(release:(A,Boolean)=>F[C]):F[B]", "kind" : "abstract def"}], "shortDescription" : "Bracket-like typeclass allowing to match exit of the process"}, {"name" : "tofu.FinallyInstanceChain", "trait" : "tofu\/FinallyInstanceChain.html", "kind" : "trait", "members_trait" : [{"label" : "fromBracket", "tail" : "(F: Bracket[F, E]): T[F, [β$0$]ExitCase[E]]", "member" : "tofu.FinallyInstanceChain.fromBracket", "link" : "tofu\/FinallyInstanceChain.html#fromBracket[F[_],E](implicitF:cats.effect.Bracket[F,E]):T[F,[β$0$]cats.effect.ExitCase[E]]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/FinallyInstanceChain.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/FinallyInstanceChain.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/FinallyInstanceChain.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/FinallyInstanceChain.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/FinallyInstanceChain.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/FinallyInstanceChain.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/FinallyInstanceChain.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/FinallyInstanceChain.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/FinallyInstanceChain.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/FinallyInstanceChain.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/FinallyInstanceChain.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/FinallyInstanceChain.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/FinallyInstanceChain.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/FinallyInstanceChain.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/FinallyInstanceChain.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/FinallyInstanceChain.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/FinallyInstanceChain.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/FinallyInstanceChain.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/FinallyInstanceChain.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "tofu.Fire", "object" : "tofu\/Fire$.html", "members_object" : [{"label" : "ops", "tail" : "", "member" : "tofu.Fire.ops", "link" : "tofu\/Fire$.html#ops", "kind" : "object"}, {"label" : "AllOps", "tail" : "", "member" : "tofu.Fire.AllOps", "link" : "tofu\/Fire$.html#AllOps[F[_],A]extendsFire.Ops[F,A]", "kind" : "trait"}, {"label" : "nonInheritedOps", "tail" : "", "member" : "tofu.Fire.nonInheritedOps", "link" : "tofu\/Fire$.html#nonInheritedOps", "kind" : "object"}, {"label" : "ToFireOps", "tail" : "", "member" : "tofu.Fire.ToFireOps", "link" : "tofu\/Fire$.html#ToFireOpsextendsAnyRef", "kind" : "trait"}, {"label" : "Ops", "tail" : "", "member" : "tofu.Fire.Ops", "link" : "tofu\/Fire$.html#Ops[F[_],A]extendsAnyRef", "kind" : "trait"}, {"label" : "apply", "tail" : "(instance: Fire[F]): Fire[F]", "member" : "tofu.Fire.apply", "link" : "tofu\/Fire$.html#apply[F[_]](implicitinstance:tofu.Fire[F]):tofu.Fire[F]", "kind" : "def"}, {"label" : "concurrentInstance", "tail" : "(F: Concurrent[F]): Fire[F]", "member" : "tofu.StartInstances.concurrentInstance", "link" : "tofu\/Fire$.html#concurrentInstance[F[_]](implicitF:cats.effect.Concurrent[F]):TC[F]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/Fire$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/Fire$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/Fire$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/Fire$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/Fire$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/Fire$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/Fire$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Fire$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Fire$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Fire$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/Fire$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/Fire$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/Fire$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/Fire$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/Fire$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/Fire$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/Fire$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/Fire$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/Fire$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/Fire.html", "kind" : "trait", "members_trait" : [{"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "tofu\/Fire.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/Fire.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/Fire.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "tofu\/Fire.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "tofu\/Fire.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "tofu\/Fire.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "tofu\/Fire.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "tofu\/Fire.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "fireAndForget", "tail" : "(fa: F[A]): F[Unit]", "member" : "tofu.Fire.fireAndForget", "link" : "tofu\/Fire.html#fireAndForget[A](fa:F[A]):F[Unit]", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.Any.getClass", "link" : "tofu\/Fire.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.Guarantee", "object" : "tofu\/Guarantee$.html", "members_object" : [{"label" : "fromBracket", "tail" : "(F: Bracket[F, E]): Guarantee[F]", "member" : "tofu.FinallyInstanceChain.fromBracket", "link" : "tofu\/Guarantee$.html#fromBracket[F[_],E](implicitF:cats.effect.Bracket[F,E]):T[F,[β$0$]cats.effect.ExitCase[E]]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/Guarantee$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/Guarantee$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/Guarantee$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/Guarantee$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/Guarantee$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/Guarantee$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/Guarantee$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Guarantee$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Guarantee$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Guarantee$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/Guarantee$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/Guarantee$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/Guarantee$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/Guarantee$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/Guarantee$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/Guarantee$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/Guarantee$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/Guarantee$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/Guarantee$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/Guarantee.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/Guarantee.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/Guarantee.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/Guarantee.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/Guarantee.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/Guarantee.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/Guarantee.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/Guarantee.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Guarantee.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Guarantee.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Guarantee.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/Guarantee.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/Guarantee.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/Guarantee.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/Guarantee.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/Guarantee.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/Guarantee.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/Guarantee.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/Guarantee.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/Guarantee.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "bracket", "tail" : "(init: F[A])(action: (A) => F[B])(release: (A, Boolean) => F[C]): F[B]", "member" : "tofu.Guarantee.bracket", "link" : "tofu\/Guarantee.html#bracket[A,B,C](init:F[A])(action:A=>F[B])(release:(A,Boolean)=>F[C]):F[B]", "kind" : "abstract def"}], "shortDescription" : "Bracket-like typeclass allowing to understand if operation was succeed"}, {"name" : "tofu.GuaranteeInstanceChain", "trait" : "tofu\/GuaranteeInstanceChain.html", "kind" : "trait", "members_trait" : [{"label" : "fromBracket", "tail" : "(F: Bracket[F, E]): T[F]", "member" : "tofu.FinallyInstanceChain.fromBracket", "link" : "tofu\/GuaranteeInstanceChain.html#fromBracket[F[_],E](implicitF:cats.effect.Bracket[F,E]):T[F,[β$0$]cats.effect.ExitCase[E]]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/GuaranteeInstanceChain.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/GuaranteeInstanceChain.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/GuaranteeInstanceChain.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/GuaranteeInstanceChain.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/GuaranteeInstanceChain.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/GuaranteeInstanceChain.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/GuaranteeInstanceChain.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/GuaranteeInstanceChain.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/GuaranteeInstanceChain.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/GuaranteeInstanceChain.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/GuaranteeInstanceChain.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/GuaranteeInstanceChain.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/GuaranteeInstanceChain.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/GuaranteeInstanceChain.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/GuaranteeInstanceChain.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/GuaranteeInstanceChain.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/GuaranteeInstanceChain.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/GuaranteeInstanceChain.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/GuaranteeInstanceChain.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "tofu.Handle", "object" : "tofu\/Handle$.html", "members_object" : [{"label" : "ByRecover", "tail" : "", "member" : "tofu.Handle.ByRecover", "link" : "tofu\/Handle$.html#ByRecover[F[_],E]extendsHandle[F,E]", "kind" : "trait"}, {"label" : "errorByCatsError", "tail" : "(arg0: ApplicativeError[F, E], arg1: ClassTag[E1], arg2: <:<[E1, E]): Handle[F, E1]", "member" : "tofu.ErrorsInstanceChain.errorByCatsError", "link" : "tofu\/Handle$.html#errorByCatsError[F[_],E,E1](implicitevidence$1:cats.ApplicativeError[F,E],implicitevidence$2:scala.reflect.ClassTag[E1],implicitevidence$3:E1<:<E):TC[F,E1]", "kind" : "implicit final def"}, {"label" : "apply", "tail" : "(instance: Handle[F, A]): Handle[F, A]", "member" : "tofu.internal.DataEffectComp.apply", "link" : "tofu\/Handle$.html#apply[F[_],A](implicitinstance:TC[F,A]):TC[F,A]", "kind" : "def"}, {"label" : "handleDowncast", "tail" : "(h: Handle[F, E], prism: Downcast[E, E1]): Handle[F, E1]", "member" : "tofu.HandleInstances.handleDowncast", "link" : "tofu\/Handle$.html#handleDowncast[F[_],E,E1](implicith:tofu.Handle[F,E],implicitprism:tofu.optics.Downcast[E,E1]):tofu.Handle[F,E1]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/Handle$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/Handle$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/Handle$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/Handle$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/Handle$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/Handle$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/Handle$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Handle$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Handle$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Handle$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/Handle$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/Handle$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/Handle$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/Handle$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/Handle$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/Handle$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/Handle$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/Handle$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/Handle$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/Handle.html", "kind" : "trait", "members_trait" : [{"label" : "handleWith", "tail" : "(fa: F[A])(f: (E) => F[A]): F[A]", "member" : "tofu.Handle.handleWith", "link" : "tofu\/Handle.html#handleWith[A](fa:F[A])(f:E=>F[A]):F[A]", "kind" : "def"}, {"label" : "restoreWith", "tail" : "(fa: F[A])(ra: => F[A]): F[A]", "member" : "tofu.Handle.restoreWith", "link" : "tofu\/Handle.html#restoreWith[A](fa:F[A])(ra:=>F[A]):F[A]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(fa: F[A])(pf: PartialFunction[E, F[A]]): F[A]", "member" : "tofu.Handle.recoverWith", "link" : "tofu\/Handle.html#recoverWith[A](fa:F[A])(pf:PartialFunction[E,F[A]]):F[A]", "kind" : "def"}, {"label" : "tryHandle", "tail" : "(fa: F[A])(f: (E) => Option[A])(F: Applicative[F]): F[A]", "member" : "tofu.Handle.tryHandle", "link" : "tofu\/Handle.html#tryHandle[A](fa:F[A])(f:E=>Option[A])(implicitF:cats.Applicative[F]):F[A]", "kind" : "def"}, {"label" : "recover", "tail" : "(fa: F[A])(pf: PartialFunction[E, A])(F: Applicative[F]): F[A]", "member" : "tofu.Handle.recover", "link" : "tofu\/Handle.html#recover[A](fa:F[A])(pf:PartialFunction[E,A])(implicitF:cats.Applicative[F]):F[A]", "kind" : "def"}, {"label" : "handle", "tail" : "(fa: F[A])(f: (E) => A)(G: Applicative[F]): F[A]", "member" : "tofu.HandleTo.handle", "link" : "tofu\/Handle.html#handle[A](fa:F[A])(f:E=>A)(implicitG:cats.Applicative[G]):G[A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(fa: F[A])(F: Functor[F], G: Applicative[F]): F[Either[E, A]]", "member" : "tofu.HandleTo.attempt", "link" : "tofu\/Handle.html#attempt[A](fa:F[A])(implicitF:cats.Functor[F],implicitG:cats.Applicative[G]):G[Either[E,A]]", "kind" : "def"}, {"label" : "liftF", "tail" : "(): FunctionK[F, F]", "member" : "tofu.lift.Lift.liftF", "link" : "tofu\/Handle.html#liftF:cats.arrow.FunctionK[F,G]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/Handle.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/Handle.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/Handle.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/Handle.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/Handle.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/Handle.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/Handle.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Handle.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Handle.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Handle.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/Handle.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/Handle.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/Handle.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/Handle.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/Handle.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/Handle.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/Handle.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/Handle.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/Handle.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "tryHandleWith", "tail" : "(fa: F[A])(f: (E) => Option[F[A]]): F[A]", "member" : "tofu.Handle.tryHandleWith", "link" : "tofu\/Handle.html#tryHandleWith[A](fa:F[A])(f:E=>Option[F[A]]):F[A]", "kind" : "abstract def"}, {"label" : "restore", "tail" : "(fa: F[A]): F[Option[A]]", "member" : "tofu.RestoreTo.restore", "link" : "tofu\/Handle.html#restore[A](fa:F[A]):G[Option[A]]", "kind" : "abstract def"}, {"label" : "lift", "tail" : "(fa: F[A]): F[A]", "member" : "tofu.lift.Lift.lift", "link" : "tofu\/Handle.html#lift[A](fa:F[A]):G[A]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.HandleInstances", "shortDescription" : "", "members_class" : [{"label" : "handleDowncast", "tail" : "(h: Handle[F, E], prism: Downcast[E, E1]): Handle[F, E1]", "member" : "tofu.HandleInstances.handleDowncast", "link" : "tofu\/HandleInstances.html#handleDowncast[F[_],E,E1](implicith:tofu.Handle[F,E],implicitprism:tofu.optics.Downcast[E,E1]):tofu.Handle[F,E1]", "kind" : "implicit final def"}, {"member" : "tofu.HandleInstances#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/HandleInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/HandleInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/HandleInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/HandleInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/HandleInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/HandleInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/HandleInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/HandleInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/HandleInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/HandleInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/HandleInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/HandleInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/HandleInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/HandleInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/HandleInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/HandleInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/HandleInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/HandleInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/HandleInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "tofu\/HandleInstances.html", "kind" : "class"}, {"name" : "tofu.HandleTo", "object" : "tofu\/HandleTo$.html", "members_object" : [{"label" : "optionTIntance", "tail" : ": HandleTo[Option, Id, Unit]", "member" : "tofu.ErrorsToInstanceChain.optionTIntance", "link" : "tofu\/HandleTo$.html#optionTIntance:TC[Option,cats.Id,Unit]", "kind" : "implicit final val"}, {"label" : "eitherIntance", "tail" : "(): HandleTo[[β$2$]Either[E, β$2$], Id, E]", "member" : "tofu.ErrorsToInstanceChain.eitherIntance", "link" : "tofu\/HandleTo$.html#eitherIntance[E]:TC[[β$2$]scala.util.Either[E,β$2$],cats.Id,E]", "kind" : "implicit final def"}, {"label" : "optionTIntance", "tail" : "(F: Monad[F]): HandleTo[[β$1$]OptionT[F, β$1$], F, Unit]", "member" : "tofu.ErrorsToInstanceChain.optionTIntance", "link" : "tofu\/HandleTo$.html#optionTIntance[F[_]](implicitF:cats.Monad[F]):TC[[β$1$]cats.data.OptionT[F,β$1$],F,Unit]", "kind" : "implicit final def"}, {"label" : "eitherTIntance", "tail" : "(F: Monad[F]): HandleTo[[γ$0$]EitherT[F, E, γ$0$], F, E]", "member" : "tofu.ErrorsToInstanceChain.eitherTIntance", "link" : "tofu\/HandleTo$.html#eitherTIntance[F[_],E](implicitF:cats.Monad[F]):TC[[γ$0$]cats.data.EitherT[F,E,γ$0$],F,E]", "kind" : "implicit final def"}, {"label" : "errorByCatsError", "tail" : "(arg0: ApplicativeError[F, E], arg1: ClassTag[E1], arg2: <:<[E1, E]): HandleTo[F, F, E1]", "member" : "tofu.ErrorsInstanceChain.errorByCatsError", "link" : "tofu\/HandleTo$.html#errorByCatsError[F[_],E,E1](implicitevidence$1:cats.ApplicativeError[F,E],implicitevidence$2:scala.reflect.ClassTag[E1],implicitevidence$3:E1<:<E):TC[F,E1]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/HandleTo$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/HandleTo$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/HandleTo$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/HandleTo$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/HandleTo$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/HandleTo$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/HandleTo$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/HandleTo$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/HandleTo$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/HandleTo$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/HandleTo$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/HandleTo$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/HandleTo$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/HandleTo$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/HandleTo$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/HandleTo$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/HandleTo$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/HandleTo$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/HandleTo$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/HandleTo.html", "kind" : "trait", "members_trait" : [{"label" : "handle", "tail" : "(fa: F[A])(f: (E) => A)(G: Applicative[G]): G[A]", "member" : "tofu.HandleTo.handle", "link" : "tofu\/HandleTo.html#handle[A](fa:F[A])(f:E=>A)(implicitG:cats.Applicative[G]):G[A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(fa: F[A])(F: Functor[F], G: Applicative[G]): G[Either[E, A]]", "member" : "tofu.HandleTo.attempt", "link" : "tofu\/HandleTo.html#attempt[A](fa:F[A])(implicitF:cats.Functor[F],implicitG:cats.Applicative[G]):G[Either[E,A]]", "kind" : "def"}, {"label" : "liftF", "tail" : "(): FunctionK[G, F]", "member" : "tofu.lift.Lift.liftF", "link" : "tofu\/HandleTo.html#liftF:cats.arrow.FunctionK[F,G]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/HandleTo.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/HandleTo.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/HandleTo.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/HandleTo.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/HandleTo.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/HandleTo.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/HandleTo.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/HandleTo.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/HandleTo.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/HandleTo.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/HandleTo.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/HandleTo.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/HandleTo.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/HandleTo.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/HandleTo.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/HandleTo.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/HandleTo.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/HandleTo.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/HandleTo.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "handleWith", "tail" : "(fa: F[A])(f: (E) => G[A]): G[A]", "member" : "tofu.HandleTo.handleWith", "link" : "tofu\/HandleTo.html#handleWith[A](fa:F[A])(f:E=>G[A]):G[A]", "kind" : "abstract def"}, {"label" : "restore", "tail" : "(fa: F[A]): G[Option[A]]", "member" : "tofu.RestoreTo.restore", "link" : "tofu\/HandleTo.html#restore[A](fa:F[A]):G[Option[A]]", "kind" : "abstract def"}, {"label" : "lift", "tail" : "(fa: G[A]): F[A]", "member" : "tofu.lift.Lift.lift", "link" : "tofu\/HandleTo.html#lift[A](fa:F[A]):G[A]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.HasContext", "shortDescription" : "", "object" : "tofu\/HasContext$.html", "members_object" : [{"label" : "apply", "tail" : "(hc: HasContext[F, C]): HasContext[F, C]", "member" : "tofu.HasContext.apply", "link" : "tofu\/HasContext$.html#apply[F[_],C](implicithc:tofu.HasContext[F,C]):tofu.HasContext[F,C]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/HasContext$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/HasContext$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/HasContext$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/HasContext$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/HasContext$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/HasContext$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/HasContext$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/HasContext$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/HasContext$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/HasContext$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/HasContext$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/HasContext$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/HasContext$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/HasContext$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/HasContext$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/HasContext$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/HasContext$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/HasContext$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/HasContext$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.HasContextRun", "shortDescription" : "", "object" : "tofu\/HasContextRun$.html", "members_object" : [{"label" : "apply", "tail" : "(hcr: HasContextRun[F, G, C]): HasContextRun[F, G, C]", "member" : "tofu.HasContextRun.apply", "link" : "tofu\/HasContextRun$.html#apply[F[_],G[_],C](implicithcr:tofu.HasContextRun[F,G,C]):tofu.HasContextRun[F,G,C]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/HasContextRun$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/HasContextRun$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/HasContextRun$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/HasContextRun$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/HasContextRun$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/HasContextRun$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/HasContextRun$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/HasContextRun$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/HasContextRun$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/HasContextRun$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/HasContextRun$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/HasContextRun$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/HasContextRun$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/HasContextRun$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/HasContextRun$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/HasContextRun$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/HasContextRun$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/HasContextRun$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/HasContextRun$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.HasLocal", "shortDescription" : "", "object" : "tofu\/HasLocal$.html", "members_object" : [{"label" : "apply", "tail" : "(hl: HasLocal[F, C]): HasLocal[F, C]", "member" : "tofu.HasLocal.apply", "link" : "tofu\/HasLocal$.html#apply[F[_],C](implicithl:tofu.HasLocal[F,C]):tofu.HasLocal[F,C]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/HasLocal$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/HasLocal$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/HasLocal$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/HasLocal$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/HasLocal$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/HasLocal$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/HasLocal$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/HasLocal$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/HasLocal$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/HasLocal$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/HasLocal$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/HasLocal$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/HasLocal$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/HasLocal$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/HasLocal$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/HasLocal$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/HasLocal$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/HasLocal$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/HasLocal$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.Local", "object" : "tofu\/Local$.html", "members_object" : [{"label" : "Aux", "tail" : "", "member" : "tofu.Local.Aux", "link" : "tofu\/Local$.html#Aux[F[_],C]=tofu.HasLocal[F,C]", "kind" : "type"}, {"label" : "apply", "tail" : "(ctx: Local[F]): HasLocal[F, Local.Ctx]", "member" : "tofu.Local.apply", "link" : "tofu\/Local$.html#apply[F[_]](implicitctx:tofu.Local[F]):tofu.HasLocal[F,ctx.Ctx]", "kind" : "def"}, {"label" : "readerTContext", "tail" : "(arg0: Applicative[F]): Local[[γ$0$]Kleisli[F, C, γ$0$]] { type Ctx = C }", "member" : "tofu.RunContextInstances.readerTContext", "link" : "tofu\/Local$.html#readerTContext[C,F[_]](implicitevidence$2:cats.Applicative[F]):TCA[[γ$0$]cats.data.Kleisli[F,C,γ$0$],F,C]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/Local$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/Local$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/Local$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/Local$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/Local$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/Local$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/Local$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Local$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Local$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Local$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/Local$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/Local$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/Local$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/Local$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/Local$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/Local$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/Local$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/Local$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/Local$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/Local.html", "kind" : "trait", "members_trait" : [{"label" : "subcontext", "tail" : "(contains: Contains[Ctx, A]): HasLocal[F, A]", "member" : "tofu.Local.subcontext", "link" : "tofu\/Local.html#subcontext[A](contains:tofu.optics.Contains[Local.this.Ctx,A]):tofu.HasLocal[F,A]", "kind" : "def"}, {"label" : "extract", "tail" : "(extr: Extract[Ctx, A]): HasContext[F, A]", "member" : "tofu.Context.extract", "link" : "tofu\/Local.html#extract[A](extr:tofu.optics.Extract[Context.this.Ctx,A]):tofu.HasContext[F,A]", "kind" : "def"}, {"label" : "askF", "tail" : "(f: (Ctx) => F[A])(F: Monad[F]): F[A]", "member" : "tofu.Context.askF", "link" : "tofu\/Local.html#askF[A](f:Context.this.Ctx=>F[A])(implicitF:cats.Monad[F]):F[A]", "kind" : "def"}, {"label" : "ask", "tail" : "(f: (Ctx) => A): F[A]", "member" : "tofu.Context.ask", "link" : "tofu\/Local.html#ask[A](f:Context.this.Ctx=>A):F[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/Local.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/Local.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/Local.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/Local.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/Local.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/Local.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/Local.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Local.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Local.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Local.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/Local.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/Local.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/Local.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/Local.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/Local.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/Local.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/Local.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/Local.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/Local.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "local", "tail" : "(fa: F[A])(project: (Ctx) => Ctx): F[A]", "member" : "tofu.Local.local", "link" : "tofu\/Local.html#local[A](fa:F[A])(project:Local.this.Ctx=>Local.this.Ctx):F[A]", "kind" : "abstract def"}, {"label" : "context", "tail" : "(): F[Ctx]", "member" : "tofu.Context.context", "link" : "tofu\/Local.html#context:F[Context.this.Ctx]", "kind" : "abstract def"}, {"member" : "tofu.Context.Ctx", "error" : "unsupported entity"}, {"label" : "functor", "tail" : "(): Functor[F]", "member" : "tofu.Context.functor", "link" : "tofu\/Local.html#functor:cats.Functor[F]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.LocalInstances", "trait" : "tofu\/LocalInstances.html", "kind" : "trait", "members_trait" : [{"label" : "readerTContext", "tail" : "(arg0: Applicative[F]): TCA[[γ$0$]Kleisli[F, C, γ$0$], F, C]", "member" : "tofu.RunContextInstances.readerTContext", "link" : "tofu\/LocalInstances.html#readerTContext[C,F[_]](implicitevidence$2:cats.Applicative[F]):TCA[[γ$0$]cats.data.Kleisli[F,C,γ$0$],F,C]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/LocalInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/LocalInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/LocalInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/LocalInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/LocalInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/LocalInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/LocalInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/LocalInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/LocalInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/LocalInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/LocalInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/LocalInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/LocalInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/LocalInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/LocalInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/LocalInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/LocalInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/LocalInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/LocalInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "tofu.Pull", "object" : "tofu\/Pull$.html", "members_object" : [{"label" : "apply", "tail" : "(instance: Pull[F, A]): Pull[F, A]", "member" : "tofu.internal.DataEffectComp.apply", "link" : "tofu\/Pull$.html#apply[F[_],A](implicitinstance:TC[F,A]):TC[F,A]", "kind" : "def"}, {"label" : "pullTransformed", "tail" : "(p: Pull[F, A], F: Functor[F], transform: Transform[A, B]): Pull[F, B]", "member" : "tofu.PullInstances.pullTransformed", "link" : "tofu\/Pull$.html#pullTransformed[F[_],A,B](implicitp:tofu.Pull[F,A],implicitF:cats.Functor[F],implicittransform:tofu.optics.classes.Transform[A,B]):tofu.Pull[F,B]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/Pull$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/Pull$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/Pull$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/Pull$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/Pull$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/Pull$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/Pull$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Pull$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Pull$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Pull$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/Pull$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/Pull$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/Pull$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/Pull$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/Pull$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/Pull$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/Pull$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/Pull$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/Pull$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/Pull.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/Pull.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/Pull.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/Pull.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/Pull.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/Pull.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/Pull.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/Pull.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Pull.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Pull.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Pull.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/Pull.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/Pull.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/Pull.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/Pull.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/Pull.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/Pull.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/Pull.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/Pull.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/Pull.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "pull", "tail" : "(): F[A]", "member" : "tofu.Pull.pull", "link" : "tofu\/Pull.html#pull:F[A]", "kind" : "abstract def"}], "shortDescription" : "simply F[A] in a typeclass form"}, {"name" : "tofu.PullInstances", "trait" : "tofu\/PullInstances.html", "kind" : "trait", "members_trait" : [{"label" : "pullTransformed", "tail" : "(p: Pull[F, A], F: Functor[F], transform: Transform[A, B]): Pull[F, B]", "member" : "tofu.PullInstances.pullTransformed", "link" : "tofu\/PullInstances.html#pullTransformed[F[_],A,B](implicitp:tofu.Pull[F,A],implicitF:cats.Functor[F],implicittransform:tofu.optics.classes.Transform[A,B]):tofu.Pull[F,B]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/PullInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/PullInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/PullInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/PullInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/PullInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/PullInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/PullInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/PullInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/PullInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/PullInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/PullInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/PullInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/PullInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/PullInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/PullInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/PullInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/PullInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/PullInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/PullInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "tofu.Push", "object" : "tofu\/Push$.html", "members_object" : [{"label" : "apply", "tail" : "(instance: Push[F, A]): Push[F, A]", "member" : "tofu.internal.DataEffectComp.apply", "link" : "tofu\/Push$.html#apply[F[_],A](implicitinstance:TC[F,A]):TC[F,A]", "kind" : "def"}, {"label" : "pushTransformed", "tail" : "(push: Push[F, B], transform: Transform[A, B]): Push[F, A]", "member" : "tofu.PushInstances.pushTransformed", "link" : "tofu\/Push$.html#pushTransformed[F[_],A,B](implicitpush:tofu.Push[F,B],implicittransform:tofu.optics.classes.Transform[A,B]):tofu.Push[F,A]", "kind" : "implicit final def"}, {"label" : "pushFolded", "tail" : "(push: Push[F, B], fold: Folded[A, B], F: Applicative[F]): Push[F, A]", "member" : "tofu.PushInstances1.pushFolded", "link" : "tofu\/Push$.html#pushFolded[F[_],A,B](implicitpush:tofu.Push[F,B],implicitfold:tofu.optics.Folded[A,B],implicitF:cats.Applicative[F]):tofu.Push[F,A]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/Push$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/Push$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/Push$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/Push$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/Push$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/Push$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/Push$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Push$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Push$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Push$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/Push$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/Push$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/Push$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/Push$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/Push$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/Push$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/Push$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/Push$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/Push$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/Push.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/Push.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/Push.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/Push.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/Push.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/Push.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/Push.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/Push.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Push.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Push.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Push.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/Push.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/Push.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/Push.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/Push.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/Push.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/Push.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/Push.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/Push.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/Push.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "push", "tail" : "(a: A): F[Unit]", "member" : "tofu.Push.push", "link" : "tofu\/Push.html#push(a:A):F[Unit]", "kind" : "abstract def"}], "shortDescription" : "simply function A => F[Unit] in a typeclass form"}, {"name" : "tofu.PushInstances", "trait" : "tofu\/PushInstances.html", "kind" : "trait", "members_trait" : [{"label" : "pushTransformed", "tail" : "(push: Push[F, B], transform: Transform[A, B]): Push[F, A]", "member" : "tofu.PushInstances.pushTransformed", "link" : "tofu\/PushInstances.html#pushTransformed[F[_],A,B](implicitpush:tofu.Push[F,B],implicittransform:tofu.optics.classes.Transform[A,B]):tofu.Push[F,A]", "kind" : "implicit final def"}, {"label" : "pushFolded", "tail" : "(push: Push[F, B], fold: Folded[A, B], F: Applicative[F]): Push[F, A]", "member" : "tofu.PushInstances1.pushFolded", "link" : "tofu\/PushInstances.html#pushFolded[F[_],A,B](implicitpush:tofu.Push[F,B],implicitfold:tofu.optics.Folded[A,B],implicitF:cats.Applicative[F]):tofu.Push[F,A]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/PushInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/PushInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/PushInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/PushInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/PushInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/PushInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/PushInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/PushInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/PushInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/PushInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/PushInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/PushInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/PushInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/PushInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/PushInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/PushInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/PushInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/PushInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/PushInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "tofu.PushInstances1", "trait" : "tofu\/PushInstances1.html", "kind" : "trait", "members_trait" : [{"label" : "pushFolded", "tail" : "(push: Push[F, B], fold: Folded[A, B], F: Applicative[F]): Push[F, A]", "member" : "tofu.PushInstances1.pushFolded", "link" : "tofu\/PushInstances1.html#pushFolded[F[_],A,B](implicitpush:tofu.Push[F,B],implicitfold:tofu.optics.Folded[A,B],implicitF:cats.Applicative[F]):tofu.Push[F,A]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/PushInstances1.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/PushInstances1.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/PushInstances1.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/PushInstances1.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/PushInstances1.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/PushInstances1.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/PushInstances1.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/PushInstances1.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/PushInstances1.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/PushInstances1.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/PushInstances1.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/PushInstances1.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/PushInstances1.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/PushInstances1.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/PushInstances1.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/PushInstances1.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/PushInstances1.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/PushInstances1.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/PushInstances1.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "tofu.Race", "object" : "tofu\/Race$.html", "members_object" : [{"label" : "ops", "tail" : "", "member" : "tofu.Race.ops", "link" : "tofu\/Race$.html#ops", "kind" : "object"}, {"label" : "AllOps", "tail" : "", "member" : "tofu.Race.AllOps", "link" : "tofu\/Race$.html#AllOps[F[_],A]extendsRace.Ops[F,A]withFire.AllOps[F,A]", "kind" : "trait"}, {"label" : "nonInheritedOps", "tail" : "", "member" : "tofu.Race.nonInheritedOps", "link" : "tofu\/Race$.html#nonInheritedOps", "kind" : "object"}, {"label" : "ToRaceOps", "tail" : "", "member" : "tofu.Race.ToRaceOps", "link" : "tofu\/Race$.html#ToRaceOpsextendsAnyRef", "kind" : "trait"}, {"label" : "Ops", "tail" : "", "member" : "tofu.Race.Ops", "link" : "tofu\/Race$.html#Ops[F[_],A]extendsAnyRef", "kind" : "trait"}, {"label" : "apply", "tail" : "(instance: Race[F]): Race[F]", "member" : "tofu.Race.apply", "link" : "tofu\/Race$.html#apply[F[_]](implicitinstance:tofu.Race[F]):tofu.Race[F]", "kind" : "def"}, {"label" : "concurrentInstance", "tail" : "(F: Concurrent[F]): Race[F]", "member" : "tofu.StartInstances.concurrentInstance", "link" : "tofu\/Race$.html#concurrentInstance[F[_]](implicitF:cats.effect.Concurrent[F]):TC[F]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/Race$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/Race$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/Race$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/Race$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/Race$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/Race$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/Race$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Race$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Race$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Race$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/Race$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/Race$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/Race$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/Race$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/Race$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/Race$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/Race$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/Race$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/Race$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/Race.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/Race.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/Race.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/Race.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/Race.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/Race.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/Race.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/Race.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Race.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Race.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Race.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/Race.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/Race.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/Race.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/Race.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/Race.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/Race.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/Race.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/Race.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/Race.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "never", "tail" : "(): F[A]", "member" : "tofu.Race.never", "link" : "tofu\/Race.html#never[A]:F[A]", "kind" : "abstract def"}, {"label" : "race", "tail" : "(fa: F[A], fb: F[B]): F[Either[A, B]]", "member" : "tofu.Race.race", "link" : "tofu\/Race.html#race[A,B](fa:F[A],fb:F[B]):F[scala.util.Either[A,B]]", "kind" : "abstract def"}, {"label" : "fireAndForget", "tail" : "(fa: F[A]): F[Unit]", "member" : "tofu.Fire.fireAndForget", "link" : "tofu\/Race.html#fireAndForget[A](fa:F[A]):F[Unit]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.Raise", "object" : "tofu\/Raise$.html", "members_object" : [{"label" : "ContravariantRaise", "tail" : "", "member" : "tofu.Raise.ContravariantRaise", "link" : "tofu\/Raise$.html#ContravariantRaise[F[_],-E]extendsAnyRef", "kind" : "trait"}, {"label" : "errorByCatsError", "tail" : "(arg0: ApplicativeError[F, E], arg1: ClassTag[E1], arg2: <:<[E1, E]): Raise[F, E1]", "member" : "tofu.ErrorsInstanceChain.errorByCatsError", "link" : "tofu\/Raise$.html#errorByCatsError[F[_],E,E1](implicitevidence$1:cats.ApplicativeError[F,E],implicitevidence$2:scala.reflect.ClassTag[E1],implicitevidence$3:E1<:<E):TC[F,E1]", "kind" : "implicit final def"}, {"label" : "apply", "tail" : "(instance: Raise[F, A]): Raise[F, A]", "member" : "tofu.internal.DataEffectComp.apply", "link" : "tofu\/Raise$.html#apply[F[_],A](implicitinstance:TC[F,A]):TC[F,A]", "kind" : "def"}, {"label" : "raiseUpcast", "tail" : "(r: Raise[F, E], prism: Upcast[E, E1]): Raise[F, E1]", "member" : "tofu.RaiseInstances.raiseUpcast", "link" : "tofu\/Raise$.html#raiseUpcast[F[_],E,E1](implicitr:tofu.Raise[F,E],implicitprism:tofu.optics.Upcast[E,E1]):tofu.Raise[F,E1]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/Raise$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/Raise$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/Raise$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/Raise$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/Raise$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/Raise$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/Raise$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Raise$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Raise$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Raise$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/Raise$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/Raise$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/Raise$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/Raise$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/Raise$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/Raise$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/Raise$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/Raise$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/Raise$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/Raise.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/Raise.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/Raise.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/Raise.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/Raise.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/Raise.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/Raise.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/Raise.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Raise.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Raise.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Raise.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/Raise.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/Raise.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/Raise.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/Raise.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/Raise.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/Raise.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/Raise.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/Raise.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/Raise.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "raise", "tail" : "(err: E): F[A]", "member" : "tofu.Raise.raise", "link" : "tofu\/Raise.html#raise[A](err:E):F[A]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.RaiseInstances", "shortDescription" : "", "members_class" : [{"label" : "raiseUpcast", "tail" : "(r: Raise[F, E], prism: Upcast[E, E1]): Raise[F, E1]", "member" : "tofu.RaiseInstances.raiseUpcast", "link" : "tofu\/RaiseInstances.html#raiseUpcast[F[_],E,E1](implicitr:tofu.Raise[F,E],implicitprism:tofu.optics.Upcast[E,E1]):tofu.Raise[F,E1]", "kind" : "implicit final def"}, {"member" : "tofu.RaiseInstances#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/RaiseInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/RaiseInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/RaiseInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/RaiseInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/RaiseInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/RaiseInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/RaiseInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/RaiseInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/RaiseInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/RaiseInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/RaiseInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/RaiseInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/RaiseInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/RaiseInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/RaiseInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/RaiseInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/RaiseInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/RaiseInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/RaiseInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "tofu\/RaiseInstances.html", "kind" : "class"}, {"name" : "tofu.Restore", "trait" : "tofu\/Restore.html", "kind" : "trait", "members_trait" : [{"label" : "liftF", "tail" : "(): FunctionK[F, F]", "member" : "tofu.lift.Lift.liftF", "link" : "tofu\/Restore.html#liftF:cats.arrow.FunctionK[F,G]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/Restore.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/Restore.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/Restore.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/Restore.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/Restore.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/Restore.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/Restore.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Restore.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Restore.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Restore.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/Restore.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/Restore.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/Restore.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/Restore.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/Restore.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/Restore.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/Restore.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/Restore.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/Restore.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "restoreWith", "tail" : "(fa: F[A])(ra: => F[A]): F[A]", "member" : "tofu.Restore.restoreWith", "link" : "tofu\/Restore.html#restoreWith[A](fa:F[A])(ra:=>F[A]):F[A]", "kind" : "abstract def"}, {"label" : "restore", "tail" : "(fa: F[A]): F[Option[A]]", "member" : "tofu.RestoreTo.restore", "link" : "tofu\/Restore.html#restore[A](fa:F[A]):G[Option[A]]", "kind" : "abstract def"}, {"label" : "lift", "tail" : "(fa: F[A]): F[A]", "member" : "tofu.lift.Lift.lift", "link" : "tofu\/Restore.html#lift[A](fa:F[A]):G[A]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.RestoreTo", "object" : "tofu\/RestoreTo$.html", "members_object" : [{"label" : "optionTIntance", "tail" : ": RestoreTo[Option, Id]", "member" : "tofu.ErrorsToInstanceChain.optionTIntance", "link" : "tofu\/RestoreTo$.html#optionTIntance:TC[Option,cats.Id,Unit]", "kind" : "implicit final val"}, {"label" : "eitherIntance", "tail" : "(): RestoreTo[[β$2$]Either[E, β$2$], Id]", "member" : "tofu.ErrorsToInstanceChain.eitherIntance", "link" : "tofu\/RestoreTo$.html#eitherIntance[E]:TC[[β$2$]scala.util.Either[E,β$2$],cats.Id,E]", "kind" : "implicit final def"}, {"label" : "optionTIntance", "tail" : "(F: Monad[F]): RestoreTo[[β$1$]OptionT[F, β$1$], F]", "member" : "tofu.ErrorsToInstanceChain.optionTIntance", "link" : "tofu\/RestoreTo$.html#optionTIntance[F[_]](implicitF:cats.Monad[F]):TC[[β$1$]cats.data.OptionT[F,β$1$],F,Unit]", "kind" : "implicit final def"}, {"label" : "eitherTIntance", "tail" : "(F: Monad[F]): RestoreTo[[γ$0$]EitherT[F, E, γ$0$], F]", "member" : "tofu.ErrorsToInstanceChain.eitherTIntance", "link" : "tofu\/RestoreTo$.html#eitherTIntance[F[_],E](implicitF:cats.Monad[F]):TC[[γ$0$]cats.data.EitherT[F,E,γ$0$],F,E]", "kind" : "implicit final def"}, {"label" : "errorByCatsError", "tail" : "(arg0: ApplicativeError[F, E], arg1: ClassTag[E1], arg2: <:<[E1, E]): RestoreTo[F, F]", "member" : "tofu.ErrorsInstanceChain.errorByCatsError", "link" : "tofu\/RestoreTo$.html#errorByCatsError[F[_],E,E1](implicitevidence$1:cats.ApplicativeError[F,E],implicitevidence$2:scala.reflect.ClassTag[E1],implicitevidence$3:E1<:<E):TC[F,E1]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/RestoreTo$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/RestoreTo$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/RestoreTo$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/RestoreTo$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/RestoreTo$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/RestoreTo$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/RestoreTo$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/RestoreTo$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/RestoreTo$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/RestoreTo$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/RestoreTo$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/RestoreTo$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/RestoreTo$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/RestoreTo$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/RestoreTo$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/RestoreTo$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/RestoreTo$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/RestoreTo$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/RestoreTo$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/RestoreTo.html", "kind" : "trait", "members_trait" : [{"label" : "liftF", "tail" : "(): FunctionK[G, F]", "member" : "tofu.lift.Lift.liftF", "link" : "tofu\/RestoreTo.html#liftF:cats.arrow.FunctionK[F,G]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/RestoreTo.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/RestoreTo.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/RestoreTo.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/RestoreTo.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/RestoreTo.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/RestoreTo.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/RestoreTo.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/RestoreTo.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/RestoreTo.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/RestoreTo.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/RestoreTo.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/RestoreTo.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/RestoreTo.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/RestoreTo.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/RestoreTo.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/RestoreTo.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/RestoreTo.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/RestoreTo.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/RestoreTo.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "restore", "tail" : "(fa: F[A]): G[Option[A]]", "member" : "tofu.RestoreTo.restore", "link" : "tofu\/RestoreTo.html#restore[A](fa:F[A]):G[Option[A]]", "kind" : "abstract def"}, {"label" : "lift", "tail" : "(fa: G[A]): F[A]", "member" : "tofu.lift.Lift.lift", "link" : "tofu\/RestoreTo.html#lift[A](fa:F[A]):G[A]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.RunContext", "object" : "tofu\/RunContext$.html", "members_object" : [{"label" : "Aux", "tail" : "", "member" : "tofu.RunContext.Aux", "link" : "tofu\/RunContext$.html#Aux[F[_],G[_],C]=tofu.HasContextRun[F,G,C]", "kind" : "type"}, {"label" : "apply", "tail" : "(ctx: RunContext[F]): HasContextRun[F, Lower, RunContext.Ctx]", "member" : "tofu.RunContext.apply", "link" : "tofu\/RunContext$.html#apply[F[_]](implicitctx:tofu.RunContext[F]):tofu.HasContextRun[F,ctx.Lower,ctx.Ctx]", "kind" : "def"}, {"label" : "readerTContext", "tail" : "(arg0: Applicative[F]): HasContextRun[[γ$0$]Kleisli[F, C, γ$0$], F, C]", "member" : "tofu.RunContextInstances.readerTContext", "link" : "tofu\/RunContext$.html#readerTContext[C,F[_]](implicitevidence$2:cats.Applicative[F]):TCA[[γ$0$]cats.data.Kleisli[F,C,γ$0$],F,C]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/RunContext$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/RunContext$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/RunContext$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/RunContext$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/RunContext$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/RunContext$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/RunContext$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/RunContext$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/RunContext$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/RunContext$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/RunContext$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/RunContext$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/RunContext$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/RunContext$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/RunContext$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/RunContext$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/RunContext$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/RunContext$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/RunContext$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/RunContext.html", "kind" : "trait", "members_trait" : [{"label" : "runEquivalent", "tail" : "(eq: Equivalent[Ctx, A]): HasContextRun[F, Lower, A]", "member" : "tofu.RunContext.runEquivalent", "link" : "tofu\/RunContext.html#runEquivalent[A](eq:tofu.optics.Equivalent[RunContext.this.Ctx,A]):tofu.HasContextRun[F,RunContext.this.Lower,A]", "kind" : "def"}, {"label" : "subcontext", "tail" : "(contains: Contains[Ctx, A]): HasLocal[F, A]", "member" : "tofu.Local.subcontext", "link" : "tofu\/RunContext.html#subcontext[A](contains:tofu.optics.Contains[Local.this.Ctx,A]):tofu.HasLocal[F,A]", "kind" : "def"}, {"label" : "extract", "tail" : "(extr: Extract[Ctx, A]): HasContext[F, A]", "member" : "tofu.Context.extract", "link" : "tofu\/RunContext.html#extract[A](extr:tofu.optics.Extract[Context.this.Ctx,A]):tofu.HasContext[F,A]", "kind" : "def"}, {"label" : "askF", "tail" : "(f: (Ctx) => F[A])(F: Monad[F]): F[A]", "member" : "tofu.Context.askF", "link" : "tofu\/RunContext.html#askF[A](f:Context.this.Ctx=>F[A])(implicitF:cats.Monad[F]):F[A]", "kind" : "def"}, {"label" : "ask", "tail" : "(f: (Ctx) => A): F[A]", "member" : "tofu.Context.ask", "link" : "tofu\/RunContext.html#ask[A](f:Context.this.Ctx=>A):F[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/RunContext.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/RunContext.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/RunContext.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/RunContext.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/RunContext.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/RunContext.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/RunContext.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/RunContext.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/RunContext.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/RunContext.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/RunContext.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/RunContext.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/RunContext.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/RunContext.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/RunContext.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/RunContext.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/RunContext.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/RunContext.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/RunContext.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "runContext", "tail" : "(fa: F[A])(ctx: Ctx): Lower[A]", "member" : "tofu.RunContext.runContext", "link" : "tofu\/RunContext.html#runContext[A](fa:F[A])(ctx:RunContext.this.Ctx):RunContext.this.Lower[A]", "kind" : "abstract def"}, {"member" : "tofu.RunContext.Lower", "error" : "unsupported entity"}, {"label" : "local", "tail" : "(fa: F[A])(project: (Ctx) => Ctx): F[A]", "member" : "tofu.Local.local", "link" : "tofu\/RunContext.html#local[A](fa:F[A])(project:Local.this.Ctx=>Local.this.Ctx):F[A]", "kind" : "abstract def"}, {"label" : "context", "tail" : "(): F[Ctx]", "member" : "tofu.Context.context", "link" : "tofu\/RunContext.html#context:F[Context.this.Ctx]", "kind" : "abstract def"}, {"member" : "tofu.Context.Ctx", "error" : "unsupported entity"}, {"label" : "functor", "tail" : "(): Functor[F]", "member" : "tofu.Context.functor", "link" : "tofu\/RunContext.html#functor:cats.Functor[F]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.RunContextInstances", "trait" : "tofu\/RunContextInstances.html", "kind" : "trait", "members_trait" : [{"label" : "readerTContext", "tail" : "(arg0: Applicative[F]): TCA[[γ$0$]Kleisli[F, C, γ$0$], F, C]", "member" : "tofu.RunContextInstances.readerTContext", "link" : "tofu\/RunContextInstances.html#readerTContext[C,F[_]](implicitevidence$2:cats.Applicative[F]):TCA[[γ$0$]cats.data.Kleisli[F,C,γ$0$],F,C]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/RunContextInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/RunContextInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/RunContextInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/RunContextInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/RunContextInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/RunContextInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/RunContextInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/RunContextInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/RunContextInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/RunContextInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/RunContextInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/RunContextInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/RunContextInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/RunContextInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/RunContextInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/RunContextInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/RunContextInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/RunContextInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/RunContextInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "tofu.Start", "object" : "tofu\/Start$.html", "members_object" : [{"label" : "ops", "tail" : "", "member" : "tofu.Start.ops", "link" : "tofu\/Start$.html#ops", "kind" : "object"}, {"label" : "AllOps", "tail" : "", "member" : "tofu.Start.AllOps", "link" : "tofu\/Start$.html#AllOps[F[_],A]extendsStart.Ops[F,A]withFire.AllOps[F,A]withRace.AllOps[F,A]", "kind" : "trait"}, {"label" : "nonInheritedOps", "tail" : "", "member" : "tofu.Start.nonInheritedOps", "link" : "tofu\/Start$.html#nonInheritedOps", "kind" : "object"}, {"label" : "ToStartOps", "tail" : "", "member" : "tofu.Start.ToStartOps", "link" : "tofu\/Start$.html#ToStartOpsextendsAnyRef", "kind" : "trait"}, {"label" : "Ops", "tail" : "", "member" : "tofu.Start.Ops", "link" : "tofu\/Start$.html#Ops[F[_],A]extendsAnyRef", "kind" : "trait"}, {"label" : "apply", "tail" : "(instance: Start[F]): Start[F]", "member" : "tofu.Start.apply", "link" : "tofu\/Start$.html#apply[F[_]](implicitinstance:tofu.Start[F]):tofu.Start[F]", "kind" : "def"}, {"label" : "concurrentInstance", "tail" : "(F: Concurrent[F]): Start[F]", "member" : "tofu.StartInstances.concurrentInstance", "link" : "tofu\/Start$.html#concurrentInstance[F[_]](implicitF:cats.effect.Concurrent[F]):TC[F]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/Start$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/Start$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/Start$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/Start$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/Start$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/Start$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/Start$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Start$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Start$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Start$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/Start$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/Start$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/Start$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/Start$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/Start$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/Start$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/Start$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/Start$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/Start$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/Start.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/Start.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/Start.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/Start.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/Start.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/Start.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/Start.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/Start.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Start.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Start.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Start.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/Start.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/Start.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/Start.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/Start.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/Start.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/Start.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/Start.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/Start.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/Start.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "racePair", "tail" : "(fa: F[A], fb: F[B]): F[Either[(A, Fiber[F, B]), (Fiber[F, A], B)]]", "member" : "tofu.Start.racePair", "link" : "tofu\/Start.html#racePair[A,B](fa:F[A],fb:F[B]):F[scala.util.Either[(A,cats.effect.Fiber[F,B]),(cats.effect.Fiber[F,A],B)]]", "kind" : "abstract def"}, {"label" : "start", "tail" : "(fa: F[A]): F[Fiber[F, A]]", "member" : "tofu.Start.start", "link" : "tofu\/Start.html#start[A](fa:F[A]):F[cats.effect.Fiber[F,A]]", "kind" : "abstract def"}, {"label" : "never", "tail" : "(): F[A]", "member" : "tofu.Race.never", "link" : "tofu\/Start.html#never[A]:F[A]", "kind" : "abstract def"}, {"label" : "race", "tail" : "(fa: F[A], fb: F[B]): F[Either[A, B]]", "member" : "tofu.Race.race", "link" : "tofu\/Start.html#race[A,B](fa:F[A],fb:F[B]):F[scala.util.Either[A,B]]", "kind" : "abstract def"}, {"label" : "fireAndForget", "tail" : "(fa: F[A]): F[Unit]", "member" : "tofu.Fire.fireAndForget", "link" : "tofu\/Start.html#fireAndForget[A](fa:F[A]):F[Unit]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.StartInstances", "trait" : "tofu\/StartInstances.html", "kind" : "trait", "members_trait" : [{"label" : "concurrentInstance", "tail" : "(F: Concurrent[F]): TC[F]", "member" : "tofu.StartInstances.concurrentInstance", "link" : "tofu\/StartInstances.html#concurrentInstance[F[_]](implicitF:cats.effect.Concurrent[F]):TC[F]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/StartInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/StartInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/StartInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/StartInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/StartInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/StartInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/StartInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/StartInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/StartInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/StartInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/StartInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/StartInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/StartInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/StartInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/StartInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/StartInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/StartInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/StartInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/StartInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "tofu.Timeout", "object" : "tofu\/Timeout$.html", "members_object" : [{"label" : "ops", "tail" : "", "member" : "tofu.Timeout.ops", "link" : "tofu\/Timeout$.html#ops", "kind" : "object"}, {"label" : "AllOps", "tail" : "", "member" : "tofu.Timeout.AllOps", "link" : "tofu\/Timeout$.html#AllOps[F[_],A]extendsTimeout.Ops[F,A]", "kind" : "trait"}, {"label" : "nonInheritedOps", "tail" : "", "member" : "tofu.Timeout.nonInheritedOps", "link" : "tofu\/Timeout$.html#nonInheritedOps", "kind" : "object"}, {"label" : "ToTimeoutOps", "tail" : "", "member" : "tofu.Timeout.ToTimeoutOps", "link" : "tofu\/Timeout$.html#ToTimeoutOpsextendsAnyRef", "kind" : "trait"}, {"label" : "Ops", "tail" : "", "member" : "tofu.Timeout.Ops", "link" : "tofu\/Timeout$.html#Ops[F[_],A]extendsAnyRef", "kind" : "trait"}, {"label" : "apply", "tail" : "(instance: Timeout[F]): Timeout[F]", "member" : "tofu.Timeout.apply", "link" : "tofu\/Timeout$.html#apply[F[_]](implicitinstance:tofu.Timeout[F]):tofu.Timeout[F]", "kind" : "def"}, {"label" : "io", "tail" : "(timer: Timer[IO], cs: ContextShift[IO]): Timeout[IO]", "member" : "tofu.Timeout.io", "link" : "tofu\/Timeout$.html#io(implicittimer:cats.effect.Timer[cats.effect.IO],implicitcs:cats.effect.ContextShift[cats.effect.IO]):tofu.Timeout[cats.effect.IO]", "kind" : "implicit def"}, {"label" : "concurrent", "tail" : "(F: Concurrent[F], timer: Timer[F]): Timeout[F]", "member" : "tofu.Timeout.concurrent", "link" : "tofu\/Timeout$.html#concurrent[F[_]](implicitF:cats.effect.Concurrent[F],implicittimer:cats.effect.Timer[F]):tofu.Timeout[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/Timeout$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/Timeout$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/Timeout$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/Timeout$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/Timeout$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/Timeout$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/Timeout$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Timeout$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Timeout$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Timeout$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/Timeout$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/Timeout$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/Timeout$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/Timeout$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/Timeout$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/Timeout$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/Timeout$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/Timeout$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/Timeout$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/Timeout.html", "kind" : "trait", "members_trait" : [{"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "tofu\/Timeout.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/Timeout.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/Timeout.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "tofu\/Timeout.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "tofu\/Timeout.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "tofu\/Timeout.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "tofu\/Timeout.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "tofu\/Timeout.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "timeoutTo", "tail" : "(fa: F[A], after: FiniteDuration, fallback: F[A]): F[A]", "member" : "tofu.Timeout.timeoutTo", "link" : "tofu\/Timeout.html#timeoutTo[A](fa:F[A],after:scala.concurrent.duration.FiniteDuration,fallback:F[A]):F[A]", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.Any.getClass", "link" : "tofu\/Timeout.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.Void", "shortDescription" : "", "object" : "tofu\/Void$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/Void.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/Void.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/Void.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/Void.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/Void.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/Void.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/Void.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Void.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Void.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Void.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/Void.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/Void.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/Void.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/Void.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/Void.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/Void.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/Void.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/Void.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/Void.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "absurd", "tail" : "(): A", "member" : "tofu.Void.absurd", "link" : "tofu\/Void.html#absurd[A]:A", "kind" : "abstract def"}], "members_object" : [{"label" : "fromNothing", "tail" : "(n: Nothing): Void", "member" : "tofu.Void.fromNothing", "link" : "tofu\/Void$.html#fromNothing(n:Nothing):tofu.Void", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/Void$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/Void$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/Void$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/Void$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/Void$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/Void$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/Void$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Void$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Void$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/Void$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/Void$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/Void$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/Void$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/Void$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/Void$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/Void$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/Void$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/Void$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/Void$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "tofu\/Void.html", "kind" : "class"}], "tofu.higherKind" : [{"name" : "tofu.higherKind.Embed", "object" : "tofu\/higherKind\/Embed$.html", "members_object" : [{"label" : "ops", "tail" : "", "member" : "tofu.higherKind.Embed.ops", "link" : "tofu\/higherKind\/Embed$.html#ops", "kind" : "object"}, {"label" : "AllOps", "tail" : "", "member" : "tofu.higherKind.Embed.AllOps", "link" : "tofu\/higherKind\/Embed$.html#AllOps[U[_[_]],A[_]]extendsEmbed.Ops[U,A]", "kind" : "trait"}, {"label" : "nonInheritedOps", "tail" : "", "member" : "tofu.higherKind.Embed.nonInheritedOps", "link" : "tofu\/higherKind\/Embed$.html#nonInheritedOps", "kind" : "object"}, {"label" : "ToEmbedOps", "tail" : "", "member" : "tofu.higherKind.Embed.ToEmbedOps", "link" : "tofu\/higherKind\/Embed$.html#ToEmbedOpsextendsAnyRef", "kind" : "trait"}, {"label" : "Ops", "tail" : "", "member" : "tofu.higherKind.Embed.Ops", "link" : "tofu\/higherKind\/Embed$.html#Ops[U[_[_]],A[_]]extendsAnyRef", "kind" : "trait"}, {"label" : "apply", "tail" : "(instance: Embed[U]): Embed[U]", "member" : "tofu.higherKind.Embed.apply", "link" : "tofu\/higherKind\/Embed$.html#apply[U[_[_]]](implicitinstance:tofu.higherKind.Embed[U]):tofu.higherKind.Embed[U]", "kind" : "def"}, {"label" : "of", "tail" : "(fuf: F[U[F]])(arg0: FlatMap[F], embed: Embed[U]): U[F]", "member" : "tofu.higherKind.Embed.of", "link" : "tofu\/higherKind\/Embed$.html#of[U[_[_]],F[_]](fuf:F[U[F]])(implicitevidence$2:cats.FlatMap[F],implicitembed:tofu.higherKind.Embed[U]):U[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/higherKind\/Embed$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/higherKind\/Embed$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/higherKind\/Embed$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/higherKind\/Embed$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/higherKind\/Embed$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/higherKind\/Embed$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/higherKind\/Embed$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/Embed$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/Embed$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/Embed$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/higherKind\/Embed$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/higherKind\/Embed$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/higherKind\/Embed$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/higherKind\/Embed$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/higherKind\/Embed$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/higherKind\/Embed$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/higherKind\/Embed$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/higherKind\/Embed$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/higherKind\/Embed$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/higherKind\/Embed.html", "kind" : "trait", "members_trait" : [{"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "tofu\/higherKind\/Embed.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/higherKind\/Embed.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/higherKind\/Embed.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "tofu\/higherKind\/Embed.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "tofu\/higherKind\/Embed.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "tofu\/higherKind\/Embed.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "tofu\/higherKind\/Embed.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "tofu\/higherKind\/Embed.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "embed", "tail" : "(ft: F[U[F]])(arg0: FlatMap[F]): U[F]", "member" : "tofu.higherKind.Embed.embed", "link" : "tofu\/higherKind\/Embed.html#embed[F[_]](ft:F[U[F]])(implicitevidence$1:cats.FlatMap[F]):U[F]", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.Any.getClass", "link" : "tofu\/higherKind\/Embed.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.higherKind.Function2K", "object" : "tofu\/higherKind\/Function2K$.html", "members_object" : [{"label" : "MakeFunctionK", "tail" : "", "member" : "tofu.higherKind.Function2K.MakeFunctionK", "link" : "tofu\/higherKind\/Function2K$.html#MakeFunctionK[F[_],G[_],H[_]]extendsFunction2K[F,G,H]", "kind" : "abstract class"}, {"label" : "untupled", "tail" : "(fk: ~>[[γ$3$]Tuple2K[F, G, γ$3$], H]): Function2K[F, G, H]", "member" : "tofu.higherKind.Function2K.untupled", "link" : "tofu\/higherKind\/Function2K$.html#untupled[F[_],G[_],H[_]](fk:[γ$3$]cats.data.Tuple2K[F,G,γ$3$]~>H):tofu.higherKind.Function2K[F,G,H]", "kind" : "def"}, {"label" : "apply", "tail" : "(maker: MakeFunctionK[F, G, H]): Function2K[F, G, H]", "member" : "tofu.higherKind.Function2K.apply", "link" : "tofu\/higherKind\/Function2K$.html#apply[F[_],G[_],H[_]](maker:tofu.higherKind.Function2K.MakeFunctionK[F,G,H]):tofu.higherKind.Function2K[F,G,H]", "kind" : "def"}, {"label" : "representableK", "tail" : "(): RepresentableK[[γ$1$[_$1]]Function2K[F, G, γ$1$]]", "member" : "tofu.higherKind.Function2K.representableK", "link" : "tofu\/higherKind\/Function2K$.html#representableK[F[_],G[_]]:tofu.higherKind.RepresentableK[[γ$1$[_$1]]tofu.higherKind.Function2K[F,G,γ$1$]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/higherKind\/Function2K$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/higherKind\/Function2K$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/higherKind\/Function2K$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/higherKind\/Function2K$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/higherKind\/Function2K$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/higherKind\/Function2K$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/higherKind\/Function2K$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/Function2K$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/Function2K$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/Function2K$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/higherKind\/Function2K$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/higherKind\/Function2K$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/higherKind\/Function2K$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/higherKind\/Function2K$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/higherKind\/Function2K$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/higherKind\/Function2K$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/higherKind\/Function2K$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/higherKind\/Function2K$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/higherKind\/Function2K$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"member" : "tofu.higherKind.Function2K.Arbitrary", "error" : "unsupported entity"}], "trait" : "tofu\/higherKind\/Function2K.html", "kind" : "trait", "members_trait" : [{"label" : "tupled", "tail" : "(): ~>[[γ$0$]Tuple2K[F, G, γ$0$], H]", "member" : "tofu.higherKind.Function2K.tupled", "link" : "tofu\/higherKind\/Function2K.html#tupled:[γ$0$]cats.data.Tuple2K[F,G,γ$0$]~>H", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/higherKind\/Function2K.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/higherKind\/Function2K.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/higherKind\/Function2K.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/higherKind\/Function2K.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/higherKind\/Function2K.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/higherKind\/Function2K.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/higherKind\/Function2K.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/Function2K.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/Function2K.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/Function2K.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/higherKind\/Function2K.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/higherKind\/Function2K.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/higherKind\/Function2K.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/higherKind\/Function2K.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/higherKind\/Function2K.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/higherKind\/Function2K.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/higherKind\/Function2K.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/higherKind\/Function2K.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/higherKind\/Function2K.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(fa: F[A], ga: G[A]): H[A]", "member" : "tofu.higherKind.Function2K.apply", "link" : "tofu\/higherKind\/Function2K.html#apply[A](fa:F[A],ga:G[A]):H[A]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.higherKind.Mid", "object" : "tofu\/higherKind\/Mid$.html", "members_object" : [{"label" : "TofuMidAlgebraSyntax", "tail" : "", "member" : "tofu.higherKind.Mid.TofuMidAlgebraSyntax", "link" : "tofu\/higherKind\/Mid$.html#TofuMidAlgebraSyntax[F[_],U[f[_]]]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "attach", "tail" : "(up: U[[β$2$]Mid[F, β$2$]])(alg: U[F])(arg0: ApplyK[U]): U[F]", "member" : "tofu.higherKind.Mid.attach", "link" : "tofu\/higherKind\/Mid$.html#attach[U[f[_]],F[_]](up:U[[β$2$]tofu.higherKind.Mid[F,β$2$]])(alg:U[F])(implicitevidence$1:cats.tagless.ApplyK[U]):U[F]", "kind" : "def"}, {"label" : "point", "tail" : "(): Point[[β$0$]Mid[F, β$0$]]", "member" : "tofu.higherKind.Mid.point", "link" : "tofu\/higherKind\/Mid$.html#point[F[_]]:tofu.higherKind.Point[[β$0$]tofu.higherKind.Mid[F,β$0$]]", "kind" : "def"}, {"label" : "preAlgebraMonoid", "tail" : "(arg0: MonoidalK[U]): Monoid[U[[β$6$]Mid[F, β$6$]]]", "member" : "tofu.higherKind.MidInstances.preAlgebraMonoid", "link" : "tofu\/higherKind\/Mid$.html#preAlgebraMonoid[F[_],U[f[_]]](implicitevidence$2:tofu.higherKind.MonoidalK[U]):cats.Monoid[U[[β$6$]tofu.higherKind.Mid[F,β$6$]]]", "kind" : "implicit def"}, {"label" : "preMonoidK", "tail" : "(): MonoidK[[β$5$]Mid[F, β$5$]]", "member" : "tofu.higherKind.MidInstances.preMonoidK", "link" : "tofu\/higherKind\/Mid$.html#preMonoidK[F[_]]:cats.MonoidK[[β$5$]tofu.higherKind.Mid[F,β$5$]]", "kind" : "implicit def"}, {"label" : "preAlgebraMonoid", "tail" : "(arg0: ApplyK[U]): Semigroup[U[[β$7$]Mid[F, β$7$]]]", "member" : "tofu.higherKind.MidInstances1.preAlgebraMonoid", "link" : "tofu\/higherKind\/Mid$.html#preAlgebraMonoid[F[_],U[f[_]]](implicitevidence$3:cats.tagless.ApplyK[U]):cats.Semigroup[U[[β$7$]tofu.higherKind.Mid[F,β$7$]]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/higherKind\/Mid$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/higherKind\/Mid$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/higherKind\/Mid$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/higherKind\/Mid$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/higherKind\/Mid$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/higherKind\/Mid$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/higherKind\/Mid$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/Mid$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/Mid$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/Mid$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/higherKind\/Mid$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/higherKind\/Mid$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/higherKind\/Mid$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/higherKind\/Mid$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/higherKind\/Mid$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/higherKind\/Mid$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/higherKind\/Mid$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/higherKind\/Mid$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/higherKind\/Mid$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/higherKind\/Mid.html", "kind" : "trait", "members_trait" : [{"label" : "andThen", "tail" : "(that: Mid[F, A]): Mid[F, A]", "member" : "tofu.higherKind.Mid.andThen", "link" : "tofu\/higherKind\/Mid.html#andThen(that:tofu.higherKind.Mid[F,A]):tofu.higherKind.Mid[F,A]", "kind" : "def"}, {"label" : "compose", "tail" : "(that: Mid[F, A]): Mid[F, A]", "member" : "tofu.higherKind.Mid.compose", "link" : "tofu\/higherKind\/Mid.html#compose(that:tofu.higherKind.Mid[F,A]):tofu.higherKind.Mid[F,A]", "kind" : "def"}, {"label" : "attach", "tail" : "(fa: F[A]): F[A]", "member" : "tofu.higherKind.Mid.attach", "link" : "tofu\/higherKind\/Mid.html#attach(fa:F[A]):F[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/higherKind\/Mid.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/higherKind\/Mid.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/higherKind\/Mid.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/higherKind\/Mid.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/higherKind\/Mid.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/higherKind\/Mid.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/higherKind\/Mid.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/Mid.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/Mid.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/Mid.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/higherKind\/Mid.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/higherKind\/Mid.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/higherKind\/Mid.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/higherKind\/Mid.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/higherKind\/Mid.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/higherKind\/Mid.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/higherKind\/Mid.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/higherKind\/Mid.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/higherKind\/Mid.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(fa: F[A]): F[A]", "member" : "tofu.higherKind.Mid.apply", "link" : "tofu\/higherKind\/Mid.html#apply(fa:F[A]):F[A]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.higherKind.MidAlgebraMonoid", "shortDescription" : "", "members_class" : [{"label" : "empty", "tail" : "(): U[[β$10$]Mid[F, β$10$]]", "member" : "tofu.higherKind.MidAlgebraMonoid.empty", "link" : "tofu\/higherKind\/MidAlgebraMonoid.html#empty:U[[β$10$]tofu.higherKind.Mid[F,β$10$]]", "kind" : "def"}, {"member" : "tofu.higherKind.MidAlgebraMonoid#<init>", "error" : "unsupported entity"}, {"label" : "combineAllOption", "tail" : "(as: IterableOnce[U[[β$9$]Mid[F, β$9$]]]): Option[U[[β$9$]Mid[F, β$9$]]]", "member" : "cats.kernel.Monoid.combineAllOption", "link" : "tofu\/higherKind\/MidAlgebraMonoid.html#combineAllOption(as:IterableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "combineAll", "tail" : "(as: IterableOnce[U[[β$9$]Mid[F, β$9$]]]): U[[β$9$]Mid[F, β$9$]]", "member" : "cats.kernel.Monoid.combineAll", "link" : "tofu\/higherKind\/MidAlgebraMonoid.html#combineAll(as:IterableOnce[A]):A", "kind" : "def"}, {"label" : "combineN", "tail" : "(a: U[[β$9$]Mid[F, β$9$]], n: Int): U[[β$9$]Mid[F, β$9$]]", "member" : "cats.kernel.Monoid.combineN", "link" : "tofu\/higherKind\/MidAlgebraMonoid.html#combineN(a:A,n:Int):A", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(a: U[[β$9$]Mid[F, β$9$]])(ev: Eq[U[[β$9$]Mid[F, β$9$]]]): Boolean", "member" : "cats.kernel.Monoid.isEmpty", "link" : "tofu\/higherKind\/MidAlgebraMonoid.html#isEmpty(a:A)(implicitev:cats.kernel.Eq[A]):Boolean", "kind" : "def"}, {"label" : "combine", "tail" : "(x: U[[β$12$]Mid[F, β$12$]], y: U[[β$13$]Mid[F, β$13$]]): U[[β$14$]Mid[F, β$14$]]", "member" : "tofu.higherKind.MidAlgebraSemigroup.combine", "link" : "tofu\/higherKind\/MidAlgebraMonoid.html#combine(x:U[[β$12$]tofu.higherKind.Mid[F,β$12$]],y:U[[β$13$]tofu.higherKind.Mid[F,β$13$]]):U[[β$14$]tofu.higherKind.Mid[F,β$14$]]", "kind" : "def"}, {"label" : "repeatedCombineN", "tail" : "(a: U[[β$11$]Mid[F, β$11$]], n: Int): U[[β$11$]Mid[F, β$11$]]", "member" : "cats.kernel.Semigroup.repeatedCombineN", "link" : "tofu\/higherKind\/MidAlgebraMonoid.html#repeatedCombineN(a:A,n:Int):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/higherKind\/MidAlgebraMonoid.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/higherKind\/MidAlgebraMonoid.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/higherKind\/MidAlgebraMonoid.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/higherKind\/MidAlgebraMonoid.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/higherKind\/MidAlgebraMonoid.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/higherKind\/MidAlgebraMonoid.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/higherKind\/MidAlgebraMonoid.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/MidAlgebraMonoid.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/MidAlgebraMonoid.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/MidAlgebraMonoid.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/higherKind\/MidAlgebraMonoid.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/higherKind\/MidAlgebraMonoid.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/higherKind\/MidAlgebraMonoid.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/higherKind\/MidAlgebraMonoid.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/higherKind\/MidAlgebraMonoid.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/higherKind\/MidAlgebraMonoid.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/higherKind\/MidAlgebraMonoid.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/higherKind\/MidAlgebraMonoid.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/higherKind\/MidAlgebraMonoid.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "tofu\/higherKind\/MidAlgebraMonoid.html", "kind" : "class"}, {"name" : "tofu.higherKind.MidAlgebraSemigroup", "shortDescription" : "", "members_class" : [{"label" : "combine", "tail" : "(x: U[[β$12$]Mid[F, β$12$]], y: U[[β$13$]Mid[F, β$13$]]): U[[β$14$]Mid[F, β$14$]]", "member" : "tofu.higherKind.MidAlgebraSemigroup.combine", "link" : "tofu\/higherKind\/MidAlgebraSemigroup.html#combine(x:U[[β$12$]tofu.higherKind.Mid[F,β$12$]],y:U[[β$13$]tofu.higherKind.Mid[F,β$13$]]):U[[β$14$]tofu.higherKind.Mid[F,β$14$]]", "kind" : "def"}, {"member" : "tofu.higherKind.MidAlgebraSemigroup#<init>", "error" : "unsupported entity"}, {"label" : "combineAllOption", "tail" : "(as: IterableOnce[U[[β$11$]Mid[F, β$11$]]]): Option[U[[β$11$]Mid[F, β$11$]]]", "member" : "cats.kernel.Semigroup.combineAllOption", "link" : "tofu\/higherKind\/MidAlgebraSemigroup.html#combineAllOption(as:IterableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "repeatedCombineN", "tail" : "(a: U[[β$11$]Mid[F, β$11$]], n: Int): U[[β$11$]Mid[F, β$11$]]", "member" : "cats.kernel.Semigroup.repeatedCombineN", "link" : "tofu\/higherKind\/MidAlgebraSemigroup.html#repeatedCombineN(a:A,n:Int):A", "kind" : "def"}, {"label" : "combineN", "tail" : "(a: U[[β$11$]Mid[F, β$11$]], n: Int): U[[β$11$]Mid[F, β$11$]]", "member" : "cats.kernel.Semigroup.combineN", "link" : "tofu\/higherKind\/MidAlgebraSemigroup.html#combineN(a:A,n:Int):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/higherKind\/MidAlgebraSemigroup.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/higherKind\/MidAlgebraSemigroup.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/higherKind\/MidAlgebraSemigroup.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/higherKind\/MidAlgebraSemigroup.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/higherKind\/MidAlgebraSemigroup.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/higherKind\/MidAlgebraSemigroup.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/higherKind\/MidAlgebraSemigroup.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/MidAlgebraSemigroup.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/MidAlgebraSemigroup.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/MidAlgebraSemigroup.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/higherKind\/MidAlgebraSemigroup.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/higherKind\/MidAlgebraSemigroup.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/higherKind\/MidAlgebraSemigroup.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/higherKind\/MidAlgebraSemigroup.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/higherKind\/MidAlgebraSemigroup.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/higherKind\/MidAlgebraSemigroup.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/higherKind\/MidAlgebraSemigroup.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/higherKind\/MidAlgebraSemigroup.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/higherKind\/MidAlgebraSemigroup.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "tofu\/higherKind\/MidAlgebraSemigroup.html", "kind" : "class"}, {"name" : "tofu.higherKind.MidInstances", "trait" : "tofu\/higherKind\/MidInstances.html", "kind" : "trait", "members_trait" : [{"label" : "preAlgebraMonoid", "tail" : "(arg0: MonoidalK[U]): Monoid[U[[β$6$]Mid[F, β$6$]]]", "member" : "tofu.higherKind.MidInstances.preAlgebraMonoid", "link" : "tofu\/higherKind\/MidInstances.html#preAlgebraMonoid[F[_],U[f[_]]](implicitevidence$2:tofu.higherKind.MonoidalK[U]):cats.Monoid[U[[β$6$]tofu.higherKind.Mid[F,β$6$]]]", "kind" : "implicit def"}, {"label" : "preMonoidK", "tail" : "(): MonoidK[[β$5$]Mid[F, β$5$]]", "member" : "tofu.higherKind.MidInstances.preMonoidK", "link" : "tofu\/higherKind\/MidInstances.html#preMonoidK[F[_]]:cats.MonoidK[[β$5$]tofu.higherKind.Mid[F,β$5$]]", "kind" : "implicit def"}, {"label" : "preAlgebraMonoid", "tail" : "(arg0: ApplyK[U]): Semigroup[U[[β$7$]Mid[F, β$7$]]]", "member" : "tofu.higherKind.MidInstances1.preAlgebraMonoid", "link" : "tofu\/higherKind\/MidInstances.html#preAlgebraMonoid[F[_],U[f[_]]](implicitevidence$3:cats.tagless.ApplyK[U]):cats.Semigroup[U[[β$7$]tofu.higherKind.Mid[F,β$7$]]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/higherKind\/MidInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/higherKind\/MidInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/higherKind\/MidInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/higherKind\/MidInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/higherKind\/MidInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/higherKind\/MidInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/higherKind\/MidInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/MidInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/MidInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/MidInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/higherKind\/MidInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/higherKind\/MidInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/higherKind\/MidInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/higherKind\/MidInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/higherKind\/MidInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/higherKind\/MidInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/higherKind\/MidInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/higherKind\/MidInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/higherKind\/MidInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "tofu.higherKind.MidInstances1", "trait" : "tofu\/higherKind\/MidInstances1.html", "kind" : "trait", "members_trait" : [{"label" : "preAlgebraMonoid", "tail" : "(arg0: ApplyK[U]): Semigroup[U[[β$7$]Mid[F, β$7$]]]", "member" : "tofu.higherKind.MidInstances1.preAlgebraMonoid", "link" : "tofu\/higherKind\/MidInstances1.html#preAlgebraMonoid[F[_],U[f[_]]](implicitevidence$3:cats.tagless.ApplyK[U]):cats.Semigroup[U[[β$7$]tofu.higherKind.Mid[F,β$7$]]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/higherKind\/MidInstances1.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/higherKind\/MidInstances1.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/higherKind\/MidInstances1.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/higherKind\/MidInstances1.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/higherKind\/MidInstances1.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/higherKind\/MidInstances1.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/higherKind\/MidInstances1.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/MidInstances1.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/MidInstances1.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/MidInstances1.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/higherKind\/MidInstances1.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/higherKind\/MidInstances1.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/higherKind\/MidInstances1.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/higherKind\/MidInstances1.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/higherKind\/MidInstances1.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/higherKind\/MidInstances1.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/higherKind\/MidInstances1.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/higherKind\/MidInstances1.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/higherKind\/MidInstances1.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "tofu.higherKind.MidMonoidK", "shortDescription" : "", "members_class" : [{"label" : "combineK", "tail" : "(x: Mid[F, A], y: Mid[F, A]): Mid[F, A]", "member" : "tofu.higherKind.MidMonoidK.combineK", "link" : "tofu\/higherKind\/MidMonoidK.html#combineK[A](x:tofu.higherKind.Mid[F,A],y:tofu.higherKind.Mid[F,A]):tofu.higherKind.Mid[F,A]", "kind" : "def"}, {"label" : "empty", "tail" : "(): Mid[F, A]", "member" : "tofu.higherKind.MidMonoidK.empty", "link" : "tofu\/higherKind\/MidMonoidK.html#empty[A]:tofu.higherKind.Mid[F,A]", "kind" : "def"}, {"member" : "tofu.higherKind.MidMonoidK#<init>", "error" : "unsupported entity"}, {"label" : "compose", "tail" : "(): MonoidK[[α]Mid[F, G[α]]]", "member" : "cats.MonoidK.compose", "link" : "tofu\/higherKind\/MidMonoidK.html#compose[G[_]]:cats.MonoidK[[α]F[G[α]]]", "kind" : "def"}, {"label" : "algebra", "tail" : "(): Monoid[Mid[F, A]]", "member" : "cats.MonoidK.algebra", "link" : "tofu\/higherKind\/MidMonoidK.html#algebra[A]:cats.Monoid[F[A]]", "kind" : "def"}, {"label" : "sum", "tail" : "(fa: Mid[F, A], fb: Mid[F, B])(F: Functor[[β$8$]Mid[F, β$8$]]): Mid[F, Either[A, B]]", "member" : "cats.SemigroupK.sum", "link" : "tofu\/higherKind\/MidMonoidK.html#sum[A,B](fa:F[A],fb:F[B])(implicitF:cats.Functor[F]):F[Either[A,B]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/higherKind\/MidMonoidK.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/higherKind\/MidMonoidK.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/higherKind\/MidMonoidK.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/higherKind\/MidMonoidK.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/higherKind\/MidMonoidK.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/higherKind\/MidMonoidK.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/higherKind\/MidMonoidK.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/MidMonoidK.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/MidMonoidK.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/MidMonoidK.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/higherKind\/MidMonoidK.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/higherKind\/MidMonoidK.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/higherKind\/MidMonoidK.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/higherKind\/MidMonoidK.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/higherKind\/MidMonoidK.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/higherKind\/MidMonoidK.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/higherKind\/MidMonoidK.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/higherKind\/MidMonoidK.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/higherKind\/MidMonoidK.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "tofu\/higherKind\/MidMonoidK.html", "kind" : "class"}, {"name" : "tofu.higherKind.MonoidalK", "object" : "tofu\/higherKind\/MonoidalK$.html", "members_object" : [{"label" : "ops", "tail" : "", "member" : "tofu.higherKind.MonoidalK.ops", "link" : "tofu\/higherKind\/MonoidalK$.html#ops", "kind" : "object"}, {"label" : "AllOps", "tail" : "", "member" : "tofu.higherKind.MonoidalK.AllOps", "link" : "tofu\/higherKind\/MonoidalK$.html#AllOps[U[_[_]],A[_]]extendsMonoidalK.Ops[U,A]withPureK.AllOps[U,A]withApplyK.AllOps[U,A]", "kind" : "trait"}, {"label" : "nonInheritedOps", "tail" : "", "member" : "tofu.higherKind.MonoidalK.nonInheritedOps", "link" : "tofu\/higherKind\/MonoidalK$.html#nonInheritedOps", "kind" : "object"}, {"label" : "ToMonoidalKOps", "tail" : "", "member" : "tofu.higherKind.MonoidalK.ToMonoidalKOps", "link" : "tofu\/higherKind\/MonoidalK$.html#ToMonoidalKOpsextendsAnyRef", "kind" : "trait"}, {"label" : "Ops", "tail" : "", "member" : "tofu.higherKind.MonoidalK.Ops", "link" : "tofu\/higherKind\/MonoidalK$.html#Ops[U[_[_]],A[_]]extendsAnyRef", "kind" : "trait"}, {"label" : "apply", "tail" : "(instance: MonoidalK[U]): MonoidalK[U]", "member" : "tofu.higherKind.MonoidalK.apply", "link" : "tofu\/higherKind\/MonoidalK$.html#apply[U[_[_]]](implicitinstance:tofu.higherKind.MonoidalK[U]):tofu.higherKind.MonoidalK[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/higherKind\/MonoidalK$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/higherKind\/MonoidalK$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/higherKind\/MonoidalK$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/higherKind\/MonoidalK$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/higherKind\/MonoidalK$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/higherKind\/MonoidalK$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/higherKind\/MonoidalK$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/MonoidalK$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/MonoidalK$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/MonoidalK$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/higherKind\/MonoidalK$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/higherKind\/MonoidalK$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/higherKind\/MonoidalK$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/higherKind\/MonoidalK$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/higherKind\/MonoidalK$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/higherKind\/MonoidalK$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/higherKind\/MonoidalK$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/higherKind\/MonoidalK$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/higherKind\/MonoidalK$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/higherKind\/MonoidalK.html", "kind" : "trait", "members_trait" : [{"label" : "productK", "tail" : "(af: U[F], ag: U[G]): U[[γ$1$]Tuple2K[F, G, γ$1$]]", "member" : "tofu.higherKind.MonoidalK.productK", "link" : "tofu\/higherKind\/MonoidalK.html#productK[F[_],G[_]](af:U[F],ag:U[G]):U[[γ$1$]cats.data.Tuple2K[F,G,γ$1$]]", "kind" : "def"}, {"label" : "mapK", "tail" : "(af: U[F])(fk: ~>[F, G]): U[G]", "member" : "tofu.higherKind.MonoidalK.mapK", "link" : "tofu\/higherKind\/MonoidalK.html#mapK[F[_],G[_]](af:U[F])(fk:F~>G):U[G]", "kind" : "def"}, {"label" : "map2K", "tail" : "(af: U[F], ag: U[G])(f: ~>[[γ$0$]Tuple2K[F, G, γ$0$], H]): U[H]", "member" : "tofu.higherKind.MonoidalK.map2K", "link" : "tofu\/higherKind\/MonoidalK.html#map2K[F[_],G[_],H[_]](af:U[F],ag:U[G])(f:[γ$0$]cats.data.Tuple2K[F,G,γ$0$]~>H):U[H]", "kind" : "def"}, {"label" : "imapK", "tail" : "(af: U[F])(fk: ~>[F, G])(gK: ~>[G, F]): U[G]", "member" : "cats.tagless.FunctorK.imapK", "link" : "tofu\/higherKind\/MonoidalK.html#imapK[F[_],G[_]](af:A[F])(fk:F~>G)(gK:G~>F):A[G]", "kind" : "def"}, {"label" : "unitK", "tail" : "(): U[UnitK]", "member" : "tofu.higherKind.PureK.unitK", "link" : "tofu\/higherKind\/MonoidalK.html#unitK:U[tofu.higherKind.UnitK]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/higherKind\/MonoidalK.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/higherKind\/MonoidalK.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/higherKind\/MonoidalK.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/higherKind\/MonoidalK.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/higherKind\/MonoidalK.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/higherKind\/MonoidalK.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/higherKind\/MonoidalK.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/MonoidalK.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/MonoidalK.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/MonoidalK.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/higherKind\/MonoidalK.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/higherKind\/MonoidalK.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/higherKind\/MonoidalK.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/higherKind\/MonoidalK.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/higherKind\/MonoidalK.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/higherKind\/MonoidalK.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/higherKind\/MonoidalK.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/higherKind\/MonoidalK.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/higherKind\/MonoidalK.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "zipWith2K", "tail" : "(af: U[F], ag: U[G])(f2: Function2K[F, G, H]): U[H]", "member" : "tofu.higherKind.MonoidalK.zipWith2K", "link" : "tofu\/higherKind\/MonoidalK.html#zipWith2K[F[_],G[_],H[_]](af:U[F],ag:U[G])(f2:tofu.higherKind.Function2K[F,G,H]):U[H]", "kind" : "abstract def"}, {"label" : "pureK", "tail" : "(p: Point[F]): U[F]", "member" : "tofu.higherKind.PureK.pureK", "link" : "tofu\/higherKind\/MonoidalK.html#pureK[F[_]](p:tofu.higherKind.Point[F]):U[F]", "kind" : "abstract def"}], "shortDescription" : "higher order form of monoidal functorfor all F[_], uf: U[F] , zipWith2K(uf, unitK)(Function2K((f, _) => f)) == uf for all F[_], uf: U[F] , zipWith2K(unitK, uf)(Function2K((_, f) => f)) == uf"}, {"name" : "tofu.higherKind.Point", "object" : "tofu\/higherKind\/Point$.html", "members_object" : [{"label" : "pointRepresentable", "tail" : ": RepresentableK[Point]", "member" : "tofu.higherKind.Point.pointRepresentable", "link" : "tofu\/higherKind\/Point$.html#pointRepresentable:tofu.higherKind.RepresentableK[tofu.higherKind.Point]", "kind" : "implicit val"}, {"label" : "contraMonoidal", "tail" : "(F: ContravariantMonoidal[F]): Point[F]", "member" : "tofu.higherKind.Point.contraMonoidal", "link" : "tofu\/higherKind\/Point$.html#contraMonoidal[F[_]](implicitF:cats.ContravariantMonoidal[F]):tofu.higherKind.Point[F]", "kind" : "def"}, {"label" : "emptyK", "tail" : "(F: MonoidK[F]): Point[F]", "member" : "tofu.higherKind.Point.emptyK", "link" : "tofu\/higherKind\/Point$.html#emptyK[F[_]](implicitF:cats.MonoidK[F]):tofu.higherKind.Point[F]", "kind" : "def"}, {"label" : "contravariant", "tail" : "(fn: F[Any]): Point[F]", "member" : "tofu.higherKind.Point.contravariant", "link" : "tofu\/higherKind\/Point$.html#contravariant[F[-_]](fn:F[Any]):tofu.higherKind.Point[F]", "kind" : "def"}, {"label" : "covariant", "tail" : "(fn: F[Nothing]): Point[F]", "member" : "tofu.higherKind.Point.covariant", "link" : "tofu\/higherKind\/Point$.html#covariant[F[+_]](fn:F[Nothing]):tofu.higherKind.Point[F]", "kind" : "def"}, {"label" : "unit", "tail" : ": Point[UnitK]", "member" : "tofu.higherKind.Point.unit", "link" : "tofu\/higherKind\/Point$.html#unit:tofu.higherKind.Point[tofu.higherKind.UnitK]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/higherKind\/Point$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/higherKind\/Point$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/higherKind\/Point$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/higherKind\/Point$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/higherKind\/Point$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/higherKind\/Point$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/higherKind\/Point$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/Point$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/Point$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/Point$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/higherKind\/Point$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/higherKind\/Point$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/higherKind\/Point$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/higherKind\/Point$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/higherKind\/Point$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/higherKind\/Point$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/higherKind\/Point$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/higherKind\/Point$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/higherKind\/Point$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/higherKind\/Point.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/higherKind\/Point.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/higherKind\/Point.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/higherKind\/Point.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/higherKind\/Point.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/higherKind\/Point.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/higherKind\/Point.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/higherKind\/Point.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/Point.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/Point.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/Point.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/higherKind\/Point.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/higherKind\/Point.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/higherKind\/Point.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/higherKind\/Point.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/higherKind\/Point.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/higherKind\/Point.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/higherKind\/Point.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/higherKind\/Point.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/higherKind\/Point.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "point", "tail" : "(): F[A]", "member" : "tofu.higherKind.Point.point", "link" : "tofu\/higherKind\/Point.html#point[A]:F[A]", "kind" : "abstract def"}], "shortDescription" : "equivalent of UnitK ~> Fget F[A] for any given type Auseful for empty values or typeconstructors with phantom parametersmay look like a type class but is not"}, {"name" : "tofu.higherKind.Post", "object" : "tofu\/higherKind\/Post$.html", "members_object" : [{"label" : "TofuPostAlgebraSyntax", "tail" : "", "member" : "tofu.higherKind.Post.TofuPostAlgebraSyntax", "link" : "tofu\/higherKind\/Post$.html#TofuPostAlgebraSyntax[F[_],U[f[_]]]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "asMid", "tail" : "(arg0: FlatMap[F]): ~>[[β$3$]Post[F, β$3$], [β$4$]Mid[F, β$4$]]", "member" : "tofu.higherKind.Post.asMid", "link" : "tofu\/higherKind\/Post$.html#asMid[F[_]](implicitevidence$3:cats.FlatMap[F]):[β$3$]tofu.higherKind.Post[F,β$3$]~>[β$4$]tofu.higherKind.Mid[F,β$4$]", "kind" : "def"}, {"label" : "attach", "tail" : "(up: U[[β$2$]Post[F, β$2$]])(alg: U[F])(arg0: ApplyK[U], arg1: FlatMap[F]): U[F]", "member" : "tofu.higherKind.Post.attach", "link" : "tofu\/higherKind\/Post$.html#attach[U[f[_]],F[_]](up:U[[β$2$]tofu.higherKind.Post[F,β$2$]])(alg:U[F])(implicitevidence$1:cats.tagless.ApplyK[U],implicitevidence$2:cats.FlatMap[F]):U[F]", "kind" : "def"}, {"label" : "point", "tail" : "(F: Applicative[F]): Point[[β$0$]Post[F, β$0$]]", "member" : "tofu.higherKind.Post.point", "link" : "tofu\/higherKind\/Post$.html#point[F[_]](implicitF:cats.Applicative[F]):tofu.higherKind.Point[[β$0$]tofu.higherKind.Post[F,β$0$]]", "kind" : "def"}, {"label" : "postAlgebraMonoid", "tail" : "(arg0: Applicative[F], arg1: MonoidalK[U]): Monoid[U[[β$8$]Post[F, β$8$]]]", "member" : "tofu.higherKind.PostInstances.postAlgebraMonoid", "link" : "tofu\/higherKind\/Post$.html#postAlgebraMonoid[F[_],U[f[_]]](implicitevidence$5:cats.Applicative[F],implicitevidence$6:tofu.higherKind.MonoidalK[U]):cats.Monoid[U[[β$8$]tofu.higherKind.Post[F,β$8$]]]", "kind" : "implicit def"}, {"label" : "postMonoidK", "tail" : "(arg0: Applicative[F]): MonoidK[[β$7$]Post[F, β$7$]]", "member" : "tofu.higherKind.PostInstances.postMonoidK", "link" : "tofu\/higherKind\/Post$.html#postMonoidK[F[_]](implicitevidence$4:cats.Applicative[F]):cats.MonoidK[[β$7$]tofu.higherKind.Post[F,β$7$]]", "kind" : "implicit def"}, {"label" : "postAlgebraSemigroup", "tail" : "(arg0: Apply[F], arg1: ApplyK[U]): Semigroup[U[[β$10$]Post[F, β$10$]]]", "member" : "tofu.higherKind.PostInstances1.postAlgebraSemigroup", "link" : "tofu\/higherKind\/Post$.html#postAlgebraSemigroup[F[_],U[f[_]]](implicitevidence$8:cats.Apply[F],implicitevidence$9:cats.tagless.ApplyK[U]):cats.Semigroup[U[[β$10$]tofu.higherKind.Post[F,β$10$]]]", "kind" : "implicit def"}, {"label" : "postSemigroupK", "tail" : "(arg0: Apply[F]): SemigroupK[[β$9$]Post[F, β$9$]]", "member" : "tofu.higherKind.PostInstances1.postSemigroupK", "link" : "tofu\/higherKind\/Post$.html#postSemigroupK[F[_]](implicitevidence$7:cats.Apply[F]):cats.SemigroupK[[β$9$]tofu.higherKind.Post[F,β$9$]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/higherKind\/Post$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/higherKind\/Post$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/higherKind\/Post$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/higherKind\/Post$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/higherKind\/Post$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/higherKind\/Post$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/higherKind\/Post$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/Post$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/Post$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/Post$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/higherKind\/Post$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/higherKind\/Post$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/higherKind\/Post$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/higherKind\/Post$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/higherKind\/Post$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/higherKind\/Post$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/higherKind\/Post$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/higherKind\/Post$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/higherKind\/Post$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/higherKind\/Post.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/higherKind\/Post.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/higherKind\/Post.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/higherKind\/Post.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/higherKind\/Post.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/higherKind\/Post.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/higherKind\/Post.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/higherKind\/Post.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/Post.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/Post.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/Post.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/higherKind\/Post.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/higherKind\/Post.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/higherKind\/Post.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/higherKind\/Post.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/higherKind\/Post.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/higherKind\/Post.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/higherKind\/Post.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/higherKind\/Post.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/higherKind\/Post.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(a: A): F[Unit]", "member" : "tofu.higherKind.Post.apply", "link" : "tofu\/higherKind\/Post.html#apply(a:A):F[Unit]", "kind" : "abstract def"}], "shortDescription" : "a function [F[_], A] =>> A => F[Unit]an algebra U[Post[F], A] is an algebra which translates all actions to A => F[Unit]this is useful to represent actions succeeding main logic"}, {"name" : "tofu.higherKind.PostInstances", "shortDescription" : "", "members_class" : [{"label" : "postAlgebraMonoid", "tail" : "(arg0: Applicative[F], arg1: MonoidalK[U]): Monoid[U[[β$8$]Post[F, β$8$]]]", "member" : "tofu.higherKind.PostInstances.postAlgebraMonoid", "link" : "tofu\/higherKind\/PostInstances.html#postAlgebraMonoid[F[_],U[f[_]]](implicitevidence$5:cats.Applicative[F],implicitevidence$6:tofu.higherKind.MonoidalK[U]):cats.Monoid[U[[β$8$]tofu.higherKind.Post[F,β$8$]]]", "kind" : "implicit def"}, {"label" : "postMonoidK", "tail" : "(arg0: Applicative[F]): MonoidK[[β$7$]Post[F, β$7$]]", "member" : "tofu.higherKind.PostInstances.postMonoidK", "link" : "tofu\/higherKind\/PostInstances.html#postMonoidK[F[_]](implicitevidence$4:cats.Applicative[F]):cats.MonoidK[[β$7$]tofu.higherKind.Post[F,β$7$]]", "kind" : "implicit def"}, {"member" : "tofu.higherKind.PostInstances#<init>", "error" : "unsupported entity"}, {"label" : "postAlgebraSemigroup", "tail" : "(arg0: Apply[F], arg1: ApplyK[U]): Semigroup[U[[β$10$]Post[F, β$10$]]]", "member" : "tofu.higherKind.PostInstances1.postAlgebraSemigroup", "link" : "tofu\/higherKind\/PostInstances.html#postAlgebraSemigroup[F[_],U[f[_]]](implicitevidence$8:cats.Apply[F],implicitevidence$9:cats.tagless.ApplyK[U]):cats.Semigroup[U[[β$10$]tofu.higherKind.Post[F,β$10$]]]", "kind" : "implicit def"}, {"label" : "postSemigroupK", "tail" : "(arg0: Apply[F]): SemigroupK[[β$9$]Post[F, β$9$]]", "member" : "tofu.higherKind.PostInstances1.postSemigroupK", "link" : "tofu\/higherKind\/PostInstances.html#postSemigroupK[F[_]](implicitevidence$7:cats.Apply[F]):cats.SemigroupK[[β$9$]tofu.higherKind.Post[F,β$9$]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/higherKind\/PostInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/higherKind\/PostInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/higherKind\/PostInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/higherKind\/PostInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/higherKind\/PostInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/higherKind\/PostInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/higherKind\/PostInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/PostInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/PostInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/PostInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/higherKind\/PostInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/higherKind\/PostInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/higherKind\/PostInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/higherKind\/PostInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/higherKind\/PostInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/higherKind\/PostInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/higherKind\/PostInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/higherKind\/PostInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/higherKind\/PostInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "tofu\/higherKind\/PostInstances.html", "kind" : "class"}, {"name" : "tofu.higherKind.PostInstances1", "shortDescription" : "", "members_class" : [{"label" : "postAlgebraSemigroup", "tail" : "(arg0: Apply[F], arg1: ApplyK[U]): Semigroup[U[[β$10$]Post[F, β$10$]]]", "member" : "tofu.higherKind.PostInstances1.postAlgebraSemigroup", "link" : "tofu\/higherKind\/PostInstances1.html#postAlgebraSemigroup[F[_],U[f[_]]](implicitevidence$8:cats.Apply[F],implicitevidence$9:cats.tagless.ApplyK[U]):cats.Semigroup[U[[β$10$]tofu.higherKind.Post[F,β$10$]]]", "kind" : "implicit def"}, {"label" : "postSemigroupK", "tail" : "(arg0: Apply[F]): SemigroupK[[β$9$]Post[F, β$9$]]", "member" : "tofu.higherKind.PostInstances1.postSemigroupK", "link" : "tofu\/higherKind\/PostInstances1.html#postSemigroupK[F[_]](implicitevidence$7:cats.Apply[F]):cats.SemigroupK[[β$9$]tofu.higherKind.Post[F,β$9$]]", "kind" : "implicit def"}, {"member" : "tofu.higherKind.PostInstances1#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/higherKind\/PostInstances1.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/higherKind\/PostInstances1.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/higherKind\/PostInstances1.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/higherKind\/PostInstances1.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/higherKind\/PostInstances1.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/higherKind\/PostInstances1.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/higherKind\/PostInstances1.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/PostInstances1.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/PostInstances1.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/PostInstances1.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/higherKind\/PostInstances1.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/higherKind\/PostInstances1.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/higherKind\/PostInstances1.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/higherKind\/PostInstances1.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/higherKind\/PostInstances1.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/higherKind\/PostInstances1.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/higherKind\/PostInstances1.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/higherKind\/PostInstances1.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/higherKind\/PostInstances1.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "tofu\/higherKind\/PostInstances1.html", "kind" : "class"}, {"name" : "tofu.higherKind.Pre", "shortDescription" : "newtype for [F[_], A] =>> F[Unit]an algebra U[Pre[F], A] is an algebra which translates all actions to F[Unit]this is useful to represent actions preceding main logic", "object" : "tofu\/higherKind\/Pre$.html", "members_object" : [{"label" : "point", "tail" : "(F: Applicative[F]): Point[[β$5$]T[F, β$5$]]", "member" : "tofu.higherKind.Pre.point", "link" : "tofu\/higherKind\/Pre$.html#point[F[_]](implicitF:cats.Applicative[F]):tofu.higherKind.Point[[β$5$]tofu.higherKind.Pre.T[F,β$5$]]", "kind" : "def"}, {"label" : "TofuPreAlgebraSyntax", "tail" : "", "member" : "tofu.higherKind.Pre.TofuPreAlgebraSyntax", "link" : "tofu\/higherKind\/Pre$.html#TofuPreAlgebraSyntax[F[_],U[f[_]]]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "attach", "tail" : "(up: U[[β$2$]T[F, β$2$]])(alg: U[F])(arg0: ApplyK[U], arg1: Apply[F]): U[F]", "member" : "tofu.higherKind.Pre.attach", "link" : "tofu\/higherKind\/Pre$.html#attach[U[f[_]],F[_]](up:U[[β$2$]tofu.higherKind.Pre.T[F,β$2$]])(alg:U[F])(implicitevidence$2:cats.tagless.ApplyK[U],implicitevidence$3:cats.Apply[F]):U[F]", "kind" : "def"}, {"label" : "asMid", "tail" : "(arg0: Apply[F]): ~>[[β$0$]T[F, β$0$], [β$1$]Mid[F, β$1$]]", "member" : "tofu.higherKind.Pre.asMid", "link" : "tofu\/higherKind\/Pre$.html#asMid[F[_]](implicitevidence$1:cats.Apply[F]):[β$0$]tofu.higherKind.Pre.T[F,β$0$]~>[β$1$]tofu.higherKind.Mid[F,β$1$]", "kind" : "def"}, {"label" : "TofuPreSyntax", "tail" : "", "member" : "tofu.higherKind.Pre.TofuPreSyntax", "link" : "tofu\/higherKind\/Pre$.html#TofuPreSyntax[F[_],A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "PreApplier", "tail" : "", "member" : "tofu.higherKind.Pre.PreApplier", "link" : "tofu\/higherKind\/Pre$.html#PreApplier[A]extendsAnyVal", "kind" : "final class"}, {"label" : "apply", "tail" : "(): PreApplier[A]", "member" : "tofu.higherKind.Pre.apply", "link" : "tofu\/higherKind\/Pre$.html#apply[A]:tofu.higherKind.Pre.PreApplier[A]", "kind" : "def"}, {"label" : "PreTag", "tail" : "", "member" : "tofu.higherKind.Pre.PreTag", "link" : "tofu\/higherKind\/Pre$.html#PreTagextendsAny", "kind" : "trait"}, {"label" : "Base", "tail" : "", "member" : "tofu.higherKind.Pre.Base", "link" : "tofu\/higherKind\/Pre$.html#Base=Any{typePreOpaque}", "kind" : "type"}, {"label" : "preAlgebraMonoid", "tail" : "(arg0: Applicative[F], arg1: MonoidalK[U]): Monoid[U[[β$8$]T[F, β$8$]]]", "member" : "tofu.higherKind.PreInstances.preAlgebraMonoid", "link" : "tofu\/higherKind\/Pre$.html#preAlgebraMonoid[F[_],U[f[_]]](implicitevidence$5:cats.Applicative[F],implicitevidence$6:tofu.higherKind.MonoidalK[U]):cats.Monoid[U[[β$8$]tofu.higherKind.Pre.T[F,β$8$]]]", "kind" : "implicit def"}, {"label" : "preMonoidK", "tail" : "(arg0: Applicative[F]): MonoidK[[β$7$]T[F, β$7$]]", "member" : "tofu.higherKind.PreInstances.preMonoidK", "link" : "tofu\/higherKind\/Pre$.html#preMonoidK[F[_]](implicitevidence$4:cats.Applicative[F]):cats.MonoidK[[β$7$]tofu.higherKind.Pre.T[F,β$7$]]", "kind" : "implicit def"}, {"label" : "preAlgebraSemigroup", "tail" : "(arg0: Apply[F], arg1: ApplyK[U]): Semigroup[U[[β$10$]T[F, β$10$]]]", "member" : "tofu.higherKind.PreInstances1.preAlgebraSemigroup", "link" : "tofu\/higherKind\/Pre$.html#preAlgebraSemigroup[F[_],U[f[_]]](implicitevidence$8:cats.Apply[F],implicitevidence$9:cats.tagless.ApplyK[U]):cats.Semigroup[U[[β$10$]tofu.higherKind.Pre.T[F,β$10$]]]", "kind" : "implicit def"}, {"label" : "preSemigroupK", "tail" : "(arg0: Apply[F]): SemigroupK[[β$9$]T[F, β$9$]]", "member" : "tofu.higherKind.PreInstances1.preSemigroupK", "link" : "tofu\/higherKind\/Pre$.html#preSemigroupK[F[_]](implicitevidence$7:cats.Apply[F]):cats.SemigroupK[[β$9$]tofu.higherKind.Pre.T[F,β$9$]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/higherKind\/Pre$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/higherKind\/Pre$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/higherKind\/Pre$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/higherKind\/Pre$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/higherKind\/Pre$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/higherKind\/Pre$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/higherKind\/Pre$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/Pre$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/Pre$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/Pre$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/higherKind\/Pre$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/higherKind\/Pre$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/higherKind\/Pre$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/higherKind\/Pre$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/higherKind\/Pre$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/higherKind\/Pre$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/higherKind\/Pre$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/higherKind\/Pre$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/higherKind\/Pre$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"member" : "tofu.higherKind.Pre.T", "error" : "unsupported entity"}], "kind" : "object"}, {"name" : "tofu.higherKind.PreInstances", "shortDescription" : "", "members_class" : [{"label" : "preAlgebraMonoid", "tail" : "(arg0: Applicative[F], arg1: MonoidalK[U]): Monoid[U[[β$8$]T[F, β$8$]]]", "member" : "tofu.higherKind.PreInstances.preAlgebraMonoid", "link" : "tofu\/higherKind\/PreInstances.html#preAlgebraMonoid[F[_],U[f[_]]](implicitevidence$5:cats.Applicative[F],implicitevidence$6:tofu.higherKind.MonoidalK[U]):cats.Monoid[U[[β$8$]tofu.higherKind.Pre.T[F,β$8$]]]", "kind" : "implicit def"}, {"label" : "preMonoidK", "tail" : "(arg0: Applicative[F]): MonoidK[[β$7$]T[F, β$7$]]", "member" : "tofu.higherKind.PreInstances.preMonoidK", "link" : "tofu\/higherKind\/PreInstances.html#preMonoidK[F[_]](implicitevidence$4:cats.Applicative[F]):cats.MonoidK[[β$7$]tofu.higherKind.Pre.T[F,β$7$]]", "kind" : "implicit def"}, {"member" : "tofu.higherKind.PreInstances#<init>", "error" : "unsupported entity"}, {"label" : "preAlgebraSemigroup", "tail" : "(arg0: Apply[F], arg1: ApplyK[U]): Semigroup[U[[β$10$]T[F, β$10$]]]", "member" : "tofu.higherKind.PreInstances1.preAlgebraSemigroup", "link" : "tofu\/higherKind\/PreInstances.html#preAlgebraSemigroup[F[_],U[f[_]]](implicitevidence$8:cats.Apply[F],implicitevidence$9:cats.tagless.ApplyK[U]):cats.Semigroup[U[[β$10$]tofu.higherKind.Pre.T[F,β$10$]]]", "kind" : "implicit def"}, {"label" : "preSemigroupK", "tail" : "(arg0: Apply[F]): SemigroupK[[β$9$]T[F, β$9$]]", "member" : "tofu.higherKind.PreInstances1.preSemigroupK", "link" : "tofu\/higherKind\/PreInstances.html#preSemigroupK[F[_]](implicitevidence$7:cats.Apply[F]):cats.SemigroupK[[β$9$]tofu.higherKind.Pre.T[F,β$9$]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/higherKind\/PreInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/higherKind\/PreInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/higherKind\/PreInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/higherKind\/PreInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/higherKind\/PreInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/higherKind\/PreInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/higherKind\/PreInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/PreInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/PreInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/PreInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/higherKind\/PreInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/higherKind\/PreInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/higherKind\/PreInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/higherKind\/PreInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/higherKind\/PreInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/higherKind\/PreInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/higherKind\/PreInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/higherKind\/PreInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/higherKind\/PreInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "tofu\/higherKind\/PreInstances.html", "kind" : "class"}, {"name" : "tofu.higherKind.PreInstances1", "shortDescription" : "", "members_class" : [{"label" : "preAlgebraSemigroup", "tail" : "(arg0: Apply[F], arg1: ApplyK[U]): Semigroup[U[[β$10$]T[F, β$10$]]]", "member" : "tofu.higherKind.PreInstances1.preAlgebraSemigroup", "link" : "tofu\/higherKind\/PreInstances1.html#preAlgebraSemigroup[F[_],U[f[_]]](implicitevidence$8:cats.Apply[F],implicitevidence$9:cats.tagless.ApplyK[U]):cats.Semigroup[U[[β$10$]tofu.higherKind.Pre.T[F,β$10$]]]", "kind" : "implicit def"}, {"label" : "preSemigroupK", "tail" : "(arg0: Apply[F]): SemigroupK[[β$9$]T[F, β$9$]]", "member" : "tofu.higherKind.PreInstances1.preSemigroupK", "link" : "tofu\/higherKind\/PreInstances1.html#preSemigroupK[F[_]](implicitevidence$7:cats.Apply[F]):cats.SemigroupK[[β$9$]tofu.higherKind.Pre.T[F,β$9$]]", "kind" : "implicit def"}, {"member" : "tofu.higherKind.PreInstances1#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/higherKind\/PreInstances1.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/higherKind\/PreInstances1.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/higherKind\/PreInstances1.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/higherKind\/PreInstances1.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/higherKind\/PreInstances1.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/higherKind\/PreInstances1.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/higherKind\/PreInstances1.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/PreInstances1.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/PreInstances1.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/PreInstances1.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/higherKind\/PreInstances1.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/higherKind\/PreInstances1.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/higherKind\/PreInstances1.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/higherKind\/PreInstances1.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/higherKind\/PreInstances1.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/higherKind\/PreInstances1.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/higherKind\/PreInstances1.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/higherKind\/PreInstances1.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/higherKind\/PreInstances1.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "tofu\/higherKind\/PreInstances1.html", "kind" : "class"}, {"name" : "tofu.higherKind.PureK", "object" : "tofu\/higherKind\/PureK$.html", "members_object" : [{"label" : "ops", "tail" : "", "member" : "tofu.higherKind.PureK.ops", "link" : "tofu\/higherKind\/PureK$.html#ops", "kind" : "object"}, {"label" : "AllOps", "tail" : "", "member" : "tofu.higherKind.PureK.AllOps", "link" : "tofu\/higherKind\/PureK$.html#AllOps[U[_[_]],A[_]]extendsPureK.Ops[U,A]", "kind" : "trait"}, {"label" : "nonInheritedOps", "tail" : "", "member" : "tofu.higherKind.PureK.nonInheritedOps", "link" : "tofu\/higherKind\/PureK$.html#nonInheritedOps", "kind" : "object"}, {"label" : "ToPureKOps", "tail" : "", "member" : "tofu.higherKind.PureK.ToPureKOps", "link" : "tofu\/higherKind\/PureK$.html#ToPureKOpsextendsAnyRef", "kind" : "trait"}, {"label" : "Ops", "tail" : "", "member" : "tofu.higherKind.PureK.Ops", "link" : "tofu\/higherKind\/PureK$.html#Ops[U[_[_]],A[_]]extendsAnyRef", "kind" : "trait"}, {"label" : "apply", "tail" : "(instance: PureK[U]): PureK[U]", "member" : "tofu.higherKind.PureK.apply", "link" : "tofu\/higherKind\/PureK$.html#apply[U[_[_]]](implicitinstance:tofu.higherKind.PureK[U]):tofu.higherKind.PureK[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/higherKind\/PureK$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/higherKind\/PureK$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/higherKind\/PureK$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/higherKind\/PureK$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/higherKind\/PureK$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/higherKind\/PureK$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/higherKind\/PureK$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/PureK$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/PureK$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/PureK$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/higherKind\/PureK$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/higherKind\/PureK$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/higherKind\/PureK$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/higherKind\/PureK$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/higherKind\/PureK$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/higherKind\/PureK$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/higherKind\/PureK$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/higherKind\/PureK$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/higherKind\/PureK$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/higherKind\/PureK.html", "kind" : "trait", "members_trait" : [{"label" : "unitK", "tail" : "(): U[UnitK]", "member" : "tofu.higherKind.PureK.unitK", "link" : "tofu\/higherKind\/PureK.html#unitK:U[tofu.higherKind.UnitK]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "tofu\/higherKind\/PureK.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/higherKind\/PureK.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/higherKind\/PureK.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "tofu\/higherKind\/PureK.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "tofu\/higherKind\/PureK.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "tofu\/higherKind\/PureK.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "tofu\/higherKind\/PureK.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "tofu\/higherKind\/PureK.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "pureK", "tail" : "(p: Point[F]): U[F]", "member" : "tofu.higherKind.PureK.pureK", "link" : "tofu\/higherKind\/PureK.html#pureK[F[_]](p:tofu.higherKind.Point[F]):U[F]", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.Any.getClass", "link" : "tofu\/higherKind\/PureK.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : "Higher-order form of pointed functorHaving point in functor cat 1 -> F, provide point in mapped Scal () -> U[F]"}, {"name" : "tofu.higherKind.RepK", "object" : "tofu\/higherKind\/RepK$.html", "members_object" : [{"label" : "MakeRepr", "tail" : "", "member" : "tofu.higherKind.RepK.MakeRepr", "link" : "tofu\/higherKind\/RepK$.html#MakeRepr[T[_[_]],A,Arb[_]]extendsRepK[T,A]", "kind" : "abstract class"}, {"label" : "Applied", "tail" : "", "member" : "tofu.higherKind.RepK.Applied", "link" : "tofu\/higherKind\/RepK$.html#Applied[T[_[_]]]extendsAnyVal", "kind" : "final class"}, {"label" : "apply", "tail" : "(): Applied[U]", "member" : "tofu.higherKind.RepK.apply", "link" : "tofu\/higherKind\/RepK$.html#apply[U[_[_]]]:tofu.higherKind.RepK.Applied[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/higherKind\/RepK$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/higherKind\/RepK$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/higherKind\/RepK$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/higherKind\/RepK$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/higherKind\/RepK$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/higherKind\/RepK$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/higherKind\/RepK$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/RepK$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/RepK$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/RepK$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/higherKind\/RepK$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/higherKind\/RepK$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/higherKind\/RepK$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/higherKind\/RepK$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/higherKind\/RepK$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/higherKind\/RepK$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/higherKind\/RepK$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/higherKind\/RepK$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/higherKind\/RepK$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/higherKind\/RepK.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/higherKind\/RepK.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/higherKind\/RepK.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/higherKind\/RepK.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/higherKind\/RepK.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/higherKind\/RepK.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/higherKind\/RepK.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/higherKind\/RepK.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/RepK.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/RepK.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/RepK.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/higherKind\/RepK.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/higherKind\/RepK.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/higherKind\/RepK.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/higherKind\/RepK.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/higherKind\/RepK.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/higherKind\/RepK.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/higherKind\/RepK.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/higherKind\/RepK.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/higherKind\/RepK.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(ar: U[R]): R[A]", "member" : "tofu.higherKind.RepK.apply", "link" : "tofu\/higherKind\/RepK.html#apply[R[_]](ar:U[R]):R[A]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.higherKind.RepresentableK", "object" : "tofu\/higherKind\/RepresentableK$.html", "members_object" : [{"label" : "ops", "tail" : "", "member" : "tofu.higherKind.RepresentableK.ops", "link" : "tofu\/higherKind\/RepresentableK$.html#ops", "kind" : "object"}, {"label" : "AllOps", "tail" : "", "member" : "tofu.higherKind.RepresentableK.AllOps", "link" : "tofu\/higherKind\/RepresentableK$.html#AllOps[U[_[_]],A[_]]extendsRepresentableK.Ops[U,A]withMonoidalK.AllOps[U,A]withEmbed.AllOps[U,A]", "kind" : "trait"}, {"label" : "nonInheritedOps", "tail" : "", "member" : "tofu.higherKind.RepresentableK.nonInheritedOps", "link" : "tofu\/higherKind\/RepresentableK$.html#nonInheritedOps", "kind" : "object"}, {"label" : "ToRepresentableKOps", "tail" : "", "member" : "tofu.higherKind.RepresentableK.ToRepresentableKOps", "link" : "tofu\/higherKind\/RepresentableK$.html#ToRepresentableKOpsextendsAnyRef", "kind" : "trait"}, {"label" : "Ops", "tail" : "", "member" : "tofu.higherKind.RepresentableK.Ops", "link" : "tofu\/higherKind\/RepresentableK$.html#Ops[U[_[_]],A[_]]extendsAnyRef", "kind" : "trait"}, {"label" : "apply", "tail" : "(instance: RepresentableK[U]): RepresentableK[U]", "member" : "tofu.higherKind.RepresentableK.apply", "link" : "tofu\/higherKind\/RepresentableK$.html#apply[U[_[_]]](implicitinstance:tofu.higherKind.RepresentableK[U]):tofu.higherKind.RepresentableK[U]", "kind" : "def"}, {"label" : "index", "tail" : "(tf: U[F])(repr: RepK[U, A]): F[A]", "member" : "tofu.higherKind.RepresentableK.index", "link" : "tofu\/higherKind\/RepresentableK$.html#index[U[_[_]],F[_],A](tf:U[F])(repr:tofu.higherKind.RepK[U,A]):F[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/higherKind\/RepresentableK$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/higherKind\/RepresentableK$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/higherKind\/RepresentableK$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/higherKind\/RepresentableK$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/higherKind\/RepresentableK$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/higherKind\/RepresentableK$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/higherKind\/RepresentableK$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/RepresentableK$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/RepresentableK$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/RepresentableK$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/higherKind\/RepresentableK$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/higherKind\/RepresentableK$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/higherKind\/RepresentableK$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/higherKind\/RepresentableK$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/higherKind\/RepresentableK$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/higherKind\/RepresentableK$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/higherKind\/RepresentableK$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/higherKind\/RepresentableK$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/higherKind\/RepresentableK$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "tofu\/higherKind\/RepresentableK.html", "kind" : "trait", "members_trait" : [{"label" : "pureK", "tail" : "(p: Point[F]): U[F]", "member" : "tofu.higherKind.RepresentableK.pureK", "link" : "tofu\/higherKind\/RepresentableK.html#pureK[F[_]](p:tofu.higherKind.Point[F]):U[F]", "kind" : "def"}, {"label" : "zipWith2K", "tail" : "(af: U[F], ag: U[G])(f2: Function2K[F, G, H]): U[H]", "member" : "tofu.higherKind.RepresentableK.zipWith2K", "link" : "tofu\/higherKind\/RepresentableK.html#zipWith2K[F[_],G[_],H[_]](af:U[F],ag:U[G])(f2:tofu.higherKind.Function2K[F,G,H]):U[H]", "kind" : "def"}, {"label" : "embed", "tail" : "(ft: F[U[F]])(arg0: FlatMap[F]): U[F]", "member" : "tofu.higherKind.RepresentableK.embed", "link" : "tofu\/higherKind\/RepresentableK.html#embed[F[_]](ft:F[U[F]])(implicitevidence$1:cats.FlatMap[F]):U[F]", "kind" : "def"}, {"label" : "productK", "tail" : "(af: U[F], ag: U[G]): U[[γ$1$]Tuple2K[F, G, γ$1$]]", "member" : "tofu.higherKind.RepresentableK.productK", "link" : "tofu\/higherKind\/RepresentableK.html#productK[F[_],G[_]](af:U[F],ag:U[G]):U[[γ$1$]cats.data.Tuple2K[F,G,γ$1$]]", "kind" : "def"}, {"label" : "mapK", "tail" : "(af: U[F])(fk: ~>[F, G]): U[G]", "member" : "tofu.higherKind.RepresentableK.mapK", "link" : "tofu\/higherKind\/RepresentableK.html#mapK[F[_],G[_]](af:U[F])(fk:F~>G):U[G]", "kind" : "def"}, {"label" : "map2K", "tail" : "(af: U[F], ag: U[G])(f: ~>[[γ$0$]Tuple2K[F, G, γ$0$], H]): U[H]", "member" : "tofu.higherKind.MonoidalK.map2K", "link" : "tofu\/higherKind\/RepresentableK.html#map2K[F[_],G[_],H[_]](af:U[F],ag:U[G])(f:[γ$0$]cats.data.Tuple2K[F,G,γ$0$]~>H):U[H]", "kind" : "def"}, {"label" : "imapK", "tail" : "(af: U[F])(fk: ~>[F, G])(gK: ~>[G, F]): U[G]", "member" : "cats.tagless.FunctorK.imapK", "link" : "tofu\/higherKind\/RepresentableK.html#imapK[F[_],G[_]](af:A[F])(fk:F~>G)(gK:G~>F):A[G]", "kind" : "def"}, {"label" : "unitK", "tail" : "(): U[UnitK]", "member" : "tofu.higherKind.PureK.unitK", "link" : "tofu\/higherKind\/RepresentableK.html#unitK:U[tofu.higherKind.UnitK]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/higherKind\/RepresentableK.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/higherKind\/RepresentableK.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/higherKind\/RepresentableK.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/higherKind\/RepresentableK.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/higherKind\/RepresentableK.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/higherKind\/RepresentableK.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/higherKind\/RepresentableK.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/RepresentableK.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/RepresentableK.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/higherKind\/RepresentableK.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/higherKind\/RepresentableK.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/higherKind\/RepresentableK.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/higherKind\/RepresentableK.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/higherKind\/RepresentableK.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/higherKind\/RepresentableK.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/higherKind\/RepresentableK.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/higherKind\/RepresentableK.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/higherKind\/RepresentableK.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/higherKind\/RepresentableK.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "tabulate", "tail" : "(hom: ~>[[β$0$]RepK[U, β$0$], F]): U[F]", "member" : "tofu.higherKind.RepresentableK.tabulate", "link" : "tofu\/higherKind\/RepresentableK.html#tabulate[F[_]](hom:[β$0$]tofu.higherKind.RepK[U,β$0$]~>F):U[F]", "kind" : "abstract def"}], "shortDescription" : ""}], "tofu.concurrent.syntax" : [{"name" : "tofu.concurrent.syntax.daemon", "shortDescription" : "", "object" : "tofu\/concurrent\/syntax\/daemon$.html", "members_object" : [{"label" : "TofuDaemonicSyntax", "tail" : "", "member" : "tofu.concurrent.syntax.daemon.TofuDaemonicSyntax", "link" : "tofu\/concurrent\/syntax\/daemon$.html#TofuDaemonicSyntax[F[_],A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/syntax\/daemon$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/syntax\/daemon$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/syntax\/daemon$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/syntax\/daemon$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/syntax\/daemon$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/syntax\/daemon$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/syntax\/daemon$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/syntax\/daemon$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/syntax\/daemon$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/syntax\/daemon$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/syntax\/daemon$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/syntax\/daemon$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/syntax\/daemon$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/syntax\/daemon$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/syntax\/daemon$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/syntax\/daemon$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/syntax\/daemon$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/syntax\/daemon$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/syntax\/daemon$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.concurrent.syntax.ref", "shortDescription" : "", "object" : "tofu\/concurrent\/syntax\/ref$.html", "members_object" : [{"label" : "TofuRefOps", "tail" : "", "member" : "tofu.concurrent.syntax.ref.TofuRefOps", "link" : "tofu\/concurrent\/syntax\/ref$.html#TofuRefOps[F[_],A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/syntax\/ref$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/syntax\/ref$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/syntax\/ref$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/syntax\/ref$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/syntax\/ref$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/syntax\/ref$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/syntax\/ref$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/syntax\/ref$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/syntax\/ref$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/syntax\/ref$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/syntax\/ref$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/syntax\/ref$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/syntax\/ref$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/syntax\/ref$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/syntax\/ref$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/syntax\/ref$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/syntax\/ref$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/syntax\/ref$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/syntax\/ref$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.concurrent.syntax.traverse", "shortDescription" : "", "object" : "tofu\/concurrent\/syntax\/traverse$.html", "members_object" : [{"label" : "TraverseOps", "tail" : "", "member" : "tofu.concurrent.syntax.traverse.TraverseOps", "link" : "tofu\/concurrent\/syntax\/traverse$.html#TraverseOps[T[_],A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/concurrent\/syntax\/traverse$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/concurrent\/syntax\/traverse$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/concurrent\/syntax\/traverse$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/concurrent\/syntax\/traverse$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/concurrent\/syntax\/traverse$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/concurrent\/syntax\/traverse$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/concurrent\/syntax\/traverse$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/syntax\/traverse$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/syntax\/traverse$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/concurrent\/syntax\/traverse$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/concurrent\/syntax\/traverse$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/concurrent\/syntax\/traverse$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/concurrent\/syntax\/traverse$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/concurrent\/syntax\/traverse$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/concurrent\/syntax\/traverse$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/concurrent\/syntax\/traverse$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/concurrent\/syntax\/traverse$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/concurrent\/syntax\/traverse$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/concurrent\/syntax\/traverse$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "tofu.optics.tags" : [{"name" : "tofu.optics.tags.at", "shortDescription" : "", "object" : "tofu\/optics\/tags\/at$.html", "members_object" : [{"label" : "atSet", "tail" : "(): TagApply[PContains, Set[A], Boolean, at.this.type, A]", "member" : "tofu.optics.tags.at.atSet", "link" : "tofu\/optics\/tags\/at$.html#atSet[A]:tofu.optics.tags.TagApply[tofu.optics.PContains,Set[A],Boolean,tofu.optics.tags.at.type,A]", "kind" : "implicit def"}, {"label" : "atMap", "tail" : "(): TagApply[PContains, Map[K, V], Option[V], at.this.type, K]", "member" : "tofu.optics.tags.at.atMap", "link" : "tofu\/optics\/tags\/at$.html#atMap[K,V]:tofu.optics.tags.TagApply[tofu.optics.PContains,Map[K,V],Option[V],tofu.optics.tags.at.type,K]", "kind" : "implicit def"}, {"label" : "Tag", "tail" : "", "member" : "tofu.optics.tags.TaggerObj.Tag", "link" : "tofu\/optics\/tags\/at$.html#Tag=TaggerObj.this.type", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/tags\/at$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/tags\/at$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/tags\/at$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/tags\/at$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/tags\/at$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/tags\/at$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/tags\/at$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/tags\/at$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/tags\/at$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/tags\/at$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/tags\/at$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/tags\/at$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/tags\/at$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/tags\/at$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/tags\/at$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/tags\/at$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/tags\/at$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/tags\/at$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/tags\/at$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.optics.tags.every", "shortDescription" : "", "object" : "tofu\/optics\/tags\/every$.html", "members_object" : [{"label" : "everyTuple4", "tail" : "(): PTagApply[PItems, (A, A, A, A), (B, B, B, B), A, B, every.this.type, Unit]", "member" : "tofu.optics.tags.every.everyTuple4", "link" : "tofu\/optics\/tags\/every$.html#everyTuple4[A,B]:tofu.optics.tags.PTagApply[tofu.optics.PItems,(A,A,A,A),(B,B,B,B),A,B,tofu.optics.tags.every.type,Unit]", "kind" : "implicit def"}, {"label" : "everyTuple3", "tail" : "(): PTagApply[PItems, (A, A, A), (B, B, B), A, B, every.this.type, Unit]", "member" : "tofu.optics.tags.every.everyTuple3", "link" : "tofu\/optics\/tags\/every$.html#everyTuple3[A,B]:tofu.optics.tags.PTagApply[tofu.optics.PItems,(A,A,A),(B,B,B),A,B,tofu.optics.tags.every.type,Unit]", "kind" : "implicit def"}, {"label" : "everyTuple2", "tail" : "(): PTagApply[PItems, (A, A), (B, B), A, B, every.this.type, Unit]", "member" : "tofu.optics.tags.every.everyTuple2", "link" : "tofu\/optics\/tags\/every$.html#everyTuple2[A,B]:tofu.optics.tags.PTagApply[tofu.optics.PItems,(A,A),(B,B),A,B,tofu.optics.tags.every.type,Unit]", "kind" : "implicit def"}, {"label" : "everyVector", "tail" : "(): PTagApply[PItems, Vector[A], Vector[B], A, B, every.this.type, Unit]", "member" : "tofu.optics.tags.every.everyVector", "link" : "tofu\/optics\/tags\/every$.html#everyVector[A,B]:tofu.optics.tags.PTagApply[tofu.optics.PItems,Vector[A],Vector[B],A,B,tofu.optics.tags.every.type,Unit]", "kind" : "implicit def"}, {"label" : "everyList", "tail" : "(): PTagApply[PItems, List[A], List[B], A, B, every.this.type, Unit]", "member" : "tofu.optics.tags.every.everyList", "link" : "tofu\/optics\/tags\/every$.html#everyList[A,B]:tofu.optics.tags.PTagApply[tofu.optics.PItems,List[A],List[B],A,B,tofu.optics.tags.every.type,Unit]", "kind" : "implicit def"}, {"label" : "everyMap", "tail" : "(): PTagApply[PItems, Map[K, V1], Map[K, V2], V1, V2, every.this.type, Unit]", "member" : "tofu.optics.tags.every.everyMap", "link" : "tofu\/optics\/tags\/every$.html#everyMap[K,V1,V2]:tofu.optics.tags.PTagApply[tofu.optics.PItems,Map[K,V1],Map[K,V2],V1,V2,tofu.optics.tags.every.type,Unit]", "kind" : "implicit def"}, {"label" : "Tag", "tail" : "", "member" : "tofu.optics.tags.TaggerObj.Tag", "link" : "tofu\/optics\/tags\/every$.html#Tag=TaggerObj.this.type", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/tags\/every$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/tags\/every$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/tags\/every$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/tags\/every$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/tags\/every$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/tags\/every$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/tags\/every$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/tags\/every$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/tags\/every$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/tags\/every$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/tags\/every$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/tags\/every$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/tags\/every$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/tags\/every$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/tags\/every$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/tags\/every$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/tags\/every$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/tags\/every$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/tags\/every$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.optics.tags.field", "shortDescription" : "", "object" : "tofu\/optics\/tags\/field$.html", "members_object" : [{"label" : "field4T4", "tail" : "(): PTagApply[PContains, (A, B, C, D), (A, B, C, D1), D, D1, field.this.type, first.type]", "member" : "tofu.optics.tags.field.field4T4", "link" : "tofu\/optics\/tags\/field$.html#field4T4[A,B,C,D,D1]:tofu.optics.tags.PTagApply[tofu.optics.PContains,(A,B,C,D),(A,B,C,D1),D,D1,tofu.optics.tags.field.type,tofu.optics.tags.first.type]", "kind" : "implicit def"}, {"label" : "field3T4", "tail" : "(): PTagApply[PContains, (A, B, C, D), (A, B, C1, D), C, C1, field.this.type, first.type]", "member" : "tofu.optics.tags.field.field3T4", "link" : "tofu\/optics\/tags\/field$.html#field3T4[A,B,C,D,C1]:tofu.optics.tags.PTagApply[tofu.optics.PContains,(A,B,C,D),(A,B,C1,D),C,C1,tofu.optics.tags.field.type,tofu.optics.tags.first.type]", "kind" : "implicit def"}, {"label" : "field3T3", "tail" : "(): PTagApply[PContains, (A, B, C), (A, B, C1), C, C1, field.this.type, first.type]", "member" : "tofu.optics.tags.field.field3T3", "link" : "tofu\/optics\/tags\/field$.html#field3T3[A,B,C,C1]:tofu.optics.tags.PTagApply[tofu.optics.PContains,(A,B,C),(A,B,C1),C,C1,tofu.optics.tags.field.type,tofu.optics.tags.first.type]", "kind" : "implicit def"}, {"label" : "field2T4", "tail" : "(): PTagApply[PContains, (A, B, C, D), (A, B1, C, D), B, B1, field.this.type, first.type]", "member" : "tofu.optics.tags.field.field2T4", "link" : "tofu\/optics\/tags\/field$.html#field2T4[A,B,C,D,B1]:tofu.optics.tags.PTagApply[tofu.optics.PContains,(A,B,C,D),(A,B1,C,D),B,B1,tofu.optics.tags.field.type,tofu.optics.tags.first.type]", "kind" : "implicit def"}, {"label" : "field2T3", "tail" : "(): PTagApply[PContains, (A, B, C), (A, B1, C), B, B1, field.this.type, first.type]", "member" : "tofu.optics.tags.field.field2T3", "link" : "tofu\/optics\/tags\/field$.html#field2T3[A,B,C,B1]:tofu.optics.tags.PTagApply[tofu.optics.PContains,(A,B,C),(A,B1,C),B,B1,tofu.optics.tags.field.type,tofu.optics.tags.first.type]", "kind" : "implicit def"}, {"label" : "field2T2", "tail" : "(): PTagApply[PContains, (A, B), (A, B1), B, B1, field.this.type, first.type]", "member" : "tofu.optics.tags.field.field2T2", "link" : "tofu\/optics\/tags\/field$.html#field2T2[A,B,B1]:tofu.optics.tags.PTagApply[tofu.optics.PContains,(A,B),(A,B1),B,B1,tofu.optics.tags.field.type,tofu.optics.tags.first.type]", "kind" : "implicit def"}, {"label" : "field1T4", "tail" : "(): PTagApply[PContains, (A, B, C, D), (A1, B, C, D), A, A1, field.this.type, first.type]", "member" : "tofu.optics.tags.field.field1T4", "link" : "tofu\/optics\/tags\/field$.html#field1T4[A,B,C,D,A1]:tofu.optics.tags.PTagApply[tofu.optics.PContains,(A,B,C,D),(A1,B,C,D),A,A1,tofu.optics.tags.field.type,tofu.optics.tags.first.type]", "kind" : "implicit def"}, {"label" : "field1T3", "tail" : "(): PTagApply[PContains, (A, B, C), (A1, B, C), A, A1, field.this.type, first.type]", "member" : "tofu.optics.tags.field.field1T3", "link" : "tofu\/optics\/tags\/field$.html#field1T3[A,B,C,A1]:tofu.optics.tags.PTagApply[tofu.optics.PContains,(A,B,C),(A1,B,C),A,A1,tofu.optics.tags.field.type,tofu.optics.tags.first.type]", "kind" : "implicit def"}, {"label" : "field1T2", "tail" : "(): PTagApply[PContains, (A, B), (A1, B), A, A1, field.this.type, first.type]", "member" : "tofu.optics.tags.field.field1T2", "link" : "tofu\/optics\/tags\/field$.html#field1T2[A,B,A1]:tofu.optics.tags.PTagApply[tofu.optics.PContains,(A,B),(A1,B),A,A1,tofu.optics.tags.field.type,tofu.optics.tags.first.type]", "kind" : "implicit def"}, {"label" : "Tag", "tail" : "", "member" : "tofu.optics.tags.TaggerObj.Tag", "link" : "tofu\/optics\/tags\/field$.html#Tag=TaggerObj.this.type", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/tags\/field$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/tags\/field$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/tags\/field$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/tags\/field$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/tags\/field$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/tags\/field$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/tags\/field$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/tags\/field$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/tags\/field$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/tags\/field$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/tags\/field$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/tags\/field$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/tags\/field$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/tags\/field$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/tags\/field$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/tags\/field$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/tags\/field$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/tags\/field$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/tags\/field$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.optics.tags.first", "shortDescription" : "", "object" : "tofu\/optics\/tags\/first$.html", "members_object" : [{"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "tofu\/optics\/tags\/first$.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "tofu\/optics\/tags\/first$.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/tags\/first$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/tags\/first$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/tags\/first$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/tags\/first$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/tags\/first$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/tags\/first$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/tags\/first$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/tags\/first$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/tags\/first$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/tags\/first$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/tags\/first$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/tags\/first$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/tags\/first$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/tags\/first$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/tags\/first$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/tags\/first$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/tags\/first$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.optics.tags.fourth", "shortDescription" : "", "object" : "tofu\/optics\/tags\/fourth$.html", "members_object" : [{"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "tofu\/optics\/tags\/fourth$.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "tofu\/optics\/tags\/fourth$.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/tags\/fourth$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/tags\/fourth$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/tags\/fourth$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/tags\/fourth$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/tags\/fourth$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/tags\/fourth$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/tags\/fourth$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/tags\/fourth$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/tags\/fourth$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/tags\/fourth$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/tags\/fourth$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/tags\/fourth$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/tags\/fourth$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/tags\/fourth$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/tags\/fourth$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/tags\/fourth$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/tags\/fourth$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.optics.tags.index", "shortDescription" : "", "object" : "tofu\/optics\/tags\/index$.html", "members_object" : [{"label" : "indexVector", "tail" : "(): TagApply[PProperty, Vector[A], A, index.this.type, Int]", "member" : "tofu.optics.tags.index.indexVector", "link" : "tofu\/optics\/tags\/index$.html#indexVector[A]:tofu.optics.tags.TagApply[tofu.optics.PProperty,Vector[A],A,tofu.optics.tags.index.type,Int]", "kind" : "implicit def"}, {"label" : "indexList", "tail" : "(): TagApply[PProperty, List[A], A, index.this.type, Int]", "member" : "tofu.optics.tags.index.indexList", "link" : "tofu\/optics\/tags\/index$.html#indexList[A]:tofu.optics.tags.TagApply[tofu.optics.PProperty,List[A],A,tofu.optics.tags.index.type,Int]", "kind" : "implicit def"}, {"label" : "indexMap", "tail" : "(): TagApply[PProperty, Map[K, V], V, index.this.type, K]", "member" : "tofu.optics.tags.index.indexMap", "link" : "tofu\/optics\/tags\/index$.html#indexMap[K,V]:tofu.optics.tags.TagApply[tofu.optics.PProperty,Map[K,V],V,tofu.optics.tags.index.type,K]", "kind" : "implicit def"}, {"label" : "Tag", "tail" : "", "member" : "tofu.optics.tags.TaggerObj.Tag", "link" : "tofu\/optics\/tags\/index$.html#Tag=TaggerObj.this.type", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/tags\/index$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/tags\/index$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/tags\/index$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/tags\/index$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/tags\/index$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/tags\/index$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/tags\/index$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/tags\/index$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/tags\/index$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/tags\/index$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/tags\/index$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/tags\/index$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/tags\/index$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/tags\/index$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/tags\/index$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/tags\/index$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/tags\/index$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/tags\/index$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/tags\/index$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.optics.tags.PTagApply", "trait" : "tofu\/optics\/tags\/PTagApply.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/tags\/PTagApply.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/tags\/PTagApply.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/tags\/PTagApply.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/tags\/PTagApply.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/tags\/PTagApply.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/tags\/PTagApply.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/tags\/PTagApply.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/tags\/PTagApply.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/tags\/PTagApply.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/tags\/PTagApply.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/tags\/PTagApply.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/tags\/PTagApply.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/tags\/PTagApply.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/tags\/PTagApply.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/tags\/PTagApply.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/tags\/PTagApply.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/tags\/PTagApply.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/tags\/PTagApply.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/tags\/PTagApply.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "continue", "tail" : "(x: X): O[A, B, U, V]", "member" : "tofu.optics.tags.PTagApply.continue", "link" : "tofu\/optics\/tags\/PTagApply.html#continue(x:X):O[A,B,U,V]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.optics.tags.second", "shortDescription" : "", "object" : "tofu\/optics\/tags\/second$.html", "members_object" : [{"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "tofu\/optics\/tags\/second$.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "tofu\/optics\/tags\/second$.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/tags\/second$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/tags\/second$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/tags\/second$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/tags\/second$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/tags\/second$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/tags\/second$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/tags\/second$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/tags\/second$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/tags\/second$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/tags\/second$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/tags\/second$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/tags\/second$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/tags\/second$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/tags\/second$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/tags\/second$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/tags\/second$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/tags\/second$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "tofu.optics.tags.TagApply", "trait" : "tofu\/optics\/tags\/TagApply.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/tags\/TagApply.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/tags\/TagApply.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/tags\/TagApply.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/tags\/TagApply.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/tags\/TagApply.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/tags\/TagApply.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/tags\/TagApply.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/tags\/TagApply.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/tags\/TagApply.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/tags\/TagApply.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/tags\/TagApply.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/tags\/TagApply.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/tags\/TagApply.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/tags\/TagApply.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/tags\/TagApply.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/tags\/TagApply.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/tags\/TagApply.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/tags\/TagApply.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/tags\/TagApply.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "continue", "tail" : "(x: X): O[A, A, U, U]", "member" : "tofu.optics.tags.PTagApply.continue", "link" : "tofu\/optics\/tags\/TagApply.html#continue(x:X):O[A,B,U,V]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "tofu.optics.tags.Tagger", "trait" : "tofu\/optics\/tags\/Tagger.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/tags\/Tagger.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/tags\/Tagger.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/tags\/Tagger.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/tags\/Tagger.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/tags\/Tagger.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/tags\/Tagger.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/tags\/Tagger.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/tags\/Tagger.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/tags\/Tagger.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/tags\/Tagger.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/tags\/Tagger.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/tags\/Tagger.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/tags\/Tagger.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/tags\/Tagger.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/tags\/Tagger.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/tags\/Tagger.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/tags\/Tagger.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/tags\/Tagger.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/tags\/Tagger.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"member" : "tofu.optics.tags.Tagger.Tag", "error" : "unsupported entity"}], "shortDescription" : ""}, {"name" : "tofu.optics.tags.TaggerObj", "trait" : "tofu\/optics\/tags\/TaggerObj.html", "kind" : "trait", "members_trait" : [{"label" : "Tag", "tail" : "", "member" : "tofu.optics.tags.TaggerObj.Tag", "link" : "tofu\/optics\/tags\/TaggerObj.html#Tag=TaggerObj.this.type", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/tags\/TaggerObj.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/tags\/TaggerObj.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/tags\/TaggerObj.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/tags\/TaggerObj.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/tags\/TaggerObj.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/tags\/TaggerObj.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/tags\/TaggerObj.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/tags\/TaggerObj.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/tags\/TaggerObj.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/tags\/TaggerObj.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/tags\/TaggerObj.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/tags\/TaggerObj.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "tofu\/optics\/tags\/TaggerObj.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/tags\/TaggerObj.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/tags\/TaggerObj.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "tofu\/optics\/tags\/TaggerObj.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/tags\/TaggerObj.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/tags\/TaggerObj.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/tags\/TaggerObj.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "tofu.optics.tags.third", "shortDescription" : "", "object" : "tofu\/optics\/tags\/third$.html", "members_object" : [{"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "tofu\/optics\/tags\/third$.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "tofu\/optics\/tags\/third$.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "tofu\/optics\/tags\/third$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "tofu\/optics\/tags\/third$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "tofu\/optics\/tags\/third$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "tofu\/optics\/tags\/third$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "tofu\/optics\/tags\/third$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "tofu\/optics\/tags\/third$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "tofu\/optics\/tags\/third$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/tags\/third$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/tags\/third$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "tofu\/optics\/tags\/third$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "tofu\/optics\/tags\/third$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "tofu\/optics\/tags\/third$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "tofu\/optics\/tags\/third$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "tofu\/optics\/tags\/third$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "tofu\/optics\/tags\/third$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "tofu\/optics\/tags\/third$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "tofu\/optics\/tags\/third$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}]};